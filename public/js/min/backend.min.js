/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/dist/js/adminlte.min.js":
/*!****************************************!*\
  !*** ./public/dist/js/adminlte.min.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\r\n * AdminLTE v3.2.0 (https://adminlte.io)\r\n * Copyright 2014-2022 Colorlib <https://colorlib.com>\r\n * Licensed under MIT (https://github.com/ColorlibHQ/AdminLTE/blob/master/LICENSE)\r\n */\n!function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? t(exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (e, t) {\n  \"use strict\";\n\n  function a(e) {\n    return e && \"object\" == _typeof(e) && \"default\" in e ? e : {\n      \"default\": e\n    };\n  }\n\n  var n = a(t),\n      i = \"CardRefresh\",\n      o = \"lte.cardrefresh\",\n      l = n[\"default\"].fn[i],\n      s = \"card\",\n      r = '[data-card-widget=\"card-refresh\"]',\n      d = {\n    source: \"\",\n    sourceSelector: \"\",\n    params: {},\n    trigger: r,\n    content: \".card-body\",\n    loadInContent: !0,\n    loadOnInit: !0,\n    loadErrorTemplate: !0,\n    responseType: \"\",\n    overlayTemplate: '<div class=\"overlay\"><i class=\"fas fa-2x fa-sync-alt fa-spin\"></i></div>',\n    errorTemplate: '<span class=\"text-danger\"></span>',\n    onLoadStart: function onLoadStart() {},\n    onLoadDone: function onLoadDone(e) {\n      return e;\n    },\n    onLoadFail: function onLoadFail(e, t, a) {}\n  },\n      f = function () {\n    function e(e, t) {\n      if (this._element = e, this._parent = e.parents(\".card\").first(), this._settings = n[\"default\"].extend({}, d, t), this._overlay = n[\"default\"](this._settings.overlayTemplate), e.hasClass(s) && (this._parent = e), \"\" === this._settings.source) throw new Error(\"Source url was not defined. Please specify a url in your CardRefresh source option.\");\n    }\n\n    var t = e.prototype;\n    return t.load = function () {\n      var e = this;\n      this._addOverlay(), this._settings.onLoadStart.call(n[\"default\"](this)), n[\"default\"].get(this._settings.source, this._settings.params, function (t) {\n        e._settings.loadInContent && (\"\" !== e._settings.sourceSelector && (t = n[\"default\"](t).find(e._settings.sourceSelector).html()), e._parent.find(e._settings.content).html(t)), e._settings.onLoadDone.call(n[\"default\"](e), t), e._removeOverlay();\n      }, \"\" !== this._settings.responseType && this._settings.responseType).fail(function (t, a, i) {\n        if (e._removeOverlay(), e._settings.loadErrorTemplate) {\n          var o = n[\"default\"](e._settings.errorTemplate).text(i);\n\n          e._parent.find(e._settings.content).empty().append(o);\n        }\n\n        e._settings.onLoadFail.call(n[\"default\"](e), t, a, i);\n      }), n[\"default\"](this._element).trigger(n[\"default\"].Event(\"loaded.lte.cardrefresh\"));\n    }, t._addOverlay = function () {\n      this._parent.append(this._overlay), n[\"default\"](this._element).trigger(n[\"default\"].Event(\"overlay.added.lte.cardrefresh\"));\n    }, t._removeOverlay = function () {\n      this._parent.find(this._overlay).remove(), n[\"default\"](this._element).trigger(n[\"default\"].Event(\"overlay.removed.lte.cardrefresh\"));\n    }, t._init = function () {\n      var e = this;\n      n[\"default\"](this).find(this._settings.trigger).on(\"click\", function () {\n        e.load();\n      }), this._settings.loadOnInit && this.load();\n    }, e._jQueryInterface = function (t) {\n      var a = n[\"default\"](this).data(o),\n          i = n[\"default\"].extend({}, d, n[\"default\"](this).data());\n      a || (a = new e(n[\"default\"](this), i), n[\"default\"](this).data(o, \"string\" == typeof t ? a : t)), \"string\" == typeof t && /load/.test(t) ? a[t]() : a._init(n[\"default\"](this));\n    }, e;\n  }();\n\n  n[\"default\"](document).on(\"click\", r, function (e) {\n    e && e.preventDefault(), f._jQueryInterface.call(n[\"default\"](this), \"load\");\n  }), n[\"default\"](function () {\n    n[\"default\"](r).each(function () {\n      f._jQueryInterface.call(n[\"default\"](this));\n    });\n  }), n[\"default\"].fn[i] = f._jQueryInterface, n[\"default\"].fn[i].Constructor = f, n[\"default\"].fn[i].noConflict = function () {\n    return n[\"default\"].fn[i] = l, f._jQueryInterface;\n  };\n\n  var u = \"CardWidget\",\n      c = \"lte.cardwidget\",\n      h = n[\"default\"].fn[u],\n      g = \"card\",\n      p = \"collapsed-card\",\n      m = \"collapsing-card\",\n      v = \"expanding-card\",\n      _ = \"was-collapsed\",\n      b = \"maximized-card\",\n      y = '[data-card-widget=\"remove\"]',\n      C = '[data-card-widget=\"collapse\"]',\n      w = '[data-card-widget=\"maximize\"]',\n      x = {\n    animationSpeed: \"normal\",\n    collapseTrigger: C,\n    removeTrigger: y,\n    maximizeTrigger: w,\n    collapseIcon: \"fa-minus\",\n    expandIcon: \"fa-plus\",\n    maximizeIcon: \"fa-expand\",\n    minimizeIcon: \"fa-compress\"\n  },\n      I = function () {\n    function e(e, t) {\n      this._element = e, this._parent = e.parents(\".card\").first(), e.hasClass(g) && (this._parent = e), this._settings = n[\"default\"].extend({}, x, t);\n    }\n\n    var t = e.prototype;\n    return t.collapse = function () {\n      var e = this;\n      this._parent.addClass(m).children(\".card-body, .card-footer\").slideUp(this._settings.animationSpeed, function () {\n        e._parent.addClass(p).removeClass(m);\n      }), this._parent.find(\"> .card-header \" + this._settings.collapseTrigger + \" .\" + this._settings.collapseIcon).addClass(this._settings.expandIcon).removeClass(this._settings.collapseIcon), this._element.trigger(n[\"default\"].Event(\"collapsed.lte.cardwidget\"), this._parent);\n    }, t.expand = function () {\n      var e = this;\n      this._parent.addClass(v).children(\".card-body, .card-footer\").slideDown(this._settings.animationSpeed, function () {\n        e._parent.removeClass(p).removeClass(v);\n      }), this._parent.find(\"> .card-header \" + this._settings.collapseTrigger + \" .\" + this._settings.expandIcon).addClass(this._settings.collapseIcon).removeClass(this._settings.expandIcon), this._element.trigger(n[\"default\"].Event(\"expanded.lte.cardwidget\"), this._parent);\n    }, t.remove = function () {\n      this._parent.slideUp(), this._element.trigger(n[\"default\"].Event(\"removed.lte.cardwidget\"), this._parent);\n    }, t.toggle = function () {\n      this._parent.hasClass(p) ? this.expand() : this.collapse();\n    }, t.maximize = function () {\n      this._parent.find(this._settings.maximizeTrigger + \" .\" + this._settings.maximizeIcon).addClass(this._settings.minimizeIcon).removeClass(this._settings.maximizeIcon), this._parent.css({\n        height: this._parent.height(),\n        width: this._parent.width(),\n        transition: \"all .15s\"\n      }).delay(150).queue(function () {\n        var e = n[\"default\"](this);\n        e.addClass(b), n[\"default\"](\"html\").addClass(b), e.hasClass(p) && e.addClass(_), e.dequeue();\n      }), this._element.trigger(n[\"default\"].Event(\"maximized.lte.cardwidget\"), this._parent);\n    }, t.minimize = function () {\n      this._parent.find(this._settings.maximizeTrigger + \" .\" + this._settings.minimizeIcon).addClass(this._settings.maximizeIcon).removeClass(this._settings.minimizeIcon), this._parent.css(\"cssText\", \"height: \" + this._parent[0].style.height + \" !important; width: \" + this._parent[0].style.width + \" !important; transition: all .15s;\").delay(10).queue(function () {\n        var e = n[\"default\"](this);\n        e.removeClass(b), n[\"default\"](\"html\").removeClass(b), e.css({\n          height: \"inherit\",\n          width: \"inherit\"\n        }), e.hasClass(_) && e.removeClass(_), e.dequeue();\n      }), this._element.trigger(n[\"default\"].Event(\"minimized.lte.cardwidget\"), this._parent);\n    }, t.toggleMaximize = function () {\n      this._parent.hasClass(b) ? this.minimize() : this.maximize();\n    }, t._init = function (e) {\n      var t = this;\n      this._parent = e, n[\"default\"](this).find(this._settings.collapseTrigger).click(function () {\n        t.toggle();\n      }), n[\"default\"](this).find(this._settings.maximizeTrigger).click(function () {\n        t.toggleMaximize();\n      }), n[\"default\"](this).find(this._settings.removeTrigger).click(function () {\n        t.remove();\n      });\n    }, e._jQueryInterface = function (t) {\n      var a = n[\"default\"](this).data(c),\n          i = n[\"default\"].extend({}, x, n[\"default\"](this).data());\n      a || (a = new e(n[\"default\"](this), i), n[\"default\"](this).data(c, \"string\" == typeof t ? a : t)), \"string\" == typeof t && /collapse|expand|remove|toggle|maximize|minimize|toggleMaximize/.test(t) ? a[t]() : \"object\" == _typeof(t) && a._init(n[\"default\"](this));\n    }, e;\n  }();\n\n  n[\"default\"](document).on(\"click\", C, function (e) {\n    e && e.preventDefault(), I._jQueryInterface.call(n[\"default\"](this), \"toggle\");\n  }), n[\"default\"](document).on(\"click\", y, function (e) {\n    e && e.preventDefault(), I._jQueryInterface.call(n[\"default\"](this), \"remove\");\n  }), n[\"default\"](document).on(\"click\", w, function (e) {\n    e && e.preventDefault(), I._jQueryInterface.call(n[\"default\"](this), \"toggleMaximize\");\n  }), n[\"default\"].fn[u] = I._jQueryInterface, n[\"default\"].fn[u].Constructor = I, n[\"default\"].fn[u].noConflict = function () {\n    return n[\"default\"].fn[u] = h, I._jQueryInterface;\n  };\n\n  var T = \"ControlSidebar\",\n      S = \"lte.controlsidebar\",\n      j = n[\"default\"].fn[T],\n      k = \".control-sidebar\",\n      Q = \".control-sidebar-content\",\n      H = '[data-widget=\"control-sidebar\"]',\n      z = \".main-header\",\n      F = \".main-footer\",\n      E = \"control-sidebar-animate\",\n      L = \"control-sidebar-open\",\n      D = \"control-sidebar-slide-open\",\n      R = \"layout-fixed\",\n      A = {\n    controlsidebarSlide: !0,\n    scrollbarTheme: \"os-theme-light\",\n    scrollbarAutoHide: \"l\",\n    target: k,\n    animationSpeed: 300\n  },\n      M = function () {\n    function e(e, t) {\n      this._element = e, this._config = t;\n    }\n\n    var t = e.prototype;\n    return t.collapse = function () {\n      var e = this,\n          t = n[\"default\"](\"body\"),\n          a = n[\"default\"](\"html\");\n      this._config.controlsidebarSlide ? (a.addClass(E), t.removeClass(D).delay(300).queue(function () {\n        n[\"default\"](k).hide(), a.removeClass(E), n[\"default\"](this).dequeue();\n      })) : t.removeClass(L), n[\"default\"](this._element).trigger(n[\"default\"].Event(\"collapsed.lte.controlsidebar\")), setTimeout(function () {\n        n[\"default\"](e._element).trigger(n[\"default\"].Event(\"collapsed-done.lte.controlsidebar\"));\n      }, this._config.animationSpeed);\n    }, t.show = function (e) {\n      void 0 === e && (e = !1);\n      var t = n[\"default\"](\"body\"),\n          a = n[\"default\"](\"html\");\n      e && n[\"default\"](k).hide(), this._config.controlsidebarSlide ? (a.addClass(E), n[\"default\"](this._config.target).show().delay(10).queue(function () {\n        t.addClass(D).delay(300).queue(function () {\n          a.removeClass(E), n[\"default\"](this).dequeue();\n        }), n[\"default\"](this).dequeue();\n      })) : t.addClass(L), this._fixHeight(), this._fixScrollHeight(), n[\"default\"](this._element).trigger(n[\"default\"].Event(\"expanded.lte.controlsidebar\"));\n    }, t.toggle = function () {\n      var e = n[\"default\"](\"body\"),\n          t = this._config.target,\n          a = !n[\"default\"](t).is(\":visible\"),\n          i = e.hasClass(L) || e.hasClass(D),\n          o = a && (e.hasClass(L) || e.hasClass(D));\n      a || o ? this.show(a) : i && this.collapse();\n    }, t._init = function () {\n      var e = this,\n          t = n[\"default\"](\"body\");\n      t.hasClass(L) || t.hasClass(D) ? (n[\"default\"](k).not(this._config.target).hide(), n[\"default\"](this._config.target).css(\"display\", \"block\")) : n[\"default\"](k).hide(), this._fixHeight(), this._fixScrollHeight(), n[\"default\"](window).resize(function () {\n        e._fixHeight(), e._fixScrollHeight();\n      }), n[\"default\"](window).scroll(function () {\n        var t = n[\"default\"](\"body\");\n        (t.hasClass(L) || t.hasClass(D)) && e._fixScrollHeight();\n      });\n    }, t._isNavbarFixed = function () {\n      var e = n[\"default\"](\"body\");\n      return e.hasClass(\"layout-navbar-fixed\") || e.hasClass(\"layout-sm-navbar-fixed\") || e.hasClass(\"layout-md-navbar-fixed\") || e.hasClass(\"layout-lg-navbar-fixed\") || e.hasClass(\"layout-xl-navbar-fixed\");\n    }, t._isFooterFixed = function () {\n      var e = n[\"default\"](\"body\");\n      return e.hasClass(\"layout-footer-fixed\") || e.hasClass(\"layout-sm-footer-fixed\") || e.hasClass(\"layout-md-footer-fixed\") || e.hasClass(\"layout-lg-footer-fixed\") || e.hasClass(\"layout-xl-footer-fixed\");\n    }, t._fixScrollHeight = function () {\n      var e = n[\"default\"](\"body\"),\n          t = n[\"default\"](this._config.target);\n\n      if (e.hasClass(R)) {\n        var a = {\n          scroll: n[\"default\"](document).height(),\n          window: n[\"default\"](window).height(),\n          header: n[\"default\"](z).outerHeight(),\n          footer: n[\"default\"](F).outerHeight()\n        },\n            i = Math.abs(a.window + n[\"default\"](window).scrollTop() - a.scroll),\n            o = n[\"default\"](window).scrollTop(),\n            l = this._isNavbarFixed() && \"fixed\" === n[\"default\"](z).css(\"position\"),\n            s = this._isFooterFixed() && \"fixed\" === n[\"default\"](F).css(\"position\"),\n            r = n[\"default\"](this._config.target + \", \" + this._config.target + \" \" + Q);\n        if (0 === o && 0 === i) t.css({\n          bottom: a.footer,\n          top: a.header\n        }), r.css(\"height\", a.window - (a.header + a.footer));else if (i <= a.footer) {\n          if (!1 === s) {\n            var d = a.header - o;\n            t.css(\"bottom\", a.footer - i).css(\"top\", d >= 0 ? d : 0), r.css(\"height\", a.window - (a.footer - i));\n          } else t.css(\"bottom\", a.footer);\n        } else o <= a.header ? !1 === l ? (t.css(\"top\", a.header - o), r.css(\"height\", a.window - (a.header - o))) : t.css(\"top\", a.header) : !1 === l ? (t.css(\"top\", 0), r.css(\"height\", a.window)) : t.css(\"top\", a.header);\n        s && l ? (r.css(\"height\", \"100%\"), t.css(\"height\", \"\")) : (s || l) && (r.css(\"height\", \"100%\"), r.css(\"height\", \"\"));\n      }\n    }, t._fixHeight = function () {\n      var e = n[\"default\"](\"body\"),\n          t = n[\"default\"](this._config.target + \" \" + Q);\n\n      if (e.hasClass(R)) {\n        var a = n[\"default\"](window).height(),\n            i = n[\"default\"](z).outerHeight(),\n            o = n[\"default\"](F).outerHeight(),\n            l = a - i;\n        this._isFooterFixed() && \"fixed\" === n[\"default\"](F).css(\"position\") && (l = a - i - o), t.css(\"height\", l), \"undefined\" != typeof n[\"default\"].fn.overlayScrollbars && t.overlayScrollbars({\n          className: this._config.scrollbarTheme,\n          sizeAutoCapable: !0,\n          scrollbars: {\n            autoHide: this._config.scrollbarAutoHide,\n            clickScrolling: !0\n          }\n        });\n      } else t.attr(\"style\", \"\");\n    }, e._jQueryInterface = function (t) {\n      return this.each(function () {\n        var a = n[\"default\"](this).data(S),\n            i = n[\"default\"].extend({}, A, n[\"default\"](this).data());\n        if (a || (a = new e(this, i), n[\"default\"](this).data(S, a)), \"undefined\" === a[t]) throw new Error(t + \" is not a function\");\n        a[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"](document).on(\"click\", H, function (e) {\n    e.preventDefault(), M._jQueryInterface.call(n[\"default\"](this), \"toggle\");\n  }), n[\"default\"](document).ready(function () {\n    M._jQueryInterface.call(n[\"default\"](H), \"_init\");\n  }), n[\"default\"].fn[T] = M._jQueryInterface, n[\"default\"].fn[T].Constructor = M, n[\"default\"].fn[T].noConflict = function () {\n    return n[\"default\"].fn[T] = j, M._jQueryInterface;\n  };\n\n  var q = \"DirectChat\",\n      O = \"lte.directchat\",\n      N = n[\"default\"].fn[q],\n      P = function () {\n    function e(e) {\n      this._element = e;\n    }\n\n    return e.prototype.toggle = function () {\n      n[\"default\"](this._element).parents(\".direct-chat\").first().toggleClass(\"direct-chat-contacts-open\"), n[\"default\"](this._element).trigger(n[\"default\"].Event(\"toggled.lte.directchat\"));\n    }, e._jQueryInterface = function (t) {\n      return this.each(function () {\n        var a = n[\"default\"](this).data(O);\n        a || (a = new e(n[\"default\"](this)), n[\"default\"](this).data(O, a)), a[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"](document).on(\"click\", '[data-widget=\"chat-pane-toggle\"]', function (e) {\n    e && e.preventDefault(), P._jQueryInterface.call(n[\"default\"](this), \"toggle\");\n  }), n[\"default\"].fn[q] = P._jQueryInterface, n[\"default\"].fn[q].Constructor = P, n[\"default\"].fn[q].noConflict = function () {\n    return n[\"default\"].fn[q] = N, P._jQueryInterface;\n  };\n\n  var U = \"Dropdown\",\n      B = \"lte.dropdown\",\n      $ = n[\"default\"].fn[U],\n      J = \".dropdown-menu\",\n      W = {},\n      V = function () {\n    function e(e, t) {\n      this._config = t, this._element = e;\n    }\n\n    var t = e.prototype;\n    return t.toggleSubmenu = function () {\n      this._element.siblings().show().toggleClass(\"show\"), this._element.next().hasClass(\"show\") || this._element.parents(J).first().find(\".show\").removeClass(\"show\").hide(), this._element.parents(\"li.nav-item.dropdown.show\").on(\"hidden.bs.dropdown\", function () {\n        n[\"default\"](\".dropdown-submenu .show\").removeClass(\"show\").hide();\n      });\n    }, t.fixPosition = function () {\n      var e = n[\"default\"](\".dropdown-menu.show\");\n\n      if (0 !== e.length) {\n        e.hasClass(\"dropdown-menu-right\") ? e.css({\n          left: \"inherit\",\n          right: 0\n        }) : e.css({\n          left: 0,\n          right: \"inherit\"\n        });\n        var t = e.offset(),\n            a = e.width(),\n            i = n[\"default\"](window).width() - t.left;\n        t.left < 0 ? e.css({\n          left: \"inherit\",\n          right: t.left - 5\n        }) : i < a && e.css({\n          left: \"inherit\",\n          right: 0\n        });\n      }\n    }, e._jQueryInterface = function (t) {\n      return this.each(function () {\n        var a = n[\"default\"](this).data(B),\n            i = n[\"default\"].extend({}, W, n[\"default\"](this).data());\n        a || (a = new e(n[\"default\"](this), i), n[\"default\"](this).data(B, a)), \"toggleSubmenu\" !== t && \"fixPosition\" !== t || a[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"]('.dropdown-menu [data-toggle=\"dropdown\"]').on(\"click\", function (e) {\n    e.preventDefault(), e.stopPropagation(), V._jQueryInterface.call(n[\"default\"](this), \"toggleSubmenu\");\n  }), n[\"default\"]('.navbar [data-toggle=\"dropdown\"]').on(\"click\", function (e) {\n    e.preventDefault(), n[\"default\"](e.target).parent().hasClass(\"dropdown-submenu\") || setTimeout(function () {\n      V._jQueryInterface.call(n[\"default\"](this), \"fixPosition\");\n    }, 1);\n  }), n[\"default\"].fn[U] = V._jQueryInterface, n[\"default\"].fn[U].Constructor = V, n[\"default\"].fn[U].noConflict = function () {\n    return n[\"default\"].fn[U] = $, V._jQueryInterface;\n  };\n\n  var G = \"ExpandableTable\",\n      K = \"lte.expandableTable\",\n      X = n[\"default\"].fn[G],\n      Y = \".expandable-body\",\n      Z = '[data-widget=\"expandable-table\"]',\n      ee = \"aria-expanded\",\n      te = function () {\n    function e(e, t) {\n      this._options = t, this._element = e;\n    }\n\n    var t = e.prototype;\n    return t.init = function () {\n      n[\"default\"](Z).each(function (e, t) {\n        var a = n[\"default\"](t).attr(ee),\n            i = n[\"default\"](t).next(Y).children().first().children();\n        \"true\" === a ? i.show() : \"false\" === a && (i.hide(), i.parent().parent().addClass(\"d-none\"));\n      });\n    }, t.toggleRow = function () {\n      var e = this._element;\n      \"TR\" !== e[0].nodeName && \"TR\" !== (e = e.parent())[0].nodeName && (e = e.parent());\n      var t = e.attr(ee),\n          a = e.next(Y).children().first().children();\n      a.stop(), \"true\" === t ? (a.slideUp(500, function () {\n        e.next(Y).addClass(\"d-none\");\n      }), e.attr(ee, \"false\"), e.trigger(n[\"default\"].Event(\"collapsed.lte.expandableTable\"))) : \"false\" === t && (e.next(Y).removeClass(\"d-none\"), a.slideDown(500), e.attr(ee, \"true\"), e.trigger(n[\"default\"].Event(\"expanded.lte.expandableTable\")));\n    }, e._jQueryInterface = function (t) {\n      return this.each(function () {\n        var a = n[\"default\"](this).data(K);\n        a || (a = new e(n[\"default\"](this)), n[\"default\"](this).data(K, a)), \"string\" == typeof t && /init|toggleRow/.test(t) && a[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"](\".expandable-table\").ready(function () {\n    te._jQueryInterface.call(n[\"default\"](this), \"init\");\n  }), n[\"default\"](document).on(\"click\", Z, function () {\n    te._jQueryInterface.call(n[\"default\"](this), \"toggleRow\");\n  }), n[\"default\"].fn[G] = te._jQueryInterface, n[\"default\"].fn[G].Constructor = te, n[\"default\"].fn[G].noConflict = function () {\n    return n[\"default\"].fn[G] = X, te._jQueryInterface;\n  };\n\n  var ae = \"Fullscreen\",\n      ne = \"lte.fullscreen\",\n      ie = n[\"default\"].fn[ae],\n      oe = '[data-widget=\"fullscreen\"]',\n      le = oe + \" i\",\n      se = {\n    minimizeIcon: \"fa-compress-arrows-alt\",\n    maximizeIcon: \"fa-expand-arrows-alt\"\n  },\n      re = function () {\n    function e(e, t) {\n      this.element = e, this.options = n[\"default\"].extend({}, se, t);\n    }\n\n    var t = e.prototype;\n    return t.toggle = function () {\n      document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement ? this.windowed() : this.fullscreen();\n    }, t.toggleIcon = function () {\n      document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement ? n[\"default\"](le).removeClass(this.options.maximizeIcon).addClass(this.options.minimizeIcon) : n[\"default\"](le).removeClass(this.options.minimizeIcon).addClass(this.options.maximizeIcon);\n    }, t.fullscreen = function () {\n      document.documentElement.requestFullscreen ? document.documentElement.requestFullscreen() : document.documentElement.webkitRequestFullscreen ? document.documentElement.webkitRequestFullscreen() : document.documentElement.msRequestFullscreen && document.documentElement.msRequestFullscreen();\n    }, t.windowed = function () {\n      document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();\n    }, e._jQueryInterface = function (t) {\n      var a = n[\"default\"](this).data(ne);\n      a || (a = n[\"default\"](this).data());\n      var i = n[\"default\"].extend({}, se, \"object\" == _typeof(t) ? t : a),\n          o = new e(n[\"default\"](this), i);\n      n[\"default\"](this).data(ne, \"object\" == _typeof(t) ? t : a), \"string\" == typeof t && /toggle|toggleIcon|fullscreen|windowed/.test(t) ? o[t]() : o.init();\n    }, e;\n  }();\n\n  n[\"default\"](document).on(\"click\", oe, function () {\n    re._jQueryInterface.call(n[\"default\"](this), \"toggle\");\n  }), n[\"default\"](document).on(\"webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange\", function () {\n    re._jQueryInterface.call(n[\"default\"](oe), \"toggleIcon\");\n  }), n[\"default\"].fn[ae] = re._jQueryInterface, n[\"default\"].fn[ae].Constructor = re, n[\"default\"].fn[ae].noConflict = function () {\n    return n[\"default\"].fn[ae] = ie, re._jQueryInterface;\n  };\n\n  var de = \"lte.iframe\",\n      fe = n[\"default\"].fn.IFrame,\n      ue = '[data-widget=\"iframe\"]',\n      ce = '[data-widget=\"iframe-fullscreen\"]',\n      he = \".content-wrapper\",\n      ge = \".content-wrapper iframe\",\n      pe = \".content-wrapper.iframe-mode .nav\",\n      me = \".content-wrapper.iframe-mode .navbar-nav\",\n      ve = me + \" .nav-item\",\n      _e = me + \" .nav-link\",\n      be = \".content-wrapper.iframe-mode .tab-content\",\n      ye = be + \" .tab-empty\",\n      Ce = be + \" .tab-loading\",\n      we = be + \" .tab-pane\",\n      xe = \".main-sidebar .nav-item > a.nav-link\",\n      Ie = \".main-header .nav-item a.nav-link\",\n      Te = \".main-header a.dropdown-item\",\n      Se = \"iframe-mode\",\n      je = \"iframe-mode-fullscreen\",\n      ke = {\n    onTabClick: function onTabClick(e) {\n      return e;\n    },\n    onTabChanged: function onTabChanged(e) {\n      return e;\n    },\n    onTabCreated: function onTabCreated(e) {\n      return e;\n    },\n    autoIframeMode: !0,\n    autoItemActive: !0,\n    autoShowNewTab: !0,\n    autoDarkMode: !1,\n    allowDuplicates: !1,\n    allowReload: !0,\n    loadingScreen: !0,\n    useNavbarItems: !0,\n    scrollOffset: 40,\n    scrollBehaviorSwap: !1,\n    iconMaximize: \"fa-expand\",\n    iconMinimize: \"fa-compress\"\n  },\n      Qe = function () {\n    function e(e, t) {\n      this._config = t, this._element = e, this._init();\n    }\n\n    var t = e.prototype;\n    return t.onTabClick = function (e) {\n      this._config.onTabClick(e);\n    }, t.onTabChanged = function (e) {\n      this._config.onTabChanged(e);\n    }, t.onTabCreated = function (e) {\n      this._config.onTabCreated(e);\n    }, t.createTab = function (e, t, a, i) {\n      var o = this,\n          l = \"panel-\" + a,\n          s = \"tab-\" + a;\n      this._config.allowDuplicates && (l += \"-\" + Math.floor(1e3 * Math.random()), s += \"-\" + Math.floor(1e3 * Math.random()));\n      var r = '<li class=\"nav-item\" role=\"presentation\"><a href=\"#\" class=\"btn-iframe-close\" data-widget=\"iframe-close\" data-type=\"only-this\"><i class=\"fas fa-times\"></i></a><a class=\"nav-link\" data-toggle=\"row\" id=\"' + s + '\" href=\"#' + l + '\" role=\"tab\" aria-controls=\"' + l + '\" aria-selected=\"false\">' + e + \"</a></li>\";\n      n[\"default\"](me).append(unescape(escape(r)));\n      var d = '<div class=\"tab-pane fade\" id=\"' + l + '\" role=\"tabpanel\" aria-labelledby=\"' + s + '\"><iframe src=\"' + t + '\"></iframe></div>';\n      if (n[\"default\"](be).append(unescape(escape(d))), i) if (this._config.loadingScreen) {\n        var f = n[\"default\"](Ce);\n        f.fadeIn(), n[\"default\"](l + \" iframe\").ready(function () {\n          \"number\" == typeof o._config.loadingScreen ? (o.switchTab(\"#\" + s), setTimeout(function () {\n            f.fadeOut();\n          }, o._config.loadingScreen)) : (o.switchTab(\"#\" + s), f.fadeOut());\n        });\n      } else this.switchTab(\"#\" + s);\n      this.onTabCreated(n[\"default\"](\"#\" + s));\n    }, t.openTabSidebar = function (e, t) {\n      void 0 === t && (t = this._config.autoShowNewTab);\n      var a = n[\"default\"](e).clone();\n      void 0 === a.attr(\"href\") && (a = n[\"default\"](e).parent(\"a\").clone()), a.find(\".right, .search-path\").remove();\n      var i = a.find(\"p\").text();\n      \"\" === i && (i = a.text());\n      var o = a.attr(\"href\");\n\n      if (\"#\" !== o && \"\" !== o && void 0 !== o) {\n        var l = unescape(o).replace(\"./\", \"\").replace(/[\"#&'./:=?[\\]]/gi, \"-\").replace(/(--)/gi, \"\"),\n            s = \"tab-\" + l;\n        if (!this._config.allowDuplicates && n[\"default\"](\"#\" + s).length > 0) return this.switchTab(\"#\" + s, this._config.allowReload);\n        (!this._config.allowDuplicates && 0 === n[\"default\"](\"#\" + s).length || this._config.allowDuplicates) && this.createTab(i, o, l, t);\n      }\n    }, t.switchTab = function (e, t) {\n      var a = this;\n      void 0 === t && (t = !1);\n      var i = n[\"default\"](e),\n          o = i.attr(\"href\");\n\n      if (n[\"default\"](ye).hide(), t) {\n        var l = n[\"default\"](Ce);\n        this._config.loadingScreen ? l.show(0, function () {\n          n[\"default\"](o + \" iframe\").attr(\"src\", n[\"default\"](o + \" iframe\").attr(\"src\")).ready(function () {\n            a._config.loadingScreen && (\"number\" == typeof a._config.loadingScreen ? setTimeout(function () {\n              l.fadeOut();\n            }, a._config.loadingScreen) : l.fadeOut());\n          });\n        }) : n[\"default\"](o + \" iframe\").attr(\"src\", n[\"default\"](o + \" iframe\").attr(\"src\"));\n      }\n\n      n[\"default\"](me + \" .active\").tab(\"dispose\").removeClass(\"active\"), this._fixHeight(), i.tab(\"show\"), i.parents(\"li\").addClass(\"active\"), this.onTabChanged(i), this._config.autoItemActive && this._setItemActive(n[\"default\"](o + \" iframe\").attr(\"src\"));\n    }, t.removeActiveTab = function (e, t) {\n      if (\"all\" == e) n[\"default\"](ve).remove(), n[\"default\"](we).remove(), n[\"default\"](ye).show();else if (\"all-other\" == e) n[\"default\"](ve + \":not(.active)\").remove(), n[\"default\"](we + \":not(.active)\").remove();else if (\"only-this\" == e) {\n        var a = n[\"default\"](t),\n            i = a.parent(\".nav-item\"),\n            o = i.parent(),\n            l = i.index(),\n            s = a.siblings(\".nav-link\").attr(\"aria-controls\");\n        if (i.remove(), n[\"default\"](\"#\" + s).remove(), n[\"default\"](be).children().length == n[\"default\"](ye + \", \" + Ce).length) n[\"default\"](ye).show();else {\n          var r = l - 1;\n          this.switchTab(o.children().eq(r).find(\"a.nav-link\"));\n        }\n      } else {\n        var d = n[\"default\"](ve + \".active\"),\n            f = d.parent(),\n            u = d.index();\n        if (d.remove(), n[\"default\"](we + \".active\").remove(), n[\"default\"](be).children().length == n[\"default\"](ye + \", \" + Ce).length) n[\"default\"](ye).show();else {\n          var c = u - 1;\n          this.switchTab(f.children().eq(c).find(\"a.nav-link\"));\n        }\n      }\n    }, t.toggleFullscreen = function () {\n      n[\"default\"](\"body\").hasClass(je) ? (n[\"default\"](ce + \" i\").removeClass(this._config.iconMinimize).addClass(this._config.iconMaximize), n[\"default\"](\"body\").removeClass(je), n[\"default\"](ye + \", \" + Ce).height(\"100%\"), n[\"default\"](he).height(\"100%\"), n[\"default\"](ge).height(\"100%\")) : (n[\"default\"](ce + \" i\").removeClass(this._config.iconMaximize).addClass(this._config.iconMinimize), n[\"default\"](\"body\").addClass(je)), n[\"default\"](window).trigger(\"resize\"), this._fixHeight(!0);\n    }, t._init = function () {\n      var e = n[\"default\"](be).children().length > 2;\n\n      if (this._setupListeners(), this._fixHeight(!0), e) {\n        var t = n[\"default\"](\"\" + we).first();\n        console.log(t);\n        var a = \"#tab-\" + t.attr(\"id\").replace(\"panel-\", \"\");\n        this.switchTab(a, !0);\n      }\n    }, t._initFrameElement = function () {\n      if (window.frameElement && this._config.autoIframeMode) {\n        var e = n[\"default\"](\"body\");\n        e.addClass(Se), this._config.autoDarkMode && e.addClass(\"dark-mode\");\n      }\n    }, t._navScroll = function (e) {\n      var t = n[\"default\"](me).scrollLeft();\n      n[\"default\"](me).animate({\n        scrollLeft: t + e\n      }, 250, \"linear\");\n    }, t._setupListeners = function () {\n      var e = this;\n      n[\"default\"](window).on(\"resize\", function () {\n        setTimeout(function () {\n          e._fixHeight();\n        }, 1);\n      }), n[\"default\"](he).hasClass(Se) && (n[\"default\"](document).on(\"click\", xe + \", .sidebar-search-results .list-group-item\", function (t) {\n        t.preventDefault(), e.openTabSidebar(t.target);\n      }), this._config.useNavbarItems && n[\"default\"](document).on(\"click\", Ie + \", \" + Te, function (t) {\n        t.preventDefault(), e.openTabSidebar(t.target);\n      })), n[\"default\"](document).on(\"click\", _e, function (t) {\n        t.preventDefault(), e.onTabClick(t.target), e.switchTab(t.target);\n      }), n[\"default\"](document).on(\"click\", _e, function (t) {\n        t.preventDefault(), e.onTabClick(t.target), e.switchTab(t.target);\n      }), n[\"default\"](document).on(\"click\", '[data-widget=\"iframe-close\"]', function (t) {\n        t.preventDefault();\n        var a = t.target;\n        \"I\" == a.nodeName && (a = t.target.offsetParent), e.removeActiveTab(a.attributes[\"data-type\"] ? a.attributes[\"data-type\"].nodeValue : null, a);\n      }), n[\"default\"](document).on(\"click\", ce, function (t) {\n        t.preventDefault(), e.toggleFullscreen();\n      });\n      var t = !1,\n          a = null;\n      n[\"default\"](document).on(\"mousedown\", '[data-widget=\"iframe-scrollleft\"]', function (n) {\n        n.preventDefault(), clearInterval(a);\n        var i = e._config.scrollOffset;\n        e._config.scrollBehaviorSwap || (i = -i), t = !0, e._navScroll(i), a = setInterval(function () {\n          e._navScroll(i);\n        }, 250);\n      }), n[\"default\"](document).on(\"mousedown\", '[data-widget=\"iframe-scrollright\"]', function (n) {\n        n.preventDefault(), clearInterval(a);\n        var i = e._config.scrollOffset;\n        e._config.scrollBehaviorSwap && (i = -i), t = !0, e._navScroll(i), a = setInterval(function () {\n          e._navScroll(i);\n        }, 250);\n      }), n[\"default\"](document).on(\"mouseup\", function () {\n        t && (t = !1, clearInterval(a), a = null);\n      });\n    }, t._setItemActive = function (e) {\n      n[\"default\"](xe + \", \" + Te).removeClass(\"active\"), n[\"default\"](Ie).parent().removeClass(\"active\");\n      var t = n[\"default\"](Ie + '[href$=\"' + e + '\"]'),\n          a = n[\"default\"]('.main-header a.dropdown-item[href$=\"' + e + '\"]'),\n          i = n[\"default\"](xe + '[href$=\"' + e + '\"]');\n      t.each(function (e, t) {\n        n[\"default\"](t).parent().addClass(\"active\");\n      }), a.each(function (e, t) {\n        n[\"default\"](t).addClass(\"active\");\n      }), i.each(function (e, t) {\n        n[\"default\"](t).addClass(\"active\"), n[\"default\"](t).parents(\".nav-treeview\").prevAll(\".nav-link\").addClass(\"active\");\n      });\n    }, t._fixHeight = function (e) {\n      if (void 0 === e && (e = !1), n[\"default\"](\"body\").hasClass(je)) {\n        var t = n[\"default\"](window).height(),\n            a = n[\"default\"](pe).outerHeight();\n        n[\"default\"](ye + \", \" + Ce + \", \" + ge).height(t - a), n[\"default\"](he).height(t);\n      } else {\n        var i = parseFloat(n[\"default\"](he).css(\"height\")),\n            o = n[\"default\"](pe).outerHeight();\n        1 == e ? setTimeout(function () {\n          n[\"default\"](ye + \", \" + Ce).height(i - o);\n        }, 50) : n[\"default\"](ge).height(i - o);\n      }\n    }, e._jQueryInterface = function (t) {\n      if (n[\"default\"](ue).length > 0) {\n        var a = n[\"default\"](this).data(de);\n        a || (a = n[\"default\"](this).data());\n        var i = n[\"default\"].extend({}, ke, \"object\" == _typeof(t) ? t : a);\n        localStorage.setItem(\"AdminLTE:IFrame:Options\", JSON.stringify(i));\n        var o = new e(n[\"default\"](this), i);\n        n[\"default\"](this).data(de, \"object\" == _typeof(t) ? t : a), \"string\" == typeof t && /createTab|openTabSidebar|switchTab|removeActiveTab/.test(t) && o[t]();\n      } else new e(n[\"default\"](this), JSON.parse(localStorage.getItem(\"AdminLTE:IFrame:Options\")))._initFrameElement();\n    }, e;\n  }();\n\n  n[\"default\"](window).on(\"load\", function () {\n    Qe._jQueryInterface.call(n[\"default\"](ue));\n  }), n[\"default\"].fn.IFrame = Qe._jQueryInterface, n[\"default\"].fn.IFrame.Constructor = Qe, n[\"default\"].fn.IFrame.noConflict = function () {\n    return n[\"default\"].fn.IFrame = fe, Qe._jQueryInterface;\n  };\n\n  var He = \"lte.layout\",\n      ze = n[\"default\"].fn.Layout,\n      Fe = \".main-header\",\n      Ee = \".main-sidebar\",\n      Le = \".main-sidebar .sidebar\",\n      De = \".main-footer\",\n      Re = \"sidebar-focused\",\n      Ae = {\n    scrollbarTheme: \"os-theme-light\",\n    scrollbarAutoHide: \"l\",\n    panelAutoHeight: !0,\n    panelAutoHeightMode: \"min-height\",\n    preloadDuration: 200,\n    loginRegisterAutoHeight: !0\n  },\n      Me = function () {\n    function e(e, t) {\n      this._config = t, this._element = e;\n    }\n\n    var t = e.prototype;\n    return t.fixLayoutHeight = function (e) {\n      void 0 === e && (e = null);\n      var t = n[\"default\"](\"body\"),\n          a = 0;\n      (t.hasClass(\"control-sidebar-slide-open\") || t.hasClass(\"control-sidebar-open\") || \"control_sidebar\" === e) && (a = n[\"default\"](\".control-sidebar-content\").outerHeight());\n\n      var i = {\n        window: n[\"default\"](window).height(),\n        header: n[\"default\"](Fe).length > 0 ? n[\"default\"](Fe).outerHeight() : 0,\n        footer: n[\"default\"](De).length > 0 ? n[\"default\"](De).outerHeight() : 0,\n        sidebar: n[\"default\"](Le).length > 0 ? n[\"default\"](Le).height() : 0,\n        controlSidebar: a\n      },\n          o = this._max(i),\n          l = this._config.panelAutoHeight;\n\n      !0 === l && (l = 0);\n      var s = n[\"default\"](\".content-wrapper\");\n      !1 !== l && (o === i.controlSidebar ? s.css(this._config.panelAutoHeightMode, o + l) : o === i.window ? s.css(this._config.panelAutoHeightMode, o + l - i.header - i.footer) : s.css(this._config.panelAutoHeightMode, o + l - i.header), this._isFooterFixed() && s.css(this._config.panelAutoHeightMode, parseFloat(s.css(this._config.panelAutoHeightMode)) + i.footer)), t.hasClass(\"layout-fixed\") && (\"undefined\" != typeof n[\"default\"].fn.overlayScrollbars ? n[\"default\"](Le).overlayScrollbars({\n        className: this._config.scrollbarTheme,\n        sizeAutoCapable: !0,\n        scrollbars: {\n          autoHide: this._config.scrollbarAutoHide,\n          clickScrolling: !0\n        }\n      }) : n[\"default\"](Le).css(\"overflow-y\", \"auto\"));\n    }, t.fixLoginRegisterHeight = function () {\n      var e = n[\"default\"](\"body\"),\n          t = n[\"default\"](\".login-box, .register-box\");\n      if (e.hasClass(\"iframe-mode\")) e.css(\"height\", \"100%\"), n[\"default\"](\".wrapper\").css(\"height\", \"100%\"), n[\"default\"](\"html\").css(\"height\", \"100%\");else if (0 === t.length) e.css(\"height\", \"auto\"), n[\"default\"](\"html\").css(\"height\", \"auto\");else {\n        var a = t.height();\n        e.css(this._config.panelAutoHeightMode) !== a && e.css(this._config.panelAutoHeightMode, a);\n      }\n    }, t._init = function () {\n      var e = this;\n      this.fixLayoutHeight(), !0 === this._config.loginRegisterAutoHeight ? this.fixLoginRegisterHeight() : this._config.loginRegisterAutoHeight === parseInt(this._config.loginRegisterAutoHeight, 10) && setInterval(this.fixLoginRegisterHeight, this._config.loginRegisterAutoHeight), n[\"default\"](Le).on(\"collapsed.lte.treeview expanded.lte.treeview\", function () {\n        e.fixLayoutHeight();\n      }), n[\"default\"](Ee).on(\"mouseenter mouseleave\", function () {\n        n[\"default\"](\"body\").hasClass(\"sidebar-collapse\") && e.fixLayoutHeight();\n      }), n[\"default\"]('[data-widget=\"pushmenu\"]').on(\"collapsed.lte.pushmenu shown.lte.pushmenu\", function () {\n        setTimeout(function () {\n          e.fixLayoutHeight();\n        }, 300);\n      }), n[\"default\"]('[data-widget=\"control-sidebar\"]').on(\"collapsed.lte.controlsidebar\", function () {\n        e.fixLayoutHeight();\n      }).on(\"expanded.lte.controlsidebar\", function () {\n        e.fixLayoutHeight(\"control_sidebar\");\n      }), n[\"default\"](window).resize(function () {\n        e.fixLayoutHeight();\n      }), setTimeout(function () {\n        n[\"default\"](\"body.hold-transition\").removeClass(\"hold-transition\");\n      }, 50), setTimeout(function () {\n        var e = n[\"default\"](\".preloader\");\n        e && (e.css(\"height\", 0), setTimeout(function () {\n          e.children().hide();\n        }, 200));\n      }, this._config.preloadDuration);\n    }, t._max = function (e) {\n      var t = 0;\n      return Object.keys(e).forEach(function (a) {\n        e[a] > t && (t = e[a]);\n      }), t;\n    }, t._isFooterFixed = function () {\n      return \"fixed\" === n[\"default\"](De).css(\"position\");\n    }, e._jQueryInterface = function (t) {\n      return void 0 === t && (t = \"\"), this.each(function () {\n        var a = n[\"default\"](this).data(He),\n            i = n[\"default\"].extend({}, Ae, n[\"default\"](this).data());\n        a || (a = new e(n[\"default\"](this), i), n[\"default\"](this).data(He, a)), \"init\" === t || \"\" === t ? a._init() : \"fixLayoutHeight\" !== t && \"fixLoginRegisterHeight\" !== t || a[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"](window).on(\"load\", function () {\n    Me._jQueryInterface.call(n[\"default\"](\"body\"));\n  }), n[\"default\"](Le + \" a\").on(\"focusin\", function () {\n    n[\"default\"](Ee).addClass(Re);\n  }).on(\"focusout\", function () {\n    n[\"default\"](Ee).removeClass(Re);\n  }), n[\"default\"].fn.Layout = Me._jQueryInterface, n[\"default\"].fn.Layout.Constructor = Me, n[\"default\"].fn.Layout.noConflict = function () {\n    return n[\"default\"].fn.Layout = ze, Me._jQueryInterface;\n  };\n\n  var qe = \"PushMenu\",\n      Oe = \"lte.pushmenu\",\n      Ne = \".\" + Oe,\n      Pe = n[\"default\"].fn[qe],\n      Ue = '[data-widget=\"pushmenu\"]',\n      Be = \"body\",\n      $e = \"sidebar-collapse\",\n      Je = \"sidebar-open\",\n      We = \"sidebar-is-opening\",\n      Ve = \"sidebar-closed\",\n      Ge = {\n    autoCollapseSize: 992,\n    enableRemember: !1,\n    noTransitionAfterReload: !0,\n    animationSpeed: 300\n  },\n      Ke = function () {\n    function e(e, t) {\n      this._element = e, this._options = n[\"default\"].extend({}, Ge, t), 0 === n[\"default\"](\"#sidebar-overlay\").length && this._addOverlay(), this._init();\n    }\n\n    var t = e.prototype;\n    return t.expand = function () {\n      var e = n[\"default\"](Be);\n      this._options.autoCollapseSize && n[\"default\"](window).width() <= this._options.autoCollapseSize && e.addClass(Je), e.addClass(We).removeClass(\"sidebar-collapse sidebar-closed\").delay(50).queue(function () {\n        e.removeClass(We), n[\"default\"](this).dequeue();\n      }), this._options.enableRemember && localStorage.setItem(\"remember\" + Ne, Je), n[\"default\"](this._element).trigger(n[\"default\"].Event(\"shown.lte.pushmenu\"));\n    }, t.collapse = function () {\n      var e = this,\n          t = n[\"default\"](Be);\n      this._options.autoCollapseSize && n[\"default\"](window).width() <= this._options.autoCollapseSize && t.removeClass(Je).addClass(Ve), t.addClass($e), this._options.enableRemember && localStorage.setItem(\"remember\" + Ne, $e), n[\"default\"](this._element).trigger(n[\"default\"].Event(\"collapsed.lte.pushmenu\")), setTimeout(function () {\n        n[\"default\"](e._element).trigger(n[\"default\"].Event(\"collapsed-done.lte.pushmenu\"));\n      }, this._options.animationSpeed);\n    }, t.toggle = function () {\n      n[\"default\"](Be).hasClass($e) ? this.expand() : this.collapse();\n    }, t.autoCollapse = function (e) {\n      if (void 0 === e && (e = !1), this._options.autoCollapseSize) {\n        var t = n[\"default\"](Be);\n        n[\"default\"](window).width() <= this._options.autoCollapseSize ? t.hasClass(Je) || this.collapse() : !0 === e && (t.hasClass(Je) ? t.removeClass(Je) : t.hasClass(Ve) && this.expand());\n      }\n    }, t.remember = function () {\n      if (this._options.enableRemember) {\n        var e = n[\"default\"](\"body\");\n        localStorage.getItem(\"remember\" + Ne) === $e ? this._options.noTransitionAfterReload ? e.addClass(\"hold-transition\").addClass($e).delay(50).queue(function () {\n          n[\"default\"](this).removeClass(\"hold-transition\"), n[\"default\"](this).dequeue();\n        }) : e.addClass($e) : this._options.noTransitionAfterReload ? e.addClass(\"hold-transition\").removeClass($e).delay(50).queue(function () {\n          n[\"default\"](this).removeClass(\"hold-transition\"), n[\"default\"](this).dequeue();\n        }) : e.removeClass($e);\n      }\n    }, t._init = function () {\n      var e = this;\n      this.remember(), this.autoCollapse(), n[\"default\"](window).resize(function () {\n        e.autoCollapse(!0);\n      });\n    }, t._addOverlay = function () {\n      var e = this,\n          t = n[\"default\"](\"<div />\", {\n        id: \"sidebar-overlay\"\n      });\n      t.on(\"click\", function () {\n        e.collapse();\n      }), n[\"default\"](\".wrapper\").append(t);\n    }, e._jQueryInterface = function (t) {\n      return this.each(function () {\n        var a = n[\"default\"](this).data(Oe),\n            i = n[\"default\"].extend({}, Ge, n[\"default\"](this).data());\n        a || (a = new e(this, i), n[\"default\"](this).data(Oe, a)), \"string\" == typeof t && /collapse|expand|toggle/.test(t) && a[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"](document).on(\"click\", Ue, function (e) {\n    e.preventDefault();\n    var t = e.currentTarget;\n    \"pushmenu\" !== n[\"default\"](t).data(\"widget\") && (t = n[\"default\"](t).closest(Ue)), Ke._jQueryInterface.call(n[\"default\"](t), \"toggle\");\n  }), n[\"default\"](window).on(\"load\", function () {\n    Ke._jQueryInterface.call(n[\"default\"](Ue));\n  }), n[\"default\"].fn[qe] = Ke._jQueryInterface, n[\"default\"].fn[qe].Constructor = Ke, n[\"default\"].fn[qe].noConflict = function () {\n    return n[\"default\"].fn[qe] = Pe, Ke._jQueryInterface;\n  };\n\n  var Xe = \"SidebarSearch\",\n      Ye = \"lte.sidebar-search\",\n      Ze = n[\"default\"].fn[Xe],\n      et = \"sidebar-search-open\",\n      tt = \"fa-search\",\n      at = \"fa-times\",\n      nt = \"sidebar-search-results\",\n      it = \"list-group\",\n      ot = '[data-widget=\"sidebar-search\"]',\n      lt = ot + \" .form-control\",\n      st = ot + \" .btn\",\n      rt = st + \" i\",\n      dt = \".sidebar-search-results\",\n      ft = \".sidebar-search-results .list-group\",\n      ut = {\n    arrowSign: \"->\",\n    minLength: 3,\n    maxResults: 7,\n    highlightName: !0,\n    highlightPath: !1,\n    highlightClass: \"text-light\",\n    notFoundText: \"No element found!\"\n  },\n      ct = [],\n      ht = function () {\n    function e(e, t) {\n      this.element = e, this.options = n[\"default\"].extend({}, ut, t), this.items = [];\n    }\n\n    var a = e.prototype;\n    return a.init = function () {\n      var e = this;\n      0 !== n[\"default\"](ot).length && (0 === n[\"default\"](ot).next(dt).length && n[\"default\"](ot).after(n[\"default\"](\"<div />\", {\n        \"class\": nt\n      })), 0 === n[\"default\"](dt).children(\".list-group\").length && n[\"default\"](dt).append(n[\"default\"](\"<div />\", {\n        \"class\": it\n      })), this._addNotFound(), n[\"default\"](\".main-sidebar .nav-sidebar\").children().each(function (t, a) {\n        e._parseItem(a);\n      }));\n    }, a.search = function () {\n      var e = this,\n          t = n[\"default\"](lt).val().toLowerCase();\n      if (t.length < this.options.minLength) return n[\"default\"](ft).empty(), this._addNotFound(), void this.close();\n      var a = ct.filter(function (e) {\n        return e.name.toLowerCase().includes(t);\n      }),\n          i = n[\"default\"](a.slice(0, this.options.maxResults));\n      n[\"default\"](ft).empty(), 0 === i.length ? this._addNotFound() : i.each(function (t, a) {\n        n[\"default\"](ft).append(e._renderItem(escape(a.name), encodeURI(a.link), a.path));\n      }), this.open();\n    }, a.open = function () {\n      n[\"default\"](ot).parent().addClass(et), n[\"default\"](rt).removeClass(tt).addClass(at);\n    }, a.close = function () {\n      n[\"default\"](ot).parent().removeClass(et), n[\"default\"](rt).removeClass(at).addClass(tt);\n    }, a.toggle = function () {\n      n[\"default\"](ot).parent().hasClass(et) ? this.close() : this.open();\n    }, a._parseItem = function (e, t) {\n      var a = this;\n\n      if (void 0 === t && (t = []), !n[\"default\"](e).hasClass(\"nav-header\")) {\n        var i = {},\n            o = n[\"default\"](e).clone().find(\"> .nav-link\"),\n            l = n[\"default\"](e).clone().find(\"> .nav-treeview\"),\n            s = o.attr(\"href\"),\n            r = o.find(\"p\").children().remove().end().text();\n        if (i.name = this._trimText(r), i.link = s, i.path = t, 0 === l.length) ct.push(i);else {\n          var d = i.path.concat([i.name]);\n          l.children().each(function (e, t) {\n            a._parseItem(t, d);\n          });\n        }\n      }\n    }, a._trimText = function (e) {\n      return t.trim(e.replace(/(\\r\\n|\\n|\\r)/gm, \" \"));\n    }, a._renderItem = function (e, t, a) {\n      var i = this;\n\n      if (a = a.join(\" \" + this.options.arrowSign + \" \"), e = unescape(e), t = decodeURI(t), this.options.highlightName || this.options.highlightPath) {\n        var o = n[\"default\"](lt).val().toLowerCase(),\n            l = new RegExp(o, \"gi\");\n        this.options.highlightName && (e = e.replace(l, function (e) {\n          return '<strong class=\"' + i.options.highlightClass + '\">' + e + \"</strong>\";\n        })), this.options.highlightPath && (a = a.replace(l, function (e) {\n          return '<strong class=\"' + i.options.highlightClass + '\">' + e + \"</strong>\";\n        }));\n      }\n\n      var s = n[\"default\"](\"<a/>\", {\n        href: decodeURIComponent(t),\n        \"class\": \"list-group-item\"\n      }),\n          r = n[\"default\"](\"<div/>\", {\n        \"class\": \"search-title\"\n      }).html(e),\n          d = n[\"default\"](\"<div/>\", {\n        \"class\": \"search-path\"\n      }).html(a);\n      return s.append(r).append(d), s;\n    }, a._addNotFound = function () {\n      n[\"default\"](ft).append(this._renderItem(this.options.notFoundText, \"#\", []));\n    }, e._jQueryInterface = function (t) {\n      var a = n[\"default\"](this).data(Ye);\n      a || (a = n[\"default\"](this).data());\n      var i = n[\"default\"].extend({}, ut, \"object\" == _typeof(t) ? t : a),\n          o = new e(n[\"default\"](this), i);\n      n[\"default\"](this).data(Ye, \"object\" == _typeof(t) ? t : a), \"string\" == typeof t && /init|toggle|close|open|search/.test(t) ? o[t]() : o.init();\n    }, e;\n  }();\n\n  n[\"default\"](document).on(\"click\", st, function (e) {\n    e.preventDefault(), ht._jQueryInterface.call(n[\"default\"](ot), \"toggle\");\n  }), n[\"default\"](document).on(\"keyup\", lt, function (e) {\n    return 38 == e.keyCode ? (e.preventDefault(), void n[\"default\"](ft).children().last().focus()) : 40 == e.keyCode ? (e.preventDefault(), void n[\"default\"](ft).children().first().focus()) : void setTimeout(function () {\n      ht._jQueryInterface.call(n[\"default\"](ot), \"search\");\n    }, 100);\n  }), n[\"default\"](document).on(\"keydown\", ft, function (e) {\n    var t = n[\"default\"](\":focus\");\n    38 == e.keyCode && (e.preventDefault(), t.is(\":first-child\") ? t.siblings().last().focus() : t.prev().focus()), 40 == e.keyCode && (e.preventDefault(), t.is(\":last-child\") ? t.siblings().first().focus() : t.next().focus());\n  }), n[\"default\"](window).on(\"load\", function () {\n    ht._jQueryInterface.call(n[\"default\"](ot), \"init\");\n  }), n[\"default\"].fn[Xe] = ht._jQueryInterface, n[\"default\"].fn[Xe].Constructor = ht, n[\"default\"].fn[Xe].noConflict = function () {\n    return n[\"default\"].fn[Xe] = Ze, ht._jQueryInterface;\n  };\n\n  var gt = \"NavbarSearch\",\n      pt = \"lte.navbar-search\",\n      mt = n[\"default\"].fn[gt],\n      vt = '[data-widget=\"navbar-search\"]',\n      _t = \".form-control\",\n      bt = \"navbar-search-open\",\n      yt = {\n    resetOnClose: !0,\n    target: \".navbar-search-block\"\n  },\n      Ct = function () {\n    function e(e, t) {\n      this._element = e, this._config = n[\"default\"].extend({}, yt, t);\n    }\n\n    var t = e.prototype;\n    return t.open = function () {\n      n[\"default\"](this._config.target).css(\"display\", \"flex\").hide().fadeIn().addClass(bt), n[\"default\"](this._config.target + \" \" + _t).focus();\n    }, t.close = function () {\n      n[\"default\"](this._config.target).fadeOut().removeClass(bt), this._config.resetOnClose && n[\"default\"](this._config.target + \" \" + _t).val(\"\");\n    }, t.toggle = function () {\n      n[\"default\"](this._config.target).hasClass(bt) ? this.close() : this.open();\n    }, e._jQueryInterface = function (t) {\n      return this.each(function () {\n        var a = n[\"default\"](this).data(pt),\n            i = n[\"default\"].extend({}, yt, n[\"default\"](this).data());\n        if (a || (a = new e(this, i), n[\"default\"](this).data(pt, a)), !/toggle|close|open/.test(t)) throw new Error(\"Undefined method \" + t);\n        a[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"](document).on(\"click\", vt, function (e) {\n    e.preventDefault();\n    var t = n[\"default\"](e.currentTarget);\n    \"navbar-search\" !== t.data(\"widget\") && (t = t.closest(vt)), Ct._jQueryInterface.call(t, \"toggle\");\n  }), n[\"default\"].fn[gt] = Ct._jQueryInterface, n[\"default\"].fn[gt].Constructor = Ct, n[\"default\"].fn[gt].noConflict = function () {\n    return n[\"default\"].fn[gt] = mt, Ct._jQueryInterface;\n  };\n\n  var wt = n[\"default\"].fn.Toasts,\n      xt = \"topRight\",\n      It = \"topLeft\",\n      Tt = \"bottomRight\",\n      St = \"bottomLeft\",\n      jt = {\n    position: xt,\n    fixed: !0,\n    autohide: !1,\n    autoremove: !0,\n    delay: 1e3,\n    fade: !0,\n    icon: null,\n    image: null,\n    imageAlt: null,\n    imageHeight: \"25px\",\n    title: null,\n    subtitle: null,\n    close: !0,\n    body: null,\n    \"class\": null\n  },\n      kt = function () {\n    function e(e, t) {\n      this._config = t, this._prepareContainer(), n[\"default\"](\"body\").trigger(n[\"default\"].Event(\"init.lte.toasts\"));\n    }\n\n    var t = e.prototype;\n    return t.create = function () {\n      var e = n[\"default\"]('<div class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\"/>');\n      e.data(\"autohide\", this._config.autohide), e.data(\"animation\", this._config.fade), this._config[\"class\"] && e.addClass(this._config[\"class\"]), this._config.delay && 500 != this._config.delay && e.data(\"delay\", this._config.delay);\n      var t = n[\"default\"]('<div class=\"toast-header\">');\n\n      if (null != this._config.image) {\n        var a = n[\"default\"](\"<img />\").addClass(\"rounded mr-2\").attr(\"src\", this._config.image).attr(\"alt\", this._config.imageAlt);\n        null != this._config.imageHeight && a.height(this._config.imageHeight).width(\"auto\"), t.append(a);\n      }\n\n      if (null != this._config.icon && t.append(n[\"default\"](\"<i />\").addClass(\"mr-2\").addClass(this._config.icon)), null != this._config.title && t.append(n[\"default\"](\"<strong />\").addClass(\"mr-auto\").html(this._config.title)), null != this._config.subtitle && t.append(n[\"default\"](\"<small />\").html(this._config.subtitle)), 1 == this._config.close) {\n        var i = n[\"default\"]('<button data-dismiss=\"toast\" />').attr(\"type\", \"button\").addClass(\"ml-2 mb-1 close\").attr(\"aria-label\", \"Close\").append('<span aria-hidden=\"true\">&times;</span>');\n        null == this._config.title && i.toggleClass(\"ml-2 ml-auto\"), t.append(i);\n      }\n\n      e.append(t), null != this._config.body && e.append(n[\"default\"]('<div class=\"toast-body\" />').html(this._config.body)), n[\"default\"](this._getContainerId()).prepend(e);\n      var o = n[\"default\"](\"body\");\n      o.trigger(n[\"default\"].Event(\"created.lte.toasts\")), e.toast(\"show\"), this._config.autoremove && e.on(\"hidden.bs.toast\", function () {\n        n[\"default\"](this).delay(200).remove(), o.trigger(n[\"default\"].Event(\"removed.lte.toasts\"));\n      });\n    }, t._getContainerId = function () {\n      return this._config.position == xt ? \"#toastsContainerTopRight\" : this._config.position == It ? \"#toastsContainerTopLeft\" : this._config.position == Tt ? \"#toastsContainerBottomRight\" : this._config.position == St ? \"#toastsContainerBottomLeft\" : void 0;\n    }, t._prepareContainer = function () {\n      if (0 === n[\"default\"](this._getContainerId()).length) {\n        var e = n[\"default\"](\"<div />\").attr(\"id\", this._getContainerId().replace(\"#\", \"\"));\n        this._config.position == xt ? e.addClass(\"toasts-top-right\") : this._config.position == It ? e.addClass(\"toasts-top-left\") : this._config.position == Tt ? e.addClass(\"toasts-bottom-right\") : this._config.position == St && e.addClass(\"toasts-bottom-left\"), n[\"default\"](\"body\").append(e);\n      }\n\n      this._config.fixed ? n[\"default\"](this._getContainerId()).addClass(\"fixed\") : n[\"default\"](this._getContainerId()).removeClass(\"fixed\");\n    }, e._jQueryInterface = function (t, a) {\n      return this.each(function () {\n        var i = n[\"default\"].extend({}, jt, a),\n            o = new e(n[\"default\"](this), i);\n        \"create\" === t && o[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"].fn.Toasts = kt._jQueryInterface, n[\"default\"].fn.Toasts.Constructor = kt, n[\"default\"].fn.Toasts.noConflict = function () {\n    return n[\"default\"].fn.Toasts = wt, kt._jQueryInterface;\n  };\n\n  var Qt = \"TodoList\",\n      Ht = \"lte.todolist\",\n      zt = n[\"default\"].fn[Qt],\n      Ft = \"done\",\n      Et = {\n    onCheck: function onCheck(e) {\n      return e;\n    },\n    onUnCheck: function onUnCheck(e) {\n      return e;\n    }\n  },\n      Lt = function () {\n    function e(e, t) {\n      this._config = t, this._element = e, this._init();\n    }\n\n    var t = e.prototype;\n    return t.toggle = function (e) {\n      e.parents(\"li\").toggleClass(Ft), n[\"default\"](e).prop(\"checked\") ? this.check(e) : this.unCheck(n[\"default\"](e));\n    }, t.check = function (e) {\n      this._config.onCheck.call(e);\n    }, t.unCheck = function (e) {\n      this._config.onUnCheck.call(e);\n    }, t._init = function () {\n      var e = this,\n          t = this._element;\n      t.find(\"input:checkbox:checked\").parents(\"li\").toggleClass(Ft), t.on(\"change\", \"input:checkbox\", function (t) {\n        e.toggle(n[\"default\"](t.target));\n      });\n    }, e._jQueryInterface = function (t) {\n      return this.each(function () {\n        var a = n[\"default\"](this).data(Ht);\n        a || (a = n[\"default\"](this).data());\n        var i = n[\"default\"].extend({}, Et, \"object\" == _typeof(t) ? t : a),\n            o = new e(n[\"default\"](this), i);\n        n[\"default\"](this).data(Ht, \"object\" == _typeof(t) ? t : a), \"init\" === t && o[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"](window).on(\"load\", function () {\n    Lt._jQueryInterface.call(n[\"default\"]('[data-widget=\"todo-list\"]'));\n  }), n[\"default\"].fn[Qt] = Lt._jQueryInterface, n[\"default\"].fn[Qt].Constructor = Lt, n[\"default\"].fn[Qt].noConflict = function () {\n    return n[\"default\"].fn[Qt] = zt, Lt._jQueryInterface;\n  };\n\n  var Dt = \"Treeview\",\n      Rt = \"lte.treeview\",\n      At = n[\"default\"].fn[Dt],\n      Mt = \".nav-item\",\n      qt = \".nav-treeview\",\n      Ot = \".menu-open\",\n      Nt = '[data-widget=\"treeview\"]',\n      Pt = \"menu-open\",\n      Ut = \"menu-is-opening\",\n      Bt = {\n    trigger: Nt + \" .nav-link\",\n    animationSpeed: 300,\n    accordion: !0,\n    expandSidebar: !1,\n    sidebarButtonSelector: '[data-widget=\"pushmenu\"]'\n  },\n      $t = function () {\n    function e(e, t) {\n      this._config = t, this._element = e;\n    }\n\n    var t = e.prototype;\n    return t.init = function () {\n      n[\"default\"](\".nav-item.menu-open .nav-treeview.menu-open\").css(\"display\", \"block\"), this._setupListeners();\n    }, t.expand = function (e, t) {\n      var a = this,\n          i = n[\"default\"].Event(\"expanded.lte.treeview\");\n\n      if (this._config.accordion) {\n        var o = t.siblings(Ot).first(),\n            l = o.find(qt).first();\n        this.collapse(l, o);\n      }\n\n      t.addClass(Ut), e.stop().slideDown(this._config.animationSpeed, function () {\n        t.addClass(Pt), n[\"default\"](a._element).trigger(i);\n      }), this._config.expandSidebar && this._expandSidebar();\n    }, t.collapse = function (e, t) {\n      var a = this,\n          i = n[\"default\"].Event(\"collapsed.lte.treeview\");\n      t.removeClass(\"menu-is-opening menu-open\"), e.stop().slideUp(this._config.animationSpeed, function () {\n        n[\"default\"](a._element).trigger(i), e.find(\".menu-open > .nav-treeview\").slideUp(), e.find(Ot).removeClass(\"menu-is-opening menu-open\");\n      });\n    }, t.toggle = function (e) {\n      var t = n[\"default\"](e.currentTarget),\n          a = t.parent(),\n          i = a.find(\"> .nav-treeview\");\n\n      if (i.is(qt) || (a.is(Mt) || (i = a.parent().find(\"> .nav-treeview\")), i.is(qt))) {\n        e.preventDefault();\n        var o = t.parents(Mt).first();\n        o.hasClass(Pt) ? this.collapse(n[\"default\"](i), o) : this.expand(n[\"default\"](i), o);\n      }\n    }, t._setupListeners = function () {\n      var e = this,\n          t = void 0 !== this._element.attr(\"id\") ? \"#\" + this._element.attr(\"id\") : \"\";\n      n[\"default\"](document).on(\"click\", \"\" + t + this._config.trigger, function (t) {\n        e.toggle(t);\n      });\n    }, t._expandSidebar = function () {\n      n[\"default\"](\"body\").hasClass(\"sidebar-collapse\") && n[\"default\"](this._config.sidebarButtonSelector).PushMenu(\"expand\");\n    }, e._jQueryInterface = function (t) {\n      return this.each(function () {\n        var a = n[\"default\"](this).data(Rt),\n            i = n[\"default\"].extend({}, Bt, n[\"default\"](this).data());\n        a || (a = new e(n[\"default\"](this), i), n[\"default\"](this).data(Rt, a)), \"init\" === t && a[t]();\n      });\n    }, e;\n  }();\n\n  n[\"default\"](window).on(\"load.lte.treeview\", function () {\n    n[\"default\"](Nt).each(function () {\n      $t._jQueryInterface.call(n[\"default\"](this), \"init\");\n    });\n  }), n[\"default\"].fn[Dt] = $t._jQueryInterface, n[\"default\"].fn[Dt].Constructor = $t, n[\"default\"].fn[Dt].noConflict = function () {\n    return n[\"default\"].fn[Dt] = At, $t._jQueryInterface;\n  }, e.CardRefresh = f, e.CardWidget = I, e.ControlSidebar = M, e.DirectChat = P, e.Dropdown = V, e.ExpandableTable = te, e.Fullscreen = re, e.IFrame = Qe, e.Layout = Me, e.NavbarSearch = Ct, e.PushMenu = Ke, e.SidebarSearch = ht, e.Toasts = kt, e.TodoList = Lt, e.Treeview = $t, Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/dist/js/adminlte.min.js\n");

/***/ }),

/***/ "./public/js/jquery-ui.js":
/*!********************************!*\
  !*** ./public/js/jquery-ui.js ***!
  \********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj){\"@babel/helpers - typeof\";return _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&\"function\"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;},_typeof(obj);}/*! jQuery UI - v1.13.1 - 2022-01-20\r\n* http://jqueryui.com\r\n* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-patch.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js\r\n* Copyright jQuery Foundation and other contributors; Licensed MIT */(function(factory){\"use strict\";if(true){// AMD. Register as an anonymous module.\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else{}})(function($){\"use strict\";$.ui=$.ui||{};var version=$.ui.version=\"1.13.1\";/*!\r\n * jQuery UI Widget 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Widget\n//>>group: Core\n//>>description: Provides a factory for creating stateful widgets with a common API.\n//>>docs: http://api.jqueryui.com/jQuery.widget/\n//>>demos: http://jqueryui.com/widget/\nvar widgetUuid=0;var widgetHasOwnProperty=Array.prototype.hasOwnProperty;var widgetSlice=Array.prototype.slice;$.cleanData=function(orig){return function(elems){var events,elem,i;for(i=0;(elem=elems[i])!=null;i++){// Only trigger remove when necessary to save time\nevents=$._data(elem,\"events\");if(events&&events.remove){$(elem).triggerHandler(\"remove\");}}orig(elems);};}($.cleanData);$.widget=function(name,base,prototype){var existingConstructor,constructor,basePrototype;// ProxiedPrototype allows the provided prototype to remain unmodified\n// so that it can be used as a mixin for multiple widgets (#8876)\nvar proxiedPrototype={};var namespace=name.split(\".\")[0];name=name.split(\".\")[1];var fullName=namespace+\"-\"+name;if(!prototype){prototype=base;base=$.Widget;}if(Array.isArray(prototype)){prototype=$.extend.apply(null,[{}].concat(prototype));}// Create selector for plugin\n$.expr.pseudos[fullName.toLowerCase()]=function(elem){return!!$.data(elem,fullName);};$[namespace]=$[namespace]||{};existingConstructor=$[namespace][name];constructor=$[namespace][name]=function(options,element){// Allow instantiation without \"new\" keyword\nif(!this||!this._createWidget){return new constructor(options,element);}// Allow instantiation without initializing for simple inheritance\n// must use \"new\" keyword (the code above always passes args)\nif(arguments.length){this._createWidget(options,element);}};// Extend with the existing constructor to carry over any static properties\n$.extend(constructor,existingConstructor,{version:prototype.version,// Copy the object used to create the prototype in case we need to\n// redefine the widget later\n_proto:$.extend({},prototype),// Track widgets that inherit from this widget in case this widget is\n// redefined after a widget inherits from it\n_childConstructors:[]});basePrototype=new base();// We need to make the options hash a property directly on the new instance\n// otherwise we'll modify the options hash on the prototype that we're\n// inheriting from\nbasePrototype.options=$.widget.extend({},basePrototype.options);$.each(prototype,function(prop,value){if(typeof value!==\"function\"){proxiedPrototype[prop]=value;return;}proxiedPrototype[prop]=function(){function _super(){return base.prototype[prop].apply(this,arguments);}function _superApply(args){return base.prototype[prop].apply(this,args);}return function(){var __super=this._super;var __superApply=this._superApply;var returnValue;this._super=_super;this._superApply=_superApply;returnValue=value.apply(this,arguments);this._super=__super;this._superApply=__superApply;return returnValue;};}();});constructor.prototype=$.widget.extend(basePrototype,{// TODO: remove support for widgetEventPrefix\n// always use the name + a colon as the prefix, e.g., draggable:start\n// don't prefix for widgets that aren't DOM-based\nwidgetEventPrefix:existingConstructor?basePrototype.widgetEventPrefix||name:name},proxiedPrototype,{constructor:constructor,namespace:namespace,widgetName:name,widgetFullName:fullName});// If this widget is being redefined then we need to find all widgets that\n// are inheriting from it and redefine all of them so that they inherit from\n// the new version of this widget. We're essentially trying to replace one\n// level in the prototype chain.\nif(existingConstructor){$.each(existingConstructor._childConstructors,function(i,child){var childPrototype=child.prototype;// Redefine the child widget using the same prototype that was\n// originally used, but inherit from the new version of the base\n$.widget(childPrototype.namespace+\".\"+childPrototype.widgetName,constructor,child._proto);});// Remove the list of existing child constructors from the old constructor\n// so the old child constructors can be garbage collected\ndelete existingConstructor._childConstructors;}else{base._childConstructors.push(constructor);}$.widget.bridge(name,constructor);return constructor;};$.widget.extend=function(target){var input=widgetSlice.call(arguments,1);var inputIndex=0;var inputLength=input.length;var key;var value;for(;inputIndex<inputLength;inputIndex++){for(key in input[inputIndex]){value=input[inputIndex][key];if(widgetHasOwnProperty.call(input[inputIndex],key)&&value!==undefined){// Clone objects\nif($.isPlainObject(value)){target[key]=$.isPlainObject(target[key])?$.widget.extend({},target[key],value):// Don't extend strings, arrays, etc. with objects\n$.widget.extend({},value);// Copy everything else by reference\n}else{target[key]=value;}}}}return target;};$.widget.bridge=function(name,object){var fullName=object.prototype.widgetFullName||name;$.fn[name]=function(options){var isMethodCall=typeof options===\"string\";var args=widgetSlice.call(arguments,1);var returnValue=this;if(isMethodCall){// If this is an empty collection, we need to have the instance method\n// return undefined instead of the jQuery instance\nif(!this.length&&options===\"instance\"){returnValue=undefined;}else{this.each(function(){var methodValue;var instance=$.data(this,fullName);if(options===\"instance\"){returnValue=instance;return false;}if(!instance){return $.error(\"cannot call methods on \"+name+\" prior to initialization; \"+\"attempted to call method '\"+options+\"'\");}if(typeof instance[options]!==\"function\"||options.charAt(0)===\"_\"){return $.error(\"no such method '\"+options+\"' for \"+name+\" widget instance\");}methodValue=instance[options].apply(instance,args);if(methodValue!==instance&&methodValue!==undefined){returnValue=methodValue&&methodValue.jquery?returnValue.pushStack(methodValue.get()):methodValue;return false;}});}}else{// Allow multiple hashes to be passed on init\nif(args.length){options=$.widget.extend.apply(null,[options].concat(args));}this.each(function(){var instance=$.data(this,fullName);if(instance){instance.option(options||{});if(instance._init){instance._init();}}else{$.data(this,fullName,new object(options,this));}});}return returnValue;};};$.Widget=function/* options, element */(){};$.Widget._childConstructors=[];$.Widget.prototype={widgetName:\"widget\",widgetEventPrefix:\"\",defaultElement:\"<div>\",options:{classes:{},disabled:false,// Callbacks\ncreate:null},_createWidget:function _createWidget(options,element){element=$(element||this.defaultElement||this)[0];this.element=$(element);this.uuid=widgetUuid++;this.eventNamespace=\".\"+this.widgetName+this.uuid;this.bindings=$();this.hoverable=$();this.focusable=$();this.classesElementLookup={};if(element!==this){$.data(element,this.widgetFullName,this);this._on(true,this.element,{remove:function remove(event){if(event.target===element){this.destroy();}}});this.document=$(element.style?// Element within the document\nelement.ownerDocument:// Element is window or document\nelement.document||element);this.window=$(this.document[0].defaultView||this.document[0].parentWindow);}this.options=$.widget.extend({},this.options,this._getCreateOptions(),options);this._create();if(this.options.disabled){this._setOptionDisabled(this.options.disabled);}this._trigger(\"create\",null,this._getCreateEventData());this._init();},_getCreateOptions:function _getCreateOptions(){return{};},_getCreateEventData:$.noop,_create:$.noop,_init:$.noop,destroy:function destroy(){var that=this;this._destroy();$.each(this.classesElementLookup,function(key,value){that._removeClass(value,key);});// We can probably remove the unbind calls in 2.0\n// all event bindings should go through this._on()\nthis.element.off(this.eventNamespace).removeData(this.widgetFullName);this.widget().off(this.eventNamespace).removeAttr(\"aria-disabled\");// Clean up events and states\nthis.bindings.off(this.eventNamespace);},_destroy:$.noop,widget:function widget(){return this.element;},option:function option(key,value){var options=key;var parts;var curOption;var i;if(arguments.length===0){// Don't return a reference to the internal hash\nreturn $.widget.extend({},this.options);}if(typeof key===\"string\"){// Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\noptions={};parts=key.split(\".\");key=parts.shift();if(parts.length){curOption=options[key]=$.widget.extend({},this.options[key]);for(i=0;i<parts.length-1;i++){curOption[parts[i]]=curOption[parts[i]]||{};curOption=curOption[parts[i]];}key=parts.pop();if(arguments.length===1){return curOption[key]===undefined?null:curOption[key];}curOption[key]=value;}else{if(arguments.length===1){return this.options[key]===undefined?null:this.options[key];}options[key]=value;}}this._setOptions(options);return this;},_setOptions:function _setOptions(options){var key;for(key in options){this._setOption(key,options[key]);}return this;},_setOption:function _setOption(key,value){if(key===\"classes\"){this._setOptionClasses(value);}this.options[key]=value;if(key===\"disabled\"){this._setOptionDisabled(value);}return this;},_setOptionClasses:function _setOptionClasses(value){var classKey,elements,currentElements;for(classKey in value){currentElements=this.classesElementLookup[classKey];if(value[classKey]===this.options.classes[classKey]||!currentElements||!currentElements.length){continue;}// We are doing this to create a new jQuery object because the _removeClass() call\n// on the next line is going to destroy the reference to the current elements being\n// tracked. We need to save a copy of this collection so that we can add the new classes\n// below.\nelements=$(currentElements.get());this._removeClass(currentElements,classKey);// We don't use _addClass() here, because that uses this.options.classes\n// for generating the string of classes. We want to use the value passed in from\n// _setOption(), this is the new value of the classes option which was passed to\n// _setOption(). We pass this value directly to _classes().\nelements.addClass(this._classes({element:elements,keys:classKey,classes:value,add:true}));}},_setOptionDisabled:function _setOptionDisabled(value){this._toggleClass(this.widget(),this.widgetFullName+\"-disabled\",null,!!value);// If the widget is becoming disabled, then nothing is interactive\nif(value){this._removeClass(this.hoverable,null,\"ui-state-hover\");this._removeClass(this.focusable,null,\"ui-state-focus\");}},enable:function enable(){return this._setOptions({disabled:false});},disable:function disable(){return this._setOptions({disabled:true});},_classes:function _classes(options){var full=[];var that=this;options=$.extend({element:this.element,classes:this.options.classes||{}},options);function bindRemoveEvent(){var nodesToBind=[];options.element.each(function(_,element){var isTracked=$.map(that.classesElementLookup,function(elements){return elements;}).some(function(elements){return elements.is(element);});if(!isTracked){nodesToBind.push(element);}});that._on($(nodesToBind),{remove:\"_untrackClassesElement\"});}function processClassString(classes,checkOption){var current,i;for(i=0;i<classes.length;i++){current=that.classesElementLookup[classes[i]]||$();if(options.add){bindRemoveEvent();current=$($.uniqueSort(current.get().concat(options.element.get())));}else{current=$(current.not(options.element).get());}that.classesElementLookup[classes[i]]=current;full.push(classes[i]);if(checkOption&&options.classes[classes[i]]){full.push(options.classes[classes[i]]);}}}if(options.keys){processClassString(options.keys.match(/\\S+/g)||[],true);}if(options.extra){processClassString(options.extra.match(/\\S+/g)||[]);}return full.join(\" \");},_untrackClassesElement:function _untrackClassesElement(event){var that=this;$.each(that.classesElementLookup,function(key,value){if($.inArray(event.target,value)!==-1){that.classesElementLookup[key]=$(value.not(event.target).get());}});this._off($(event.target));},_removeClass:function _removeClass(element,keys,extra){return this._toggleClass(element,keys,extra,false);},_addClass:function _addClass(element,keys,extra){return this._toggleClass(element,keys,extra,true);},_toggleClass:function _toggleClass(element,keys,extra,add){add=typeof add===\"boolean\"?add:extra;var shift=typeof element===\"string\"||element===null,options={extra:shift?keys:extra,keys:shift?element:keys,element:shift?this.element:element,add:add};options.element.toggleClass(this._classes(options),add);return this;},_on:function _on(suppressDisabledCheck,element,handlers){var delegateElement;var instance=this;// No suppressDisabledCheck flag, shuffle arguments\nif(typeof suppressDisabledCheck!==\"boolean\"){handlers=element;element=suppressDisabledCheck;suppressDisabledCheck=false;}// No element argument, shuffle and use this.element\nif(!handlers){handlers=element;element=this.element;delegateElement=this.widget();}else{element=delegateElement=$(element);this.bindings=this.bindings.add(element);}$.each(handlers,function(event,handler){function handlerProxy(){// Allow widgets to customize the disabled handling\n// - disabled as an array instead of boolean\n// - disabled class as method for disabling individual parts\nif(!suppressDisabledCheck&&(instance.options.disabled===true||$(this).hasClass(\"ui-state-disabled\"))){return;}return(typeof handler===\"string\"?instance[handler]:handler).apply(instance,arguments);}// Copy the guid so direct unbinding works\nif(typeof handler!==\"string\"){handlerProxy.guid=handler.guid=handler.guid||handlerProxy.guid||$.guid++;}var match=event.match(/^([\\w:-]*)\\s*(.*)$/);var eventName=match[1]+instance.eventNamespace;var selector=match[2];if(selector){delegateElement.on(eventName,selector,handlerProxy);}else{element.on(eventName,handlerProxy);}});},_off:function _off(element,eventName){eventName=(eventName||\"\").split(\" \").join(this.eventNamespace+\" \")+this.eventNamespace;element.off(eventName);// Clear the stack to avoid memory leaks (#10056)\nthis.bindings=$(this.bindings.not(element).get());this.focusable=$(this.focusable.not(element).get());this.hoverable=$(this.hoverable.not(element).get());},_delay:function _delay(handler,delay){function handlerProxy(){return(typeof handler===\"string\"?instance[handler]:handler).apply(instance,arguments);}var instance=this;return setTimeout(handlerProxy,delay||0);},_hoverable:function _hoverable(element){this.hoverable=this.hoverable.add(element);this._on(element,{mouseenter:function mouseenter(event){this._addClass($(event.currentTarget),null,\"ui-state-hover\");},mouseleave:function mouseleave(event){this._removeClass($(event.currentTarget),null,\"ui-state-hover\");}});},_focusable:function _focusable(element){this.focusable=this.focusable.add(element);this._on(element,{focusin:function focusin(event){this._addClass($(event.currentTarget),null,\"ui-state-focus\");},focusout:function focusout(event){this._removeClass($(event.currentTarget),null,\"ui-state-focus\");}});},_trigger:function _trigger(type,event,data){var prop,orig;var callback=this.options[type];data=data||{};event=$.Event(event);event.type=(type===this.widgetEventPrefix?type:this.widgetEventPrefix+type).toLowerCase();// The original event may come from any element\n// so we need to reset the target on the new event\nevent.target=this.element[0];// Copy original event properties over to the new event\norig=event.originalEvent;if(orig){for(prop in orig){if(!(prop in event)){event[prop]=orig[prop];}}}this.element.trigger(event,data);return!(typeof callback===\"function\"&&callback.apply(this.element[0],[event].concat(data))===false||event.isDefaultPrevented());}};$.each({show:\"fadeIn\",hide:\"fadeOut\"},function(method,defaultEffect){$.Widget.prototype[\"_\"+method]=function(element,options,callback){if(typeof options===\"string\"){options={effect:options};}var hasOptions;var effectName=!options?method:options===true||typeof options===\"number\"?defaultEffect:options.effect||defaultEffect;options=options||{};if(typeof options===\"number\"){options={duration:options};}else if(options===true){options={};}hasOptions=!$.isEmptyObject(options);options.complete=callback;if(options.delay){element.delay(options.delay);}if(hasOptions&&$.effects&&$.effects.effect[effectName]){element[method](options);}else if(effectName!==method&&element[effectName]){element[effectName](options.duration,options.easing,callback);}else{element.queue(function(next){$(this)[method]();if(callback){callback.call(element[0]);}next();});}};});var widget=$.widget;/*!\r\n * jQuery UI Position 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/position/\r\n */ //>>label: Position\n//>>group: Core\n//>>description: Positions elements relative to other elements.\n//>>docs: http://api.jqueryui.com/position/\n//>>demos: http://jqueryui.com/position/\n(function(){var cachedScrollbarWidth,max=Math.max,abs=Math.abs,rhorizontal=/left|center|right/,rvertical=/top|center|bottom/,roffset=/[\\+\\-]\\d+(\\.[\\d]+)?%?/,rposition=/^\\w+/,rpercent=/%$/,_position=$.fn.position;function getOffsets(offsets,width,height){return[parseFloat(offsets[0])*(rpercent.test(offsets[0])?width/100:1),parseFloat(offsets[1])*(rpercent.test(offsets[1])?height/100:1)];}function parseCss(element,property){return parseInt($.css(element,property),10)||0;}function isWindow(obj){return obj!=null&&obj===obj.window;}function getDimensions(elem){var raw=elem[0];if(raw.nodeType===9){return{width:elem.width(),height:elem.height(),offset:{top:0,left:0}};}if(isWindow(raw)){return{width:elem.width(),height:elem.height(),offset:{top:elem.scrollTop(),left:elem.scrollLeft()}};}if(raw.preventDefault){return{width:0,height:0,offset:{top:raw.pageY,left:raw.pageX}};}return{width:elem.outerWidth(),height:elem.outerHeight(),offset:elem.offset()};}$.position={scrollbarWidth:function scrollbarWidth(){if(cachedScrollbarWidth!==undefined){return cachedScrollbarWidth;}var w1,w2,div=$(\"<div style=\"+\"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>\"+\"<div style='height:300px;width:auto;'></div></div>\"),innerDiv=div.children()[0];$(\"body\").append(div);w1=innerDiv.offsetWidth;div.css(\"overflow\",\"scroll\");w2=innerDiv.offsetWidth;if(w1===w2){w2=div[0].clientWidth;}div.remove();return cachedScrollbarWidth=w1-w2;},getScrollInfo:function getScrollInfo(within){var overflowX=within.isWindow||within.isDocument?\"\":within.element.css(\"overflow-x\"),overflowY=within.isWindow||within.isDocument?\"\":within.element.css(\"overflow-y\"),hasOverflowX=overflowX===\"scroll\"||overflowX===\"auto\"&&within.width<within.element[0].scrollWidth,hasOverflowY=overflowY===\"scroll\"||overflowY===\"auto\"&&within.height<within.element[0].scrollHeight;return{width:hasOverflowY?$.position.scrollbarWidth():0,height:hasOverflowX?$.position.scrollbarWidth():0};},getWithinInfo:function getWithinInfo(element){var withinElement=$(element||window),isElemWindow=isWindow(withinElement[0]),isDocument=!!withinElement[0]&&withinElement[0].nodeType===9,hasOffset=!isElemWindow&&!isDocument;return{element:withinElement,isWindow:isElemWindow,isDocument:isDocument,offset:hasOffset?$(element).offset():{left:0,top:0},scrollLeft:withinElement.scrollLeft(),scrollTop:withinElement.scrollTop(),width:withinElement.outerWidth(),height:withinElement.outerHeight()};}};$.fn.position=function(options){if(!options||!options.of){return _position.apply(this,arguments);}// Make a copy, we don't want to modify arguments\noptions=$.extend({},options);var atOffset,targetWidth,targetHeight,targetOffset,basePosition,dimensions,// Make sure string options are treated as CSS selectors\ntarget=typeof options.of===\"string\"?$(document).find(options.of):$(options.of),within=$.position.getWithinInfo(options.within),scrollInfo=$.position.getScrollInfo(within),collision=(options.collision||\"flip\").split(\" \"),offsets={};dimensions=getDimensions(target);if(target[0].preventDefault){// Force left top to allow flipping\noptions.at=\"left top\";}targetWidth=dimensions.width;targetHeight=dimensions.height;targetOffset=dimensions.offset;// Clone to reuse original targetOffset later\nbasePosition=$.extend({},targetOffset);// Force my and at to have valid horizontal and vertical positions\n// if a value is missing or invalid, it will be converted to center\n$.each([\"my\",\"at\"],function(){var pos=(options[this]||\"\").split(\" \"),horizontalOffset,verticalOffset;if(pos.length===1){pos=rhorizontal.test(pos[0])?pos.concat([\"center\"]):rvertical.test(pos[0])?[\"center\"].concat(pos):[\"center\",\"center\"];}pos[0]=rhorizontal.test(pos[0])?pos[0]:\"center\";pos[1]=rvertical.test(pos[1])?pos[1]:\"center\";// Calculate offsets\nhorizontalOffset=roffset.exec(pos[0]);verticalOffset=roffset.exec(pos[1]);offsets[this]=[horizontalOffset?horizontalOffset[0]:0,verticalOffset?verticalOffset[0]:0];// Reduce to just the positions without the offsets\noptions[this]=[rposition.exec(pos[0])[0],rposition.exec(pos[1])[0]];});// Normalize collision option\nif(collision.length===1){collision[1]=collision[0];}if(options.at[0]===\"right\"){basePosition.left+=targetWidth;}else if(options.at[0]===\"center\"){basePosition.left+=targetWidth/2;}if(options.at[1]===\"bottom\"){basePosition.top+=targetHeight;}else if(options.at[1]===\"center\"){basePosition.top+=targetHeight/2;}atOffset=getOffsets(offsets.at,targetWidth,targetHeight);basePosition.left+=atOffset[0];basePosition.top+=atOffset[1];return this.each(function(){var collisionPosition,using,elem=$(this),elemWidth=elem.outerWidth(),elemHeight=elem.outerHeight(),marginLeft=parseCss(this,\"marginLeft\"),marginTop=parseCss(this,\"marginTop\"),collisionWidth=elemWidth+marginLeft+parseCss(this,\"marginRight\")+scrollInfo.width,collisionHeight=elemHeight+marginTop+parseCss(this,\"marginBottom\")+scrollInfo.height,position=$.extend({},basePosition),myOffset=getOffsets(offsets.my,elem.outerWidth(),elem.outerHeight());if(options.my[0]===\"right\"){position.left-=elemWidth;}else if(options.my[0]===\"center\"){position.left-=elemWidth/2;}if(options.my[1]===\"bottom\"){position.top-=elemHeight;}else if(options.my[1]===\"center\"){position.top-=elemHeight/2;}position.left+=myOffset[0];position.top+=myOffset[1];collisionPosition={marginLeft:marginLeft,marginTop:marginTop};$.each([\"left\",\"top\"],function(i,dir){if($.ui.position[collision[i]]){$.ui.position[collision[i]][dir](position,{targetWidth:targetWidth,targetHeight:targetHeight,elemWidth:elemWidth,elemHeight:elemHeight,collisionPosition:collisionPosition,collisionWidth:collisionWidth,collisionHeight:collisionHeight,offset:[atOffset[0]+myOffset[0],atOffset[1]+myOffset[1]],my:options.my,at:options.at,within:within,elem:elem});}});if(options.using){// Adds feedback as second argument to using callback, if present\nusing=function using(props){var left=targetOffset.left-position.left,right=left+targetWidth-elemWidth,top=targetOffset.top-position.top,bottom=top+targetHeight-elemHeight,feedback={target:{element:target,left:targetOffset.left,top:targetOffset.top,width:targetWidth,height:targetHeight},element:{element:elem,left:position.left,top:position.top,width:elemWidth,height:elemHeight},horizontal:right<0?\"left\":left>0?\"right\":\"center\",vertical:bottom<0?\"top\":top>0?\"bottom\":\"middle\"};if(targetWidth<elemWidth&&abs(left+right)<targetWidth){feedback.horizontal=\"center\";}if(targetHeight<elemHeight&&abs(top+bottom)<targetHeight){feedback.vertical=\"middle\";}if(max(abs(left),abs(right))>max(abs(top),abs(bottom))){feedback.important=\"horizontal\";}else{feedback.important=\"vertical\";}options.using.call(this,props,feedback);};}elem.offset($.extend(position,{using:using}));});};$.ui.position={fit:{left:function left(position,data){var within=data.within,withinOffset=within.isWindow?within.scrollLeft:within.offset.left,outerWidth=within.width,collisionPosLeft=position.left-data.collisionPosition.marginLeft,overLeft=withinOffset-collisionPosLeft,overRight=collisionPosLeft+data.collisionWidth-outerWidth-withinOffset,newOverRight;// Element is wider than within\nif(data.collisionWidth>outerWidth){// Element is initially over the left side of within\nif(overLeft>0&&overRight<=0){newOverRight=position.left+overLeft+data.collisionWidth-outerWidth-withinOffset;position.left+=overLeft-newOverRight;// Element is initially over right side of within\n}else if(overRight>0&&overLeft<=0){position.left=withinOffset;// Element is initially over both left and right sides of within\n}else{if(overLeft>overRight){position.left=withinOffset+outerWidth-data.collisionWidth;}else{position.left=withinOffset;}}// Too far left -> align with left edge\n}else if(overLeft>0){position.left+=overLeft;// Too far right -> align with right edge\n}else if(overRight>0){position.left-=overRight;// Adjust based on position and margin\n}else{position.left=max(position.left-collisionPosLeft,position.left);}},top:function top(position,data){var within=data.within,withinOffset=within.isWindow?within.scrollTop:within.offset.top,outerHeight=data.within.height,collisionPosTop=position.top-data.collisionPosition.marginTop,overTop=withinOffset-collisionPosTop,overBottom=collisionPosTop+data.collisionHeight-outerHeight-withinOffset,newOverBottom;// Element is taller than within\nif(data.collisionHeight>outerHeight){// Element is initially over the top of within\nif(overTop>0&&overBottom<=0){newOverBottom=position.top+overTop+data.collisionHeight-outerHeight-withinOffset;position.top+=overTop-newOverBottom;// Element is initially over bottom of within\n}else if(overBottom>0&&overTop<=0){position.top=withinOffset;// Element is initially over both top and bottom of within\n}else{if(overTop>overBottom){position.top=withinOffset+outerHeight-data.collisionHeight;}else{position.top=withinOffset;}}// Too far up -> align with top\n}else if(overTop>0){position.top+=overTop;// Too far down -> align with bottom edge\n}else if(overBottom>0){position.top-=overBottom;// Adjust based on position and margin\n}else{position.top=max(position.top-collisionPosTop,position.top);}}},flip:{left:function left(position,data){var within=data.within,withinOffset=within.offset.left+within.scrollLeft,outerWidth=within.width,offsetLeft=within.isWindow?within.scrollLeft:within.offset.left,collisionPosLeft=position.left-data.collisionPosition.marginLeft,overLeft=collisionPosLeft-offsetLeft,overRight=collisionPosLeft+data.collisionWidth-outerWidth-offsetLeft,myOffset=data.my[0]===\"left\"?-data.elemWidth:data.my[0]===\"right\"?data.elemWidth:0,atOffset=data.at[0]===\"left\"?data.targetWidth:data.at[0]===\"right\"?-data.targetWidth:0,offset=-2*data.offset[0],newOverRight,newOverLeft;if(overLeft<0){newOverRight=position.left+myOffset+atOffset+offset+data.collisionWidth-outerWidth-withinOffset;if(newOverRight<0||newOverRight<abs(overLeft)){position.left+=myOffset+atOffset+offset;}}else if(overRight>0){newOverLeft=position.left-data.collisionPosition.marginLeft+myOffset+atOffset+offset-offsetLeft;if(newOverLeft>0||abs(newOverLeft)<overRight){position.left+=myOffset+atOffset+offset;}}},top:function top(position,data){var within=data.within,withinOffset=within.offset.top+within.scrollTop,outerHeight=within.height,offsetTop=within.isWindow?within.scrollTop:within.offset.top,collisionPosTop=position.top-data.collisionPosition.marginTop,overTop=collisionPosTop-offsetTop,overBottom=collisionPosTop+data.collisionHeight-outerHeight-offsetTop,top=data.my[1]===\"top\",myOffset=top?-data.elemHeight:data.my[1]===\"bottom\"?data.elemHeight:0,atOffset=data.at[1]===\"top\"?data.targetHeight:data.at[1]===\"bottom\"?-data.targetHeight:0,offset=-2*data.offset[1],newOverTop,newOverBottom;if(overTop<0){newOverBottom=position.top+myOffset+atOffset+offset+data.collisionHeight-outerHeight-withinOffset;if(newOverBottom<0||newOverBottom<abs(overTop)){position.top+=myOffset+atOffset+offset;}}else if(overBottom>0){newOverTop=position.top-data.collisionPosition.marginTop+myOffset+atOffset+offset-offsetTop;if(newOverTop>0||abs(newOverTop)<overBottom){position.top+=myOffset+atOffset+offset;}}}},flipfit:{left:function left(){$.ui.position.flip.left.apply(this,arguments);$.ui.position.fit.left.apply(this,arguments);},top:function top(){$.ui.position.flip.top.apply(this,arguments);$.ui.position.fit.top.apply(this,arguments);}}};})();var position=$.ui.position;/*!\r\n * jQuery UI :data 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: :data Selector\n//>>group: Core\n//>>description: Selects elements which have data stored under the specified key.\n//>>docs: http://api.jqueryui.com/data-selector/\nvar data=$.extend($.expr.pseudos,{data:$.expr.createPseudo?$.expr.createPseudo(function(dataName){return function(elem){return!!$.data(elem,dataName);};}):// Support: jQuery <1.8\nfunction(elem,i,match){return!!$.data(elem,match[3]);}});/*!\r\n * jQuery UI Disable Selection 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: disableSelection\n//>>group: Core\n//>>description: Disable selection of text content within the set of matched elements.\n//>>docs: http://api.jqueryui.com/disableSelection/\n// This file is deprecated\nvar disableSelection=$.fn.extend({disableSelection:function(){var eventType=\"onselectstart\"in document.createElement(\"div\")?\"selectstart\":\"mousedown\";return function(){return this.on(eventType+\".ui-disableSelection\",function(event){event.preventDefault();});};}(),enableSelection:function enableSelection(){return this.off(\".ui-disableSelection\");}});// Create a local jQuery because jQuery Color relies on it and the\n// global may not exist with AMD and a custom build (#10199).\n// This module is a noop if used as a regular AMD module.\n// eslint-disable-next-line no-unused-vars\nvar jQuery=$;/*!\r\n * jQuery Color Animations v2.2.0\r\n * https://github.com/jquery/jquery-color\r\n *\r\n * Copyright OpenJS Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * Date: Sun May 10 09:02:36 2020 +0200\r\n */var stepHooks=\"backgroundColor borderBottomColor borderLeftColor borderRightColor \"+\"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",class2type={},toString=class2type.toString,// plusequals test for += 100 -= 100\nrplusequals=/^([\\-+])=\\s*(\\d+\\.?\\d*)/,// a set of RE's that can match strings and generate color tuples.\nstringParsers=[{re:/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,parse:function parse(execResult){return[execResult[1],execResult[2],execResult[3],execResult[4]];}},{re:/rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,parse:function parse(execResult){return[execResult[1]*2.55,execResult[2]*2.55,execResult[3]*2.55,execResult[4]];}},{// this regex ignores A-F because it's compared against an already lowercased string\nre:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/,parse:function parse(execResult){return[parseInt(execResult[1],16),parseInt(execResult[2],16),parseInt(execResult[3],16),execResult[4]?(parseInt(execResult[4],16)/255).toFixed(2):1];}},{// this regex ignores A-F because it's compared against an already lowercased string\nre:/#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/,parse:function parse(execResult){return[parseInt(execResult[1]+execResult[1],16),parseInt(execResult[2]+execResult[2],16),parseInt(execResult[3]+execResult[3],16),execResult[4]?(parseInt(execResult[4]+execResult[4],16)/255).toFixed(2):1];}},{re:/hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,space:\"hsla\",parse:function parse(execResult){return[execResult[1],execResult[2]/100,execResult[3]/100,execResult[4]];}}],// jQuery.Color( )\ncolor=jQuery.Color=function(color,green,blue,alpha){return new jQuery.Color.fn.parse(color,green,blue,alpha);},spaces={rgba:{props:{red:{idx:0,type:\"byte\"},green:{idx:1,type:\"byte\"},blue:{idx:2,type:\"byte\"}}},hsla:{props:{hue:{idx:0,type:\"degrees\"},saturation:{idx:1,type:\"percent\"},lightness:{idx:2,type:\"percent\"}}}},propTypes={\"byte\":{floor:true,max:255},\"percent\":{max:1},\"degrees\":{mod:360,floor:true}},support=color.support={},// element for support tests\nsupportElem=jQuery(\"<p>\")[0],// colors = jQuery.Color.names\ncolors,// local aliases of functions called often\neach=jQuery.each;// determine rgba support immediately\nsupportElem.style.cssText=\"background-color:rgba(1,1,1,.5)\";support.rgba=supportElem.style.backgroundColor.indexOf(\"rgba\")>-1;// define cache name and alpha properties\n// for rgba and hsla spaces\neach(spaces,function(spaceName,space){space.cache=\"_\"+spaceName;space.props.alpha={idx:3,type:\"percent\",def:1};});// Populate the class2type map\njQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(_i,name){class2type[\"[object \"+name+\"]\"]=name.toLowerCase();});function getType(obj){if(obj==null){return obj+\"\";}return _typeof(obj)===\"object\"?class2type[toString.call(obj)]||\"object\":_typeof(obj);}function clamp(value,prop,allowEmpty){var type=propTypes[prop.type]||{};if(value==null){return allowEmpty||!prop.def?null:prop.def;}// ~~ is an short way of doing floor for positive numbers\nvalue=type.floor?~~value:parseFloat(value);// IE will pass in empty strings as value for alpha,\n// which will hit this case\nif(isNaN(value)){return prop.def;}if(type.mod){// we add mod before modding to make sure that negatives values\n// get converted properly: -10 -> 350\nreturn(value+type.mod)%type.mod;}// for now all property types without mod have min and max\nreturn Math.min(type.max,Math.max(0,value));}function stringParse(string){var inst=color(),rgba=inst._rgba=[];string=string.toLowerCase();each(stringParsers,function(_i,parser){var parsed,match=parser.re.exec(string),values=match&&parser.parse(match),spaceName=parser.space||\"rgba\";if(values){parsed=inst[spaceName](values);// if this was an rgba parse the assignment might happen twice\n// oh well....\ninst[spaces[spaceName].cache]=parsed[spaces[spaceName].cache];rgba=inst._rgba=parsed._rgba;// exit each( stringParsers ) here because we matched\nreturn false;}});// Found a stringParser that handled it\nif(rgba.length){// if this came from a parsed string, force \"transparent\" when alpha is 0\n// chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\nif(rgba.join()===\"0,0,0,0\"){jQuery.extend(rgba,colors.transparent);}return inst;}// named colors\nreturn colors[string];}color.fn=jQuery.extend(color.prototype,{parse:function parse(red,green,blue,alpha){if(red===undefined){this._rgba=[null,null,null,null];return this;}if(red.jquery||red.nodeType){red=jQuery(red).css(green);green=undefined;}var inst=this,type=getType(red),rgba=this._rgba=[];// more than 1 argument specified - assume ( red, green, blue, alpha )\nif(green!==undefined){red=[red,green,blue,alpha];type=\"array\";}if(type===\"string\"){return this.parse(stringParse(red)||colors._default);}if(type===\"array\"){each(spaces.rgba.props,function(_key,prop){rgba[prop.idx]=clamp(red[prop.idx],prop);});return this;}if(type===\"object\"){if(red instanceof color){each(spaces,function(_spaceName,space){if(red[space.cache]){inst[space.cache]=red[space.cache].slice();}});}else{each(spaces,function(_spaceName,space){var cache=space.cache;each(space.props,function(key,prop){// if the cache doesn't exist, and we know how to convert\nif(!inst[cache]&&space.to){// if the value was null, we don't need to copy it\n// if the key was alpha, we don't need to copy it either\nif(key===\"alpha\"||red[key]==null){return;}inst[cache]=space.to(inst._rgba);}// this is the only case where we allow nulls for ALL properties.\n// call clamp with alwaysAllowEmpty\ninst[cache][prop.idx]=clamp(red[key],prop,true);});// everything defined but alpha?\nif(inst[cache]&&jQuery.inArray(null,inst[cache].slice(0,3))<0){// use the default of 1\nif(inst[cache][3]==null){inst[cache][3]=1;}if(space.from){inst._rgba=space.from(inst[cache]);}}});}return this;}},is:function is(compare){var is=color(compare),same=true,inst=this;each(spaces,function(_,space){var localCache,isCache=is[space.cache];if(isCache){localCache=inst[space.cache]||space.to&&space.to(inst._rgba)||[];each(space.props,function(_,prop){if(isCache[prop.idx]!=null){same=isCache[prop.idx]===localCache[prop.idx];return same;}});}return same;});return same;},_space:function _space(){var used=[],inst=this;each(spaces,function(spaceName,space){if(inst[space.cache]){used.push(spaceName);}});return used.pop();},transition:function transition(other,distance){var end=color(other),spaceName=end._space(),space=spaces[spaceName],startColor=this.alpha()===0?color(\"transparent\"):this,start=startColor[space.cache]||space.to(startColor._rgba),result=start.slice();end=end[space.cache];each(space.props,function(_key,prop){var index=prop.idx,startValue=start[index],endValue=end[index],type=propTypes[prop.type]||{};// if null, don't override start value\nif(endValue===null){return;}// if null - use end\nif(startValue===null){result[index]=endValue;}else{if(type.mod){if(endValue-startValue>type.mod/2){startValue+=type.mod;}else if(startValue-endValue>type.mod/2){startValue-=type.mod;}}result[index]=clamp((endValue-startValue)*distance+startValue,prop);}});return this[spaceName](result);},blend:function blend(opaque){// if we are already opaque - return ourself\nif(this._rgba[3]===1){return this;}var rgb=this._rgba.slice(),a=rgb.pop(),blend=color(opaque)._rgba;return color(jQuery.map(rgb,function(v,i){return(1-a)*blend[i]+a*v;}));},toRgbaString:function toRgbaString(){var prefix=\"rgba(\",rgba=jQuery.map(this._rgba,function(v,i){if(v!=null){return v;}return i>2?1:0;});if(rgba[3]===1){rgba.pop();prefix=\"rgb(\";}return prefix+rgba.join()+\")\";},toHslaString:function toHslaString(){var prefix=\"hsla(\",hsla=jQuery.map(this.hsla(),function(v,i){if(v==null){v=i>2?1:0;}// catch 1 and 2\nif(i&&i<3){v=Math.round(v*100)+\"%\";}return v;});if(hsla[3]===1){hsla.pop();prefix=\"hsl(\";}return prefix+hsla.join()+\")\";},toHexString:function toHexString(includeAlpha){var rgba=this._rgba.slice(),alpha=rgba.pop();if(includeAlpha){rgba.push(~~(alpha*255));}return\"#\"+jQuery.map(rgba,function(v){// default to 0 when nulls exist\nv=(v||0).toString(16);return v.length===1?\"0\"+v:v;}).join(\"\");},toString:function toString(){return this._rgba[3]===0?\"transparent\":this.toRgbaString();}});color.fn.parse.prototype=color.fn;// hsla conversions adapted from:\n// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\nfunction hue2rgb(p,q,h){h=(h+1)%1;if(h*6<1){return p+(q-p)*h*6;}if(h*2<1){return q;}if(h*3<2){return p+(q-p)*(2/3-h)*6;}return p;}spaces.hsla.to=function(rgba){if(rgba[0]==null||rgba[1]==null||rgba[2]==null){return[null,null,null,rgba[3]];}var r=rgba[0]/255,g=rgba[1]/255,b=rgba[2]/255,a=rgba[3],max=Math.max(r,g,b),min=Math.min(r,g,b),diff=max-min,add=max+min,l=add*0.5,h,s;if(min===max){h=0;}else if(r===max){h=60*(g-b)/diff+360;}else if(g===max){h=60*(b-r)/diff+120;}else{h=60*(r-g)/diff+240;}// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\nif(diff===0){s=0;}else if(l<=0.5){s=diff/add;}else{s=diff/(2-add);}return[Math.round(h)%360,s,l,a==null?1:a];};spaces.hsla.from=function(hsla){if(hsla[0]==null||hsla[1]==null||hsla[2]==null){return[null,null,null,hsla[3]];}var h=hsla[0]/360,s=hsla[1],l=hsla[2],a=hsla[3],q=l<=0.5?l*(1+s):l+s-l*s,p=2*l-q;return[Math.round(hue2rgb(p,q,h+1/3)*255),Math.round(hue2rgb(p,q,h)*255),Math.round(hue2rgb(p,q,h-1/3)*255),a];};each(spaces,function(spaceName,space){var props=space.props,cache=space.cache,to=space.to,from=space.from;// makes rgba() and hsla()\ncolor.fn[spaceName]=function(value){// generate a cache for this space if it doesn't exist\nif(to&&!this[cache]){this[cache]=to(this._rgba);}if(value===undefined){return this[cache].slice();}var ret,type=getType(value),arr=type===\"array\"||type===\"object\"?value:arguments,local=this[cache].slice();each(props,function(key,prop){var val=arr[type===\"object\"?key:prop.idx];if(val==null){val=local[prop.idx];}local[prop.idx]=clamp(val,prop);});if(from){ret=color(from(local));ret[cache]=local;return ret;}else{return color(local);}};// makes red() green() blue() alpha() hue() saturation() lightness()\neach(props,function(key,prop){// alpha is included in more than one space\nif(color.fn[key]){return;}color.fn[key]=function(value){var local,cur,match,fn,vtype=getType(value);if(key===\"alpha\"){fn=this._hsla?\"hsla\":\"rgba\";}else{fn=spaceName;}local=this[fn]();cur=local[prop.idx];if(vtype===\"undefined\"){return cur;}if(vtype===\"function\"){value=value.call(this,cur);vtype=getType(value);}if(value==null&&prop.empty){return this;}if(vtype===\"string\"){match=rplusequals.exec(value);if(match){value=cur+parseFloat(match[2])*(match[1]===\"+\"?1:-1);}}local[prop.idx]=value;return this[fn](local);};});});// add cssHook and .fx.step function for each named hook.\n// accept a space separated string of properties\ncolor.hook=function(hook){var hooks=hook.split(\" \");each(hooks,function(_i,hook){jQuery.cssHooks[hook]={set:function set(elem,value){var parsed,curElem,backgroundColor=\"\";if(value!==\"transparent\"&&(getType(value)!==\"string\"||(parsed=stringParse(value)))){value=color(parsed||value);if(!support.rgba&&value._rgba[3]!==1){curElem=hook===\"backgroundColor\"?elem.parentNode:elem;while((backgroundColor===\"\"||backgroundColor===\"transparent\")&&curElem&&curElem.style){try{backgroundColor=jQuery.css(curElem,\"backgroundColor\");curElem=curElem.parentNode;}catch(e){}}value=value.blend(backgroundColor&&backgroundColor!==\"transparent\"?backgroundColor:\"_default\");}value=value.toRgbaString();}try{elem.style[hook]=value;}catch(e){// wrapped to prevent IE from throwing errors on \"invalid\" values like 'auto' or 'inherit'\n}}};jQuery.fx.step[hook]=function(fx){if(!fx.colorInit){fx.start=color(fx.elem,hook);fx.end=color(fx.end);fx.colorInit=true;}jQuery.cssHooks[hook].set(fx.elem,fx.start.transition(fx.end,fx.pos));};});};color.hook(stepHooks);jQuery.cssHooks.borderColor={expand:function expand(value){var expanded={};each([\"Top\",\"Right\",\"Bottom\",\"Left\"],function(_i,part){expanded[\"border\"+part+\"Color\"]=value;});return expanded;}};// Basic color names only.\n// Usage of any of the other color names requires adding yourself or including\n// jquery.color.svg-names.js.\ncolors=jQuery.Color.names={// 4.1. Basic color keywords\naqua:\"#00ffff\",black:\"#000000\",blue:\"#0000ff\",fuchsia:\"#ff00ff\",gray:\"#808080\",green:\"#008000\",lime:\"#00ff00\",maroon:\"#800000\",navy:\"#000080\",olive:\"#808000\",purple:\"#800080\",red:\"#ff0000\",silver:\"#c0c0c0\",teal:\"#008080\",white:\"#ffffff\",yellow:\"#ffff00\",// 4.2.3. \"transparent\" color keyword\ntransparent:[null,null,null,0],_default:\"#ffffff\"};/*!\r\n * jQuery UI Effects 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Effects Core\n//>>group: Effects\n/* eslint-disable max-len */ //>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.\n/* eslint-enable max-len */ //>>docs: http://api.jqueryui.com/category/effects-core/\n//>>demos: http://jqueryui.com/effect/\nvar dataSpace=\"ui-effects-\",dataSpaceStyle=\"ui-effects-style\",dataSpaceAnimated=\"ui-effects-animated\";$.effects={effect:{}};/******************************************************************************/ /****************************** CLASS ANIMATIONS ******************************/ /******************************************************************************/(function(){var classAnimationActions=[\"add\",\"remove\",\"toggle\"],shorthandStyles={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};$.each([\"borderLeftStyle\",\"borderRightStyle\",\"borderBottomStyle\",\"borderTopStyle\"],function(_,prop){$.fx.step[prop]=function(fx){if(fx.end!==\"none\"&&!fx.setAttr||fx.pos===1&&!fx.setAttr){jQuery.style(fx.elem,prop,fx.end);fx.setAttr=true;}};});function camelCase(string){return string.replace(/-([\\da-z])/gi,function(all,letter){return letter.toUpperCase();});}function getElementStyles(elem){var key,len,style=elem.ownerDocument.defaultView?elem.ownerDocument.defaultView.getComputedStyle(elem,null):elem.currentStyle,styles={};if(style&&style.length&&style[0]&&style[style[0]]){len=style.length;while(len--){key=style[len];if(typeof style[key]===\"string\"){styles[camelCase(key)]=style[key];}}// Support: Opera, IE <9\n}else{for(key in style){if(typeof style[key]===\"string\"){styles[key]=style[key];}}}return styles;}function styleDifference(oldStyle,newStyle){var diff={},name,value;for(name in newStyle){value=newStyle[name];if(oldStyle[name]!==value){if(!shorthandStyles[name]){if($.fx.step[name]||!isNaN(parseFloat(value))){diff[name]=value;}}}}return diff;}// Support: jQuery <1.8\nif(!$.fn.addBack){$.fn.addBack=function(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));};}$.effects.animateClass=function(value,duration,easing,callback){var o=$.speed(duration,easing,callback);return this.queue(function(){var animated=$(this),baseClass=animated.attr(\"class\")||\"\",applyClassChange,allAnimations=o.children?animated.find(\"*\").addBack():animated;// Map the animated objects to store the original styles.\nallAnimations=allAnimations.map(function(){var el=$(this);return{el:el,start:getElementStyles(this)};});// Apply class change\napplyClassChange=function applyClassChange(){$.each(classAnimationActions,function(i,action){if(value[action]){animated[action+\"Class\"](value[action]);}});};applyClassChange();// Map all animated objects again - calculate new styles and diff\nallAnimations=allAnimations.map(function(){this.end=getElementStyles(this.el[0]);this.diff=styleDifference(this.start,this.end);return this;});// Apply original class\nanimated.attr(\"class\",baseClass);// Map all animated objects again - this time collecting a promise\nallAnimations=allAnimations.map(function(){var styleInfo=this,dfd=$.Deferred(),opts=$.extend({},o,{queue:false,complete:function complete(){dfd.resolve(styleInfo);}});this.el.animate(this.diff,opts);return dfd.promise();});// Once all animations have completed:\n$.when.apply($,allAnimations.get()).done(function(){// Set the final class\napplyClassChange();// For each animated element,\n// clear all css properties that were animated\n$.each(arguments,function(){var el=this.el;$.each(this.diff,function(key){el.css(key,\"\");});});// This is guarnteed to be there if you use jQuery.speed()\n// it also handles dequeuing the next anim...\no.complete.call(animated[0]);});});};$.fn.extend({addClass:function(orig){return function(classNames,speed,easing,callback){return speed?$.effects.animateClass.call(this,{add:classNames},speed,easing,callback):orig.apply(this,arguments);};}($.fn.addClass),removeClass:function(orig){return function(classNames,speed,easing,callback){return arguments.length>1?$.effects.animateClass.call(this,{remove:classNames},speed,easing,callback):orig.apply(this,arguments);};}($.fn.removeClass),toggleClass:function(orig){return function(classNames,force,speed,easing,callback){if(typeof force===\"boolean\"||force===undefined){if(!speed){// Without speed parameter\nreturn orig.apply(this,arguments);}else{return $.effects.animateClass.call(this,force?{add:classNames}:{remove:classNames},speed,easing,callback);}}else{// Without force parameter\nreturn $.effects.animateClass.call(this,{toggle:classNames},force,speed,easing);}};}($.fn.toggleClass),switchClass:function switchClass(remove,add,speed,easing,callback){return $.effects.animateClass.call(this,{add:add,remove:remove},speed,easing,callback);}});})();/******************************************************************************/ /*********************************** EFFECTS **********************************/ /******************************************************************************/(function(){if($.expr&&$.expr.pseudos&&$.expr.pseudos.animated){$.expr.pseudos.animated=function(orig){return function(elem){return!!$(elem).data(dataSpaceAnimated)||orig(elem);};}($.expr.pseudos.animated);}if($.uiBackCompat!==false){$.extend($.effects,{// Saves a set of properties in a data storage\nsave:function save(element,set){var i=0,length=set.length;for(;i<length;i++){if(set[i]!==null){element.data(dataSpace+set[i],element[0].style[set[i]]);}}},// Restores a set of previously saved properties from a data storage\nrestore:function restore(element,set){var val,i=0,length=set.length;for(;i<length;i++){if(set[i]!==null){val=element.data(dataSpace+set[i]);element.css(set[i],val);}}},setMode:function setMode(el,mode){if(mode===\"toggle\"){mode=el.is(\":hidden\")?\"show\":\"hide\";}return mode;},// Wraps the element around a wrapper that copies position properties\ncreateWrapper:function createWrapper(element){// If the element is already wrapped, return it\nif(element.parent().is(\".ui-effects-wrapper\")){return element.parent();}// Wrap the element\nvar props={width:element.outerWidth(true),height:element.outerHeight(true),\"float\":element.css(\"float\")},wrapper=$(\"<div></div>\").addClass(\"ui-effects-wrapper\").css({fontSize:\"100%\",background:\"transparent\",border:\"none\",margin:0,padding:0}),// Store the size in case width/height are defined in % - Fixes #5245\nsize={width:element.width(),height:element.height()},active=document.activeElement;// Support: Firefox\n// Firefox incorrectly exposes anonymous content\n// https://bugzilla.mozilla.org/show_bug.cgi?id=561664\ntry{// eslint-disable-next-line no-unused-expressions\nactive.id;}catch(e){active=document.body;}element.wrap(wrapper);// Fixes #7595 - Elements lose focus when wrapped.\nif(element[0]===active||$.contains(element[0],active)){$(active).trigger(\"focus\");}// Hotfix for jQuery 1.4 since some change in wrap() seems to actually\n// lose the reference to the wrapped element\nwrapper=element.parent();// Transfer positioning properties to the wrapper\nif(element.css(\"position\")===\"static\"){wrapper.css({position:\"relative\"});element.css({position:\"relative\"});}else{$.extend(props,{position:element.css(\"position\"),zIndex:element.css(\"z-index\")});$.each([\"top\",\"left\",\"bottom\",\"right\"],function(i,pos){props[pos]=element.css(pos);if(isNaN(parseInt(props[pos],10))){props[pos]=\"auto\";}});element.css({position:\"relative\",top:0,left:0,right:\"auto\",bottom:\"auto\"});}element.css(size);return wrapper.css(props).show();},removeWrapper:function removeWrapper(element){var active=document.activeElement;if(element.parent().is(\".ui-effects-wrapper\")){element.parent().replaceWith(element);// Fixes #7595 - Elements lose focus when wrapped.\nif(element[0]===active||$.contains(element[0],active)){$(active).trigger(\"focus\");}}return element;}});}$.extend($.effects,{version:\"1.13.1\",define:function define(name,mode,effect){if(!effect){effect=mode;mode=\"effect\";}$.effects.effect[name]=effect;$.effects.effect[name].mode=mode;return effect;},scaledDimensions:function scaledDimensions(element,percent,direction){if(percent===0){return{height:0,width:0,outerHeight:0,outerWidth:0};}var x=direction!==\"horizontal\"?(percent||100)/100:1,y=direction!==\"vertical\"?(percent||100)/100:1;return{height:element.height()*y,width:element.width()*x,outerHeight:element.outerHeight()*y,outerWidth:element.outerWidth()*x};},clipToBox:function clipToBox(animation){return{width:animation.clip.right-animation.clip.left,height:animation.clip.bottom-animation.clip.top,left:animation.clip.left,top:animation.clip.top};},// Injects recently queued functions to be first in line (after \"inprogress\")\nunshift:function unshift(element,queueLength,count){var queue=element.queue();if(queueLength>1){queue.splice.apply(queue,[1,0].concat(queue.splice(queueLength,count)));}element.dequeue();},saveStyle:function saveStyle(element){element.data(dataSpaceStyle,element[0].style.cssText);},restoreStyle:function restoreStyle(element){element[0].style.cssText=element.data(dataSpaceStyle)||\"\";element.removeData(dataSpaceStyle);},mode:function mode(element,_mode){var hidden=element.is(\":hidden\");if(_mode===\"toggle\"){_mode=hidden?\"show\":\"hide\";}if(hidden?_mode===\"hide\":_mode===\"show\"){_mode=\"none\";}return _mode;},// Translates a [top,left] array into a baseline value\ngetBaseline:function getBaseline(origin,original){var y,x;switch(origin[0]){case\"top\":y=0;break;case\"middle\":y=0.5;break;case\"bottom\":y=1;break;default:y=origin[0]/original.height;}switch(origin[1]){case\"left\":x=0;break;case\"center\":x=0.5;break;case\"right\":x=1;break;default:x=origin[1]/original.width;}return{x:x,y:y};},// Creates a placeholder element so that the original element can be made absolute\ncreatePlaceholder:function createPlaceholder(element){var placeholder,cssPosition=element.css(\"position\"),position=element.position();// Lock in margins first to account for form elements, which\n// will change margin if you explicitly set height\n// see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380\n// Support: Safari\nelement.css({marginTop:element.css(\"marginTop\"),marginBottom:element.css(\"marginBottom\"),marginLeft:element.css(\"marginLeft\"),marginRight:element.css(\"marginRight\")}).outerWidth(element.outerWidth()).outerHeight(element.outerHeight());if(/^(static|relative)/.test(cssPosition)){cssPosition=\"absolute\";placeholder=$(\"<\"+element[0].nodeName+\">\").insertAfter(element).css({// Convert inline to inline block to account for inline elements\n// that turn to inline block based on content (like img)\ndisplay:/^(inline|ruby)/.test(element.css(\"display\"))?\"inline-block\":\"block\",visibility:\"hidden\",// Margins need to be set to account for margin collapse\nmarginTop:element.css(\"marginTop\"),marginBottom:element.css(\"marginBottom\"),marginLeft:element.css(\"marginLeft\"),marginRight:element.css(\"marginRight\"),\"float\":element.css(\"float\")}).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()).addClass(\"ui-effects-placeholder\");element.data(dataSpace+\"placeholder\",placeholder);}element.css({position:cssPosition,left:position.left,top:position.top});return placeholder;},removePlaceholder:function removePlaceholder(element){var dataKey=dataSpace+\"placeholder\",placeholder=element.data(dataKey);if(placeholder){placeholder.remove();element.removeData(dataKey);}},// Removes a placeholder if it exists and restores\n// properties that were modified during placeholder creation\ncleanUp:function cleanUp(element){$.effects.restoreStyle(element);$.effects.removePlaceholder(element);},setTransition:function setTransition(element,list,factor,value){value=value||{};$.each(list,function(i,x){var unit=element.cssUnit(x);if(unit[0]>0){value[x]=unit[0]*factor+unit[1];}});return value;}});// Return an effect options object for the given parameters:\nfunction _normalizeArguments(effect,options,speed,callback){// Allow passing all options as the first parameter\nif($.isPlainObject(effect)){options=effect;effect=effect.effect;}// Convert to an object\neffect={effect:effect};// Catch (effect, null, ...)\nif(options==null){options={};}// Catch (effect, callback)\nif(typeof options===\"function\"){callback=options;speed=null;options={};}// Catch (effect, speed, ?)\nif(typeof options===\"number\"||$.fx.speeds[options]){callback=speed;speed=options;options={};}// Catch (effect, options, callback)\nif(typeof speed===\"function\"){callback=speed;speed=null;}// Add options to effect\nif(options){$.extend(effect,options);}speed=speed||options.duration;effect.duration=$.fx.off?0:typeof speed===\"number\"?speed:speed in $.fx.speeds?$.fx.speeds[speed]:$.fx.speeds._default;effect.complete=callback||options.complete;return effect;}function standardAnimationOption(option){// Valid standard speeds (nothing, number, named speed)\nif(!option||typeof option===\"number\"||$.fx.speeds[option]){return true;}// Invalid strings - treat as \"normal\" speed\nif(typeof option===\"string\"&&!$.effects.effect[option]){return true;}// Complete callback\nif(typeof option===\"function\"){return true;}// Options hash (but not naming an effect)\nif(_typeof(option)===\"object\"&&!option.effect){return true;}// Didn't match any standard API\nreturn false;}$.fn.extend({effect:function/* effect, options, speed, callback */effect(){var args=_normalizeArguments.apply(this,arguments),effectMethod=$.effects.effect[args.effect],defaultMode=effectMethod.mode,queue=args.queue,queueName=queue||\"fx\",complete=args.complete,mode=args.mode,modes=[],prefilter=function prefilter(next){var el=$(this),normalizedMode=$.effects.mode(el,mode)||defaultMode;// Sentinel for duck-punching the :animated pseudo-selector\nel.data(dataSpaceAnimated,true);// Save effect mode for later use,\n// we can't just call $.effects.mode again later,\n// as the .show() below destroys the initial state\nmodes.push(normalizedMode);// See $.uiBackCompat inside of run() for removal of defaultMode in 1.14\nif(defaultMode&&(normalizedMode===\"show\"||normalizedMode===defaultMode&&normalizedMode===\"hide\")){el.show();}if(!defaultMode||normalizedMode!==\"none\"){$.effects.saveStyle(el);}if(typeof next===\"function\"){next();}};if($.fx.off||!effectMethod){// Delegate to the original method (e.g., .show()) if possible\nif(mode){return this[mode](args.duration,complete);}else{return this.each(function(){if(complete){complete.call(this);}});}}function run(next){var elem=$(this);function cleanup(){elem.removeData(dataSpaceAnimated);$.effects.cleanUp(elem);if(args.mode===\"hide\"){elem.hide();}done();}function done(){if(typeof complete===\"function\"){complete.call(elem[0]);}if(typeof next===\"function\"){next();}}// Override mode option on a per element basis,\n// as toggle can be either show or hide depending on element state\nargs.mode=modes.shift();if($.uiBackCompat!==false&&!defaultMode){if(elem.is(\":hidden\")?mode===\"hide\":mode===\"show\"){// Call the core method to track \"olddisplay\" properly\nelem[mode]();done();}else{effectMethod.call(elem[0],args,done);}}else{if(args.mode===\"none\"){// Call the core method to track \"olddisplay\" properly\nelem[mode]();done();}else{effectMethod.call(elem[0],args,cleanup);}}}// Run prefilter on all elements first to ensure that\n// any showing or hiding happens before placeholder creation,\n// which ensures that any layout changes are correctly captured.\nreturn queue===false?this.each(prefilter).each(run):this.queue(queueName,prefilter).queue(queueName,run);},show:function(orig){return function(option){if(standardAnimationOption(option)){return orig.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode=\"show\";return this.effect.call(this,args);}};}($.fn.show),hide:function(orig){return function(option){if(standardAnimationOption(option)){return orig.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode=\"hide\";return this.effect.call(this,args);}};}($.fn.hide),toggle:function(orig){return function(option){if(standardAnimationOption(option)||typeof option===\"boolean\"){return orig.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode=\"toggle\";return this.effect.call(this,args);}};}($.fn.toggle),cssUnit:function cssUnit(key){var style=this.css(key),val=[];$.each([\"em\",\"px\",\"%\",\"pt\"],function(i,unit){if(style.indexOf(unit)>0){val=[parseFloat(style),unit];}});return val;},cssClip:function cssClip(clipObj){if(clipObj){return this.css(\"clip\",\"rect(\"+clipObj.top+\"px \"+clipObj.right+\"px \"+clipObj.bottom+\"px \"+clipObj.left+\"px)\");}return parseClip(this.css(\"clip\"),this);},transfer:function transfer(options,done){var element=$(this),target=$(options.to),targetFixed=target.css(\"position\")===\"fixed\",body=$(\"body\"),fixTop=targetFixed?body.scrollTop():0,fixLeft=targetFixed?body.scrollLeft():0,endPosition=target.offset(),animation={top:endPosition.top-fixTop,left:endPosition.left-fixLeft,height:target.innerHeight(),width:target.innerWidth()},startPosition=element.offset(),transfer=$(\"<div class='ui-effects-transfer'></div>\");transfer.appendTo(\"body\").addClass(options.className).css({top:startPosition.top-fixTop,left:startPosition.left-fixLeft,height:element.innerHeight(),width:element.innerWidth(),position:targetFixed?\"fixed\":\"absolute\"}).animate(animation,options.duration,options.easing,function(){transfer.remove();if(typeof done===\"function\"){done();}});}});function parseClip(str,element){var outerWidth=element.outerWidth(),outerHeight=element.outerHeight(),clipRegex=/^rect\\((-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto)\\)$/,values=clipRegex.exec(str)||[\"\",0,outerWidth,outerHeight,0];return{top:parseFloat(values[1])||0,right:values[2]===\"auto\"?outerWidth:parseFloat(values[2]),bottom:values[3]===\"auto\"?outerHeight:parseFloat(values[3]),left:parseFloat(values[4])||0};}$.fx.step.clip=function(fx){if(!fx.clipInit){fx.start=$(fx.elem).cssClip();if(typeof fx.end===\"string\"){fx.end=parseClip(fx.end,fx.elem);}fx.clipInit=true;}$(fx.elem).cssClip({top:fx.pos*(fx.end.top-fx.start.top)+fx.start.top,right:fx.pos*(fx.end.right-fx.start.right)+fx.start.right,bottom:fx.pos*(fx.end.bottom-fx.start.bottom)+fx.start.bottom,left:fx.pos*(fx.end.left-fx.start.left)+fx.start.left});};})();/******************************************************************************/ /*********************************** EASING ***********************************/ /******************************************************************************/(function(){// Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)\nvar baseEasings={};$.each([\"Quad\",\"Cubic\",\"Quart\",\"Quint\",\"Expo\"],function(i,name){baseEasings[name]=function(p){return Math.pow(p,i+2);};});$.extend(baseEasings,{Sine:function Sine(p){return 1-Math.cos(p*Math.PI/2);},Circ:function Circ(p){return 1-Math.sqrt(1-p*p);},Elastic:function Elastic(p){return p===0||p===1?p:-Math.pow(2,8*(p-1))*Math.sin(((p-1)*80-7.5)*Math.PI/15);},Back:function Back(p){return p*p*(3*p-2);},Bounce:function Bounce(p){var pow2,bounce=4;while(p<((pow2=Math.pow(2,--bounce))-1)/11){}return 1/Math.pow(4,3-bounce)-7.5625*Math.pow((pow2*3-2)/22-p,2);}});$.each(baseEasings,function(name,easeIn){$.easing[\"easeIn\"+name]=easeIn;$.easing[\"easeOut\"+name]=function(p){return 1-easeIn(1-p);};$.easing[\"easeInOut\"+name]=function(p){return p<0.5?easeIn(p*2)/2:1-easeIn(p*-2+2)/2;};});})();var effect=$.effects;/*!\r\n * jQuery UI Effects Blind 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Blind Effect\n//>>group: Effects\n//>>description: Blinds the element.\n//>>docs: http://api.jqueryui.com/blind-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectBlind=$.effects.define(\"blind\",\"hide\",function(options,done){var map={up:[\"bottom\",\"top\"],vertical:[\"bottom\",\"top\"],down:[\"top\",\"bottom\"],left:[\"right\",\"left\"],horizontal:[\"right\",\"left\"],right:[\"left\",\"right\"]},element=$(this),direction=options.direction||\"up\",start=element.cssClip(),animate={clip:$.extend({},start)},placeholder=$.effects.createPlaceholder(element);animate.clip[map[direction][0]]=animate.clip[map[direction][1]];if(options.mode===\"show\"){element.cssClip(animate.clip);if(placeholder){placeholder.css($.effects.clipToBox(animate));}animate.clip=start;}if(placeholder){placeholder.animate($.effects.clipToBox(animate),options.duration,options.easing);}element.animate(animate,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!\r\n * jQuery UI Effects Bounce 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Bounce Effect\n//>>group: Effects\n//>>description: Bounces an element horizontally or vertically n times.\n//>>docs: http://api.jqueryui.com/bounce-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectBounce=$.effects.define(\"bounce\",function(options,done){var upAnim,downAnim,refValue,element=$(this),// Defaults:\nmode=options.mode,hide=mode===\"hide\",show=mode===\"show\",direction=options.direction||\"up\",distance=options.distance,times=options.times||5,// Number of internal animations\nanims=times*2+(show||hide?1:0),speed=options.duration/anims,easing=options.easing,// Utility:\nref=direction===\"up\"||direction===\"down\"?\"top\":\"left\",motion=direction===\"up\"||direction===\"left\",i=0,queuelen=element.queue().length;$.effects.createPlaceholder(element);refValue=element.css(ref);// Default distance for the BIGGEST bounce is the outer Distance / 3\nif(!distance){distance=element[ref===\"top\"?\"outerHeight\":\"outerWidth\"]()/3;}if(show){downAnim={opacity:1};downAnim[ref]=refValue;// If we are showing, force opacity 0 and set the initial position\n// then do the \"first\" animation\nelement.css(\"opacity\",0).css(ref,motion?-distance*2:distance*2).animate(downAnim,speed,easing);}// Start at the smallest distance if we are hiding\nif(hide){distance=distance/Math.pow(2,times-1);}downAnim={};downAnim[ref]=refValue;// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\nfor(;i<times;i++){upAnim={};upAnim[ref]=(motion?\"-=\":\"+=\")+distance;element.animate(upAnim,speed,easing).animate(downAnim,speed,easing);distance=hide?distance*2:distance/2;}// Last Bounce when Hiding\nif(hide){upAnim={opacity:0};upAnim[ref]=(motion?\"-=\":\"+=\")+distance;element.animate(upAnim,speed,easing);}element.queue(done);$.effects.unshift(element,queuelen,anims+1);});/*!\r\n * jQuery UI Effects Clip 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Clip Effect\n//>>group: Effects\n//>>description: Clips the element on and off like an old TV.\n//>>docs: http://api.jqueryui.com/clip-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectClip=$.effects.define(\"clip\",\"hide\",function(options,done){var start,animate={},element=$(this),direction=options.direction||\"vertical\",both=direction===\"both\",horizontal=both||direction===\"horizontal\",vertical=both||direction===\"vertical\";start=element.cssClip();animate.clip={top:vertical?(start.bottom-start.top)/2:start.top,right:horizontal?(start.right-start.left)/2:start.right,bottom:vertical?(start.bottom-start.top)/2:start.bottom,left:horizontal?(start.right-start.left)/2:start.left};$.effects.createPlaceholder(element);if(options.mode===\"show\"){element.cssClip(animate.clip);animate.clip=start;}element.animate(animate,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!\r\n * jQuery UI Effects Drop 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Drop Effect\n//>>group: Effects\n//>>description: Moves an element in one direction and hides it at the same time.\n//>>docs: http://api.jqueryui.com/drop-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectDrop=$.effects.define(\"drop\",\"hide\",function(options,done){var distance,element=$(this),mode=options.mode,show=mode===\"show\",direction=options.direction||\"left\",ref=direction===\"up\"||direction===\"down\"?\"top\":\"left\",motion=direction===\"up\"||direction===\"left\"?\"-=\":\"+=\",oppositeMotion=motion===\"+=\"?\"-=\":\"+=\",animation={opacity:0};$.effects.createPlaceholder(element);distance=options.distance||element[ref===\"top\"?\"outerHeight\":\"outerWidth\"](true)/2;animation[ref]=motion+distance;if(show){element.css(animation);animation[ref]=oppositeMotion+distance;animation.opacity=1;}// Animate\nelement.animate(animation,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!\r\n * jQuery UI Effects Explode 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Explode Effect\n//>>group: Effects\n/* eslint-disable max-len */ //>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.\n/* eslint-enable max-len */ //>>docs: http://api.jqueryui.com/explode-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectExplode=$.effects.define(\"explode\",\"hide\",function(options,done){var i,j,left,top,mx,my,rows=options.pieces?Math.round(Math.sqrt(options.pieces)):3,cells=rows,element=$(this),mode=options.mode,show=mode===\"show\",// Show and then visibility:hidden the element before calculating offset\noffset=element.show().css(\"visibility\",\"hidden\").offset(),// Width and height of a piece\nwidth=Math.ceil(element.outerWidth()/cells),height=Math.ceil(element.outerHeight()/rows),pieces=[];// Children animate complete:\nfunction childComplete(){pieces.push(this);if(pieces.length===rows*cells){animComplete();}}// Clone the element for each row and cell.\nfor(i=0;i<rows;i++){// ===>\ntop=offset.top+i*height;my=i-(rows-1)/2;for(j=0;j<cells;j++){// |||\nleft=offset.left+j*width;mx=j-(cells-1)/2;// Create a clone of the now hidden main element that will be absolute positioned\n// within a wrapper div off the -left and -top equal to size of our pieces\nelement.clone().appendTo(\"body\").wrap(\"<div></div>\").css({position:\"absolute\",visibility:\"visible\",left:-j*width,top:-i*height})// Select the wrapper - make it overflow: hidden and absolute positioned based on\n// where the original was located +left and +top equal to the size of pieces\n.parent().addClass(\"ui-effects-explode\").css({position:\"absolute\",overflow:\"hidden\",width:width,height:height,left:left+(show?mx*width:0),top:top+(show?my*height:0),opacity:show?0:1}).animate({left:left+(show?0:mx*width),top:top+(show?0:my*height),opacity:show?1:0},options.duration||500,options.easing,childComplete);}}function animComplete(){element.css({visibility:\"visible\"});$(pieces).remove();done();}});/*!\r\n * jQuery UI Effects Fade 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Fade Effect\n//>>group: Effects\n//>>description: Fades the element.\n//>>docs: http://api.jqueryui.com/fade-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectFade=$.effects.define(\"fade\",\"toggle\",function(options,done){var show=options.mode===\"show\";$(this).css(\"opacity\",show?0:1).animate({opacity:show?1:0},{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!\r\n * jQuery UI Effects Fold 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Fold Effect\n//>>group: Effects\n//>>description: Folds an element first horizontally and then vertically.\n//>>docs: http://api.jqueryui.com/fold-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectFold=$.effects.define(\"fold\",\"hide\",function(options,done){// Create element\nvar element=$(this),mode=options.mode,show=mode===\"show\",hide=mode===\"hide\",size=options.size||15,percent=/([0-9]+)%/.exec(size),horizFirst=!!options.horizFirst,ref=horizFirst?[\"right\",\"bottom\"]:[\"bottom\",\"right\"],duration=options.duration/2,placeholder=$.effects.createPlaceholder(element),start=element.cssClip(),animation1={clip:$.extend({},start)},animation2={clip:$.extend({},start)},distance=[start[ref[0]],start[ref[1]]],queuelen=element.queue().length;if(percent){size=parseInt(percent[1],10)/100*distance[hide?0:1];}animation1.clip[ref[0]]=size;animation2.clip[ref[0]]=size;animation2.clip[ref[1]]=0;if(show){element.cssClip(animation2.clip);if(placeholder){placeholder.css($.effects.clipToBox(animation2));}animation2.clip=start;}// Animate\nelement.queue(function(next){if(placeholder){placeholder.animate($.effects.clipToBox(animation1),duration,options.easing).animate($.effects.clipToBox(animation2),duration,options.easing);}next();}).animate(animation1,duration,options.easing).animate(animation2,duration,options.easing).queue(done);$.effects.unshift(element,queuelen,4);});/*!\r\n * jQuery UI Effects Highlight 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Highlight Effect\n//>>group: Effects\n//>>description: Highlights the background of an element in a defined color for a custom duration.\n//>>docs: http://api.jqueryui.com/highlight-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectHighlight=$.effects.define(\"highlight\",\"show\",function(options,done){var element=$(this),animation={backgroundColor:element.css(\"backgroundColor\")};if(options.mode===\"hide\"){animation.opacity=0;}$.effects.saveStyle(element);element.css({backgroundImage:\"none\",backgroundColor:options.color||\"#ffff99\"}).animate(animation,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!\r\n * jQuery UI Effects Size 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Size Effect\n//>>group: Effects\n//>>description: Resize an element to a specified width and height.\n//>>docs: http://api.jqueryui.com/size-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectSize=$.effects.define(\"size\",function(options,done){// Create element\nvar baseline,factor,temp,element=$(this),// Copy for children\ncProps=[\"fontSize\"],vProps=[\"borderTopWidth\",\"borderBottomWidth\",\"paddingTop\",\"paddingBottom\"],hProps=[\"borderLeftWidth\",\"borderRightWidth\",\"paddingLeft\",\"paddingRight\"],// Set options\nmode=options.mode,restore=mode!==\"effect\",scale=options.scale||\"both\",origin=options.origin||[\"middle\",\"center\"],position=element.css(\"position\"),pos=element.position(),original=$.effects.scaledDimensions(element),from=options.from||original,to=options.to||$.effects.scaledDimensions(element,0);$.effects.createPlaceholder(element);if(mode===\"show\"){temp=from;from=to;to=temp;}// Set scaling factor\nfactor={from:{y:from.height/original.height,x:from.width/original.width},to:{y:to.height/original.height,x:to.width/original.width}};// Scale the css box\nif(scale===\"box\"||scale===\"both\"){// Vertical props scaling\nif(factor.from.y!==factor.to.y){from=$.effects.setTransition(element,vProps,factor.from.y,from);to=$.effects.setTransition(element,vProps,factor.to.y,to);}// Horizontal props scaling\nif(factor.from.x!==factor.to.x){from=$.effects.setTransition(element,hProps,factor.from.x,from);to=$.effects.setTransition(element,hProps,factor.to.x,to);}}// Scale the content\nif(scale===\"content\"||scale===\"both\"){// Vertical props scaling\nif(factor.from.y!==factor.to.y){from=$.effects.setTransition(element,cProps,factor.from.y,from);to=$.effects.setTransition(element,cProps,factor.to.y,to);}}// Adjust the position properties based on the provided origin points\nif(origin){baseline=$.effects.getBaseline(origin,original);from.top=(original.outerHeight-from.outerHeight)*baseline.y+pos.top;from.left=(original.outerWidth-from.outerWidth)*baseline.x+pos.left;to.top=(original.outerHeight-to.outerHeight)*baseline.y+pos.top;to.left=(original.outerWidth-to.outerWidth)*baseline.x+pos.left;}delete from.outerHeight;delete from.outerWidth;element.css(from);// Animate the children if desired\nif(scale===\"content\"||scale===\"both\"){vProps=vProps.concat([\"marginTop\",\"marginBottom\"]).concat(cProps);hProps=hProps.concat([\"marginLeft\",\"marginRight\"]);// Only animate children with width attributes specified\n// TODO: is this right? should we include anything with css width specified as well\nelement.find(\"*[width]\").each(function(){var child=$(this),childOriginal=$.effects.scaledDimensions(child),childFrom={height:childOriginal.height*factor.from.y,width:childOriginal.width*factor.from.x,outerHeight:childOriginal.outerHeight*factor.from.y,outerWidth:childOriginal.outerWidth*factor.from.x},childTo={height:childOriginal.height*factor.to.y,width:childOriginal.width*factor.to.x,outerHeight:childOriginal.height*factor.to.y,outerWidth:childOriginal.width*factor.to.x};// Vertical props scaling\nif(factor.from.y!==factor.to.y){childFrom=$.effects.setTransition(child,vProps,factor.from.y,childFrom);childTo=$.effects.setTransition(child,vProps,factor.to.y,childTo);}// Horizontal props scaling\nif(factor.from.x!==factor.to.x){childFrom=$.effects.setTransition(child,hProps,factor.from.x,childFrom);childTo=$.effects.setTransition(child,hProps,factor.to.x,childTo);}if(restore){$.effects.saveStyle(child);}// Animate children\nchild.css(childFrom);child.animate(childTo,options.duration,options.easing,function(){// Restore children\nif(restore){$.effects.restoreStyle(child);}});});}// Animate\nelement.animate(to,{queue:false,duration:options.duration,easing:options.easing,complete:function complete(){var offset=element.offset();if(to.opacity===0){element.css(\"opacity\",from.opacity);}if(!restore){element.css(\"position\",position===\"static\"?\"relative\":position).offset(offset);// Need to save style here so that automatic style restoration\n// doesn't restore to the original styles from before the animation.\n$.effects.saveStyle(element);}done();}});});/*!\r\n * jQuery UI Effects Scale 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Scale Effect\n//>>group: Effects\n//>>description: Grows or shrinks an element and its content.\n//>>docs: http://api.jqueryui.com/scale-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectScale=$.effects.define(\"scale\",function(options,done){// Create element\nvar el=$(this),mode=options.mode,percent=parseInt(options.percent,10)||(parseInt(options.percent,10)===0?0:mode!==\"effect\"?0:100),newOptions=$.extend(true,{from:$.effects.scaledDimensions(el),to:$.effects.scaledDimensions(el,percent,options.direction||\"both\"),origin:options.origin||[\"middle\",\"center\"]},options);// Fade option to support puff\nif(options.fade){newOptions.from.opacity=1;newOptions.to.opacity=0;}$.effects.effect.size.call(this,newOptions,done);});/*!\r\n * jQuery UI Effects Puff 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Puff Effect\n//>>group: Effects\n//>>description: Creates a puff effect by scaling the element up and hiding it at the same time.\n//>>docs: http://api.jqueryui.com/puff-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectPuff=$.effects.define(\"puff\",\"hide\",function(options,done){var newOptions=$.extend(true,{},options,{fade:true,percent:parseInt(options.percent,10)||150});$.effects.effect.scale.call(this,newOptions,done);});/*!\r\n * jQuery UI Effects Pulsate 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Pulsate Effect\n//>>group: Effects\n//>>description: Pulsates an element n times by changing the opacity to zero and back.\n//>>docs: http://api.jqueryui.com/pulsate-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectPulsate=$.effects.define(\"pulsate\",\"show\",function(options,done){var element=$(this),mode=options.mode,show=mode===\"show\",hide=mode===\"hide\",showhide=show||hide,// Showing or hiding leaves off the \"last\" animation\nanims=(options.times||5)*2+(showhide?1:0),duration=options.duration/anims,animateTo=0,i=1,queuelen=element.queue().length;if(show||!element.is(\":visible\")){element.css(\"opacity\",0).show();animateTo=1;}// Anims - 1 opacity \"toggles\"\nfor(;i<anims;i++){element.animate({opacity:animateTo},duration,options.easing);animateTo=1-animateTo;}element.animate({opacity:animateTo},duration,options.easing);element.queue(done);$.effects.unshift(element,queuelen,anims+1);});/*!\r\n * jQuery UI Effects Shake 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Shake Effect\n//>>group: Effects\n//>>description: Shakes an element horizontally or vertically n times.\n//>>docs: http://api.jqueryui.com/shake-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectShake=$.effects.define(\"shake\",function(options,done){var i=1,element=$(this),direction=options.direction||\"left\",distance=options.distance||20,times=options.times||3,anims=times*2+1,speed=Math.round(options.duration/anims),ref=direction===\"up\"||direction===\"down\"?\"top\":\"left\",positiveMotion=direction===\"up\"||direction===\"left\",animation={},animation1={},animation2={},queuelen=element.queue().length;$.effects.createPlaceholder(element);// Animation\nanimation[ref]=(positiveMotion?\"-=\":\"+=\")+distance;animation1[ref]=(positiveMotion?\"+=\":\"-=\")+distance*2;animation2[ref]=(positiveMotion?\"-=\":\"+=\")+distance*2;// Animate\nelement.animate(animation,speed,options.easing);// Shakes\nfor(;i<times;i++){element.animate(animation1,speed,options.easing).animate(animation2,speed,options.easing);}element.animate(animation1,speed,options.easing).animate(animation,speed/2,options.easing).queue(done);$.effects.unshift(element,queuelen,anims+1);});/*!\r\n * jQuery UI Effects Slide 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Slide Effect\n//>>group: Effects\n//>>description: Slides an element in and out of the viewport.\n//>>docs: http://api.jqueryui.com/slide-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effectsEffectSlide=$.effects.define(\"slide\",\"show\",function(options,done){var startClip,startRef,element=$(this),map={up:[\"bottom\",\"top\"],down:[\"top\",\"bottom\"],left:[\"right\",\"left\"],right:[\"left\",\"right\"]},mode=options.mode,direction=options.direction||\"left\",ref=direction===\"up\"||direction===\"down\"?\"top\":\"left\",positiveMotion=direction===\"up\"||direction===\"left\",distance=options.distance||element[ref===\"top\"?\"outerHeight\":\"outerWidth\"](true),animation={};$.effects.createPlaceholder(element);startClip=element.cssClip();startRef=element.position()[ref];// Define hide animation\nanimation[ref]=(positiveMotion?-1:1)*distance+startRef;animation.clip=element.cssClip();animation.clip[map[direction][1]]=animation.clip[map[direction][0]];// Reverse the animation if we're showing\nif(mode===\"show\"){element.cssClip(animation.clip);element.css(ref,animation[ref]);animation.clip=startClip;animation[ref]=startRef;}// Actually animate\nelement.animate(animation,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!\r\n * jQuery UI Effects Transfer 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Transfer Effect\n//>>group: Effects\n//>>description: Displays a transfer effect from one element to another.\n//>>docs: http://api.jqueryui.com/transfer-effect/\n//>>demos: http://jqueryui.com/effect/\nvar effect;if($.uiBackCompat!==false){effect=$.effects.define(\"transfer\",function(options,done){$(this).transfer(options,done);});}var effectsEffectTransfer=effect;/*!\r\n * jQuery UI Focusable 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: :focusable Selector\n//>>group: Core\n//>>description: Selects elements which can be focused.\n//>>docs: http://api.jqueryui.com/focusable-selector/\n// Selectors\n$.ui.focusable=function(element,hasTabindex){var map,mapName,img,focusableIfVisible,fieldset,nodeName=element.nodeName.toLowerCase();if(\"area\"===nodeName){map=element.parentNode;mapName=map.name;if(!element.href||!mapName||map.nodeName.toLowerCase()!==\"map\"){return false;}img=$(\"img[usemap='#\"+mapName+\"']\");return img.length>0&&img.is(\":visible\");}if(/^(input|select|textarea|button|object)$/.test(nodeName)){focusableIfVisible=!element.disabled;if(focusableIfVisible){// Form controls within a disabled fieldset are disabled.\n// However, controls within the fieldset's legend do not get disabled.\n// Since controls generally aren't placed inside legends, we skip\n// this portion of the check.\nfieldset=$(element).closest(\"fieldset\")[0];if(fieldset){focusableIfVisible=!fieldset.disabled;}}}else if(\"a\"===nodeName){focusableIfVisible=element.href||hasTabindex;}else{focusableIfVisible=hasTabindex;}return focusableIfVisible&&$(element).is(\":visible\")&&visible($(element));};// Support: IE 8 only\n// IE 8 doesn't resolve inherit to visible/hidden for computed values\nfunction visible(element){var visibility=element.css(\"visibility\");while(visibility===\"inherit\"){element=element.parent();visibility=element.css(\"visibility\");}return visibility===\"visible\";}$.extend($.expr.pseudos,{focusable:function focusable(element){return $.ui.focusable(element,$.attr(element,\"tabindex\")!=null);}});var focusable=$.ui.focusable;// Support: IE8 Only\n// IE8 does not support the form attribute and when it is supplied. It overwrites the form prop\n// with a string, so we need to find the proper form.\nvar form=$.fn._form=function(){return typeof this[0].form===\"string\"?this.closest(\"form\"):$(this[0].form);};/*!\r\n * jQuery UI Form Reset Mixin 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Form Reset Mixin\n//>>group: Core\n//>>description: Refresh input widgets when their form is reset\n//>>docs: http://api.jqueryui.com/form-reset-mixin/\nvar formResetMixin=$.ui.formResetMixin={_formResetHandler:function _formResetHandler(){var form=$(this);// Wait for the form reset to actually happen before refreshing\nsetTimeout(function(){var instances=form.data(\"ui-form-reset-instances\");$.each(instances,function(){this.refresh();});});},_bindFormResetHandler:function _bindFormResetHandler(){this.form=this.element._form();if(!this.form.length){return;}var instances=this.form.data(\"ui-form-reset-instances\")||[];if(!instances.length){// We don't use _on() here because we use a single event handler per form\nthis.form.on(\"reset.ui-form-reset\",this._formResetHandler);}instances.push(this);this.form.data(\"ui-form-reset-instances\",instances);},_unbindFormResetHandler:function _unbindFormResetHandler(){if(!this.form.length){return;}var instances=this.form.data(\"ui-form-reset-instances\");instances.splice($.inArray(this,instances),1);if(instances.length){this.form.data(\"ui-form-reset-instances\",instances);}else{this.form.removeData(\"ui-form-reset-instances\").off(\"reset.ui-form-reset\");}}};/*!\r\n * jQuery UI Support for jQuery core 1.8.x and newer 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n */ //>>label: jQuery 1.8+ Support\n//>>group: Core\n//>>description: Support version 1.8.x and newer of jQuery core\n// Support: jQuery 1.9.x or older\n// $.expr[ \":\" ] is deprecated.\nif(!$.expr.pseudos){$.expr.pseudos=$.expr[\":\"];}// Support: jQuery 1.11.x or older\n// $.unique has been renamed to $.uniqueSort\nif(!$.uniqueSort){$.uniqueSort=$.unique;}// Support: jQuery 2.2.x or older.\n// This method has been defined in jQuery 3.0.0.\n// Code from https://github.com/jquery/jquery/blob/e539bac79e666bba95bba86d690b4e609dca2286/src/selector/escapeSelector.js\nif(!$.escapeSelector){// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;var fcssescape=function fcssescape(ch,asCodePoint){if(asCodePoint){// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\nif(ch===\"\\0\"){return\"\\uFFFD\";}// Control characters and (dependent upon position) numbers get escaped as code points\nreturn ch.slice(0,-1)+\"\\\\\"+ch.charCodeAt(ch.length-1).toString(16)+\" \";}// Other potentially-special ASCII characters get backslash-escaped\nreturn\"\\\\\"+ch;};$.escapeSelector=function(sel){return(sel+\"\").replace(rcssescape,fcssescape);};}// Support: jQuery 3.4.x or older\n// These methods have been defined in jQuery 3.5.0.\nif(!$.fn.even||!$.fn.odd){$.fn.extend({even:function even(){return this.filter(function(i){return i%2===0;});},odd:function odd(){return this.filter(function(i){return i%2===1;});}});};/*!\r\n * jQuery UI Keycode 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Keycode\n//>>group: Core\n//>>description: Provide keycodes as keynames\n//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/\nvar keycode=$.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38};/*!\r\n * jQuery UI Labels 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: labels\n//>>group: Core\n//>>description: Find all the labels associated with a given input\n//>>docs: http://api.jqueryui.com/labels/\nvar labels=$.fn.labels=function(){var ancestor,selector,id,labels,ancestors;if(!this.length){return this.pushStack([]);}// Check control.labels first\nif(this[0].labels&&this[0].labels.length){return this.pushStack(this[0].labels);}// Support: IE <= 11, FF <= 37, Android <= 2.3 only\n// Above browsers do not support control.labels. Everything below is to support them\n// as well as document fragments. control.labels does not work on document fragments\nlabels=this.eq(0).parents(\"label\");// Look for the label based on the id\nid=this.attr(\"id\");if(id){// We don't search against the document in case the element\n// is disconnected from the DOM\nancestor=this.eq(0).parents().last();// Get a full set of top level ancestors\nancestors=ancestor.add(ancestor.length?ancestor.siblings():this.siblings());// Create a selector for the label based on the id\nselector=\"label[for='\"+$.escapeSelector(id)+\"']\";labels=labels.add(ancestors.find(selector).addBack(selector));}// Return whatever we have found for labels\nreturn this.pushStack(labels);};/*!\r\n * jQuery UI Scroll Parent 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: scrollParent\n//>>group: Core\n//>>description: Get the closest ancestor element that is scrollable.\n//>>docs: http://api.jqueryui.com/scrollParent/\nvar scrollParent=$.fn.scrollParent=function(includeHidden){var position=this.css(\"position\"),excludeStaticParent=position===\"absolute\",overflowRegex=includeHidden?/(auto|scroll|hidden)/:/(auto|scroll)/,scrollParent=this.parents().filter(function(){var parent=$(this);if(excludeStaticParent&&parent.css(\"position\")===\"static\"){return false;}return overflowRegex.test(parent.css(\"overflow\")+parent.css(\"overflow-y\")+parent.css(\"overflow-x\"));}).eq(0);return position===\"fixed\"||!scrollParent.length?$(this[0].ownerDocument||document):scrollParent;};/*!\r\n * jQuery UI Tabbable 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: :tabbable Selector\n//>>group: Core\n//>>description: Selects elements which can be tabbed to.\n//>>docs: http://api.jqueryui.com/tabbable-selector/\nvar tabbable=$.extend($.expr.pseudos,{tabbable:function tabbable(element){var tabIndex=$.attr(element,\"tabindex\"),hasTabindex=tabIndex!=null;return(!hasTabindex||tabIndex>=0)&&$.ui.focusable(element,hasTabindex);}});/*!\r\n * jQuery UI Unique ID 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: uniqueId\n//>>group: Core\n//>>description: Functions to generate and remove uniqueId's\n//>>docs: http://api.jqueryui.com/uniqueId/\nvar uniqueId=$.fn.extend({uniqueId:function(){var uuid=0;return function(){return this.each(function(){if(!this.id){this.id=\"ui-id-\"+ ++uuid;}});};}(),removeUniqueId:function removeUniqueId(){return this.each(function(){if(/^ui-id-\\d+$/.test(this.id)){$(this).removeAttr(\"id\");}});}});/*!\r\n * jQuery UI Accordion 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Accordion\n//>>group: Widgets\n/* eslint-disable max-len */ //>>description: Displays collapsible content panels for presenting information in a limited amount of space.\n/* eslint-enable max-len */ //>>docs: http://api.jqueryui.com/accordion/\n//>>demos: http://jqueryui.com/accordion/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/accordion.css\n//>>css.theme: ../../themes/base/theme.css\nvar widgetsAccordion=$.widget(\"ui.accordion\",{version:\"1.13.1\",options:{active:0,animate:{},classes:{\"ui-accordion-header\":\"ui-corner-top\",\"ui-accordion-header-collapsed\":\"ui-corner-all\",\"ui-accordion-content\":\"ui-corner-bottom\"},collapsible:false,event:\"click\",header:function header(elem){return elem.find(\"> li > :first-child\").add(elem.find(\"> :not(li)\").even());},heightStyle:\"auto\",icons:{activeHeader:\"ui-icon-triangle-1-s\",header:\"ui-icon-triangle-1-e\"},// Callbacks\nactivate:null,beforeActivate:null},hideProps:{borderTopWidth:\"hide\",borderBottomWidth:\"hide\",paddingTop:\"hide\",paddingBottom:\"hide\",height:\"hide\"},showProps:{borderTopWidth:\"show\",borderBottomWidth:\"show\",paddingTop:\"show\",paddingBottom:\"show\",height:\"show\"},_create:function _create(){var options=this.options;this.prevShow=this.prevHide=$();this._addClass(\"ui-accordion\",\"ui-widget ui-helper-reset\");this.element.attr(\"role\",\"tablist\");// Don't allow collapsible: false and active: false / null\nif(!options.collapsible&&(options.active===false||options.active==null)){options.active=0;}this._processPanels();// handle negative values\nif(options.active<0){options.active+=this.headers.length;}this._refresh();},_getCreateEventData:function _getCreateEventData(){return{header:this.active,panel:!this.active.length?$():this.active.next()};},_createIcons:function _createIcons(){var icon,children,icons=this.options.icons;if(icons){icon=$(\"<span>\");this._addClass(icon,\"ui-accordion-header-icon\",\"ui-icon \"+icons.header);icon.prependTo(this.headers);children=this.active.children(\".ui-accordion-header-icon\");this._removeClass(children,icons.header)._addClass(children,null,icons.activeHeader)._addClass(this.headers,\"ui-accordion-icons\");}},_destroyIcons:function _destroyIcons(){this._removeClass(this.headers,\"ui-accordion-icons\");this.headers.children(\".ui-accordion-header-icon\").remove();},_destroy:function _destroy(){var contents;// Clean up main element\nthis.element.removeAttr(\"role\");// Clean up headers\nthis.headers.removeAttr(\"role aria-expanded aria-selected aria-controls tabIndex\").removeUniqueId();this._destroyIcons();// Clean up content panels\ncontents=this.headers.next().css(\"display\",\"\").removeAttr(\"role aria-hidden aria-labelledby\").removeUniqueId();if(this.options.heightStyle!==\"content\"){contents.css(\"height\",\"\");}},_setOption:function _setOption(key,value){if(key===\"active\"){// _activate() will handle invalid values and update this.options\nthis._activate(value);return;}if(key===\"event\"){if(this.options.event){this._off(this.headers,this.options.event);}this._setupEvents(value);}this._super(key,value);// Setting collapsible: false while collapsed; open first panel\nif(key===\"collapsible\"&&!value&&this.options.active===false){this._activate(0);}if(key===\"icons\"){this._destroyIcons();if(value){this._createIcons();}}},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this.element.attr(\"aria-disabled\",value);// Support: IE8 Only\n// #5332 / #6059 - opacity doesn't cascade to positioned elements in IE\n// so we need to add the disabled class to the headers and panels\nthis._toggleClass(null,\"ui-state-disabled\",!!value);this._toggleClass(this.headers.add(this.headers.next()),null,\"ui-state-disabled\",!!value);},_keydown:function _keydown(event){if(event.altKey||event.ctrlKey){return;}var keyCode=$.ui.keyCode,length=this.headers.length,currentIndex=this.headers.index(event.target),toFocus=false;switch(event.keyCode){case keyCode.RIGHT:case keyCode.DOWN:toFocus=this.headers[(currentIndex+1)%length];break;case keyCode.LEFT:case keyCode.UP:toFocus=this.headers[(currentIndex-1+length)%length];break;case keyCode.SPACE:case keyCode.ENTER:this._eventHandler(event);break;case keyCode.HOME:toFocus=this.headers[0];break;case keyCode.END:toFocus=this.headers[length-1];break;}if(toFocus){$(event.target).attr(\"tabIndex\",-1);$(toFocus).attr(\"tabIndex\",0);$(toFocus).trigger(\"focus\");event.preventDefault();}},_panelKeyDown:function _panelKeyDown(event){if(event.keyCode===$.ui.keyCode.UP&&event.ctrlKey){$(event.currentTarget).prev().trigger(\"focus\");}},refresh:function refresh(){var options=this.options;this._processPanels();// Was collapsed or no panel\nif(options.active===false&&options.collapsible===true||!this.headers.length){options.active=false;this.active=$();// active false only when collapsible is true\n}else if(options.active===false){this._activate(0);// was active, but active panel is gone\n}else if(this.active.length&&!$.contains(this.element[0],this.active[0])){// all remaining panel are disabled\nif(this.headers.length===this.headers.find(\".ui-state-disabled\").length){options.active=false;this.active=$();// activate previous panel\n}else{this._activate(Math.max(0,options.active-1));}// was active, active panel still exists\n}else{// make sure active index is correct\noptions.active=this.headers.index(this.active);}this._destroyIcons();this._refresh();},_processPanels:function _processPanels(){var prevHeaders=this.headers,prevPanels=this.panels;if(typeof this.options.header===\"function\"){this.headers=this.options.header(this.element);}else{this.headers=this.element.find(this.options.header);}this._addClass(this.headers,\"ui-accordion-header ui-accordion-header-collapsed\",\"ui-state-default\");this.panels=this.headers.next().filter(\":not(.ui-accordion-content-active)\").hide();this._addClass(this.panels,\"ui-accordion-content\",\"ui-helper-reset ui-widget-content\");// Avoid memory leaks (#10056)\nif(prevPanels){this._off(prevHeaders.not(this.headers));this._off(prevPanels.not(this.panels));}},_refresh:function _refresh(){var maxHeight,options=this.options,heightStyle=options.heightStyle,parent=this.element.parent();this.active=this._findActive(options.active);this._addClass(this.active,\"ui-accordion-header-active\",\"ui-state-active\")._removeClass(this.active,\"ui-accordion-header-collapsed\");this._addClass(this.active.next(),\"ui-accordion-content-active\");this.active.next().show();this.headers.attr(\"role\",\"tab\").each(function(){var header=$(this),headerId=header.uniqueId().attr(\"id\"),panel=header.next(),panelId=panel.uniqueId().attr(\"id\");header.attr(\"aria-controls\",panelId);panel.attr(\"aria-labelledby\",headerId);}).next().attr(\"role\",\"tabpanel\");this.headers.not(this.active).attr({\"aria-selected\":\"false\",\"aria-expanded\":\"false\",tabIndex:-1}).next().attr({\"aria-hidden\":\"true\"}).hide();// Make sure at least one header is in the tab order\nif(!this.active.length){this.headers.eq(0).attr(\"tabIndex\",0);}else{this.active.attr({\"aria-selected\":\"true\",\"aria-expanded\":\"true\",tabIndex:0}).next().attr({\"aria-hidden\":\"false\"});}this._createIcons();this._setupEvents(options.event);if(heightStyle===\"fill\"){maxHeight=parent.height();this.element.siblings(\":visible\").each(function(){var elem=$(this),position=elem.css(\"position\");if(position===\"absolute\"||position===\"fixed\"){return;}maxHeight-=elem.outerHeight(true);});this.headers.each(function(){maxHeight-=$(this).outerHeight(true);});this.headers.next().each(function(){$(this).height(Math.max(0,maxHeight-$(this).innerHeight()+$(this).height()));}).css(\"overflow\",\"auto\");}else if(heightStyle===\"auto\"){maxHeight=0;this.headers.next().each(function(){var isVisible=$(this).is(\":visible\");if(!isVisible){$(this).show();}maxHeight=Math.max(maxHeight,$(this).css(\"height\",\"\").height());if(!isVisible){$(this).hide();}}).height(maxHeight);}},_activate:function _activate(index){var active=this._findActive(index)[0];// Trying to activate the already active panel\nif(active===this.active[0]){return;}// Trying to collapse, simulate a click on the currently active header\nactive=active||this.active[0];this._eventHandler({target:active,currentTarget:active,preventDefault:$.noop});},_findActive:function _findActive(selector){return typeof selector===\"number\"?this.headers.eq(selector):$();},_setupEvents:function _setupEvents(event){var events={keydown:\"_keydown\"};if(event){$.each(event.split(\" \"),function(index,eventName){events[eventName]=\"_eventHandler\";});}this._off(this.headers.add(this.headers.next()));this._on(this.headers,events);this._on(this.headers.next(),{keydown:\"_panelKeyDown\"});this._hoverable(this.headers);this._focusable(this.headers);},_eventHandler:function _eventHandler(event){var activeChildren,clickedChildren,options=this.options,active=this.active,clicked=$(event.currentTarget),clickedIsActive=clicked[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():clicked.next(),toHide=active.next(),eventData={oldHeader:active,oldPanel:toHide,newHeader:collapsing?$():clicked,newPanel:toShow};event.preventDefault();if(// click on active header, but not collapsible\nclickedIsActive&&!options.collapsible||// allow canceling activation\nthis._trigger(\"beforeActivate\",event,eventData)===false){return;}options.active=collapsing?false:this.headers.index(clicked);// When the call to ._toggle() comes after the class changes\n// it causes a very odd bug in IE 8 (see #6720)\nthis.active=clickedIsActive?$():clicked;this._toggle(eventData);// Switch classes\n// corner classes on the previously active header stay after the animation\nthis._removeClass(active,\"ui-accordion-header-active\",\"ui-state-active\");if(options.icons){activeChildren=active.children(\".ui-accordion-header-icon\");this._removeClass(activeChildren,null,options.icons.activeHeader)._addClass(activeChildren,null,options.icons.header);}if(!clickedIsActive){this._removeClass(clicked,\"ui-accordion-header-collapsed\")._addClass(clicked,\"ui-accordion-header-active\",\"ui-state-active\");if(options.icons){clickedChildren=clicked.children(\".ui-accordion-header-icon\");this._removeClass(clickedChildren,null,options.icons.header)._addClass(clickedChildren,null,options.icons.activeHeader);}this._addClass(clicked.next(),\"ui-accordion-content-active\");}},_toggle:function _toggle(data){var toShow=data.newPanel,toHide=this.prevShow.length?this.prevShow:data.oldPanel;// Handle activating a panel during the animation for another activation\nthis.prevShow.add(this.prevHide).stop(true,true);this.prevShow=toShow;this.prevHide=toHide;if(this.options.animate){this._animate(toShow,toHide,data);}else{toHide.hide();toShow.show();this._toggleComplete(data);}toHide.attr({\"aria-hidden\":\"true\"});toHide.prev().attr({\"aria-selected\":\"false\",\"aria-expanded\":\"false\"});// if we're switching panels, remove the old header from the tab order\n// if we're opening from collapsed state, remove the previous header from the tab order\n// if we're collapsing, then keep the collapsing header in the tab order\nif(toShow.length&&toHide.length){toHide.prev().attr({\"tabIndex\":-1,\"aria-expanded\":\"false\"});}else if(toShow.length){this.headers.filter(function(){return parseInt($(this).attr(\"tabIndex\"),10)===0;}).attr(\"tabIndex\",-1);}toShow.attr(\"aria-hidden\",\"false\").prev().attr({\"aria-selected\":\"true\",\"aria-expanded\":\"true\",tabIndex:0});},_animate:function _animate(toShow,toHide,data){var total,easing,duration,that=this,adjust=0,boxSizing=toShow.css(\"box-sizing\"),down=toShow.length&&(!toHide.length||toShow.index()<toHide.index()),animate=this.options.animate||{},options=down&&animate.down||animate,complete=function complete(){that._toggleComplete(data);};if(typeof options===\"number\"){duration=options;}if(typeof options===\"string\"){easing=options;}// fall back from options to animation in case of partial down settings\neasing=easing||options.easing||animate.easing;duration=duration||options.duration||animate.duration;if(!toHide.length){return toShow.animate(this.showProps,duration,easing,complete);}if(!toShow.length){return toHide.animate(this.hideProps,duration,easing,complete);}total=toShow.show().outerHeight();toHide.animate(this.hideProps,{duration:duration,easing:easing,step:function step(now,fx){fx.now=Math.round(now);}});toShow.hide().animate(this.showProps,{duration:duration,easing:easing,complete:complete,step:function step(now,fx){fx.now=Math.round(now);if(fx.prop!==\"height\"){if(boxSizing===\"content-box\"){adjust+=fx.now;}}else if(that.options.heightStyle!==\"content\"){fx.now=Math.round(total-toHide.outerHeight()-adjust);adjust=0;}}});},_toggleComplete:function _toggleComplete(data){var toHide=data.oldPanel,prev=toHide.prev();this._removeClass(toHide,\"ui-accordion-content-active\");this._removeClass(prev,\"ui-accordion-header-active\")._addClass(prev,\"ui-accordion-header-collapsed\");// Work around for rendering bug in IE (#5421)\nif(toHide.length){toHide.parent()[0].className=toHide.parent()[0].className;}this._trigger(\"activate\",null,data);}});var safeActiveElement=$.ui.safeActiveElement=function(document){var activeElement;// Support: IE 9 only\n// IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\ntry{activeElement=document.activeElement;}catch(error){activeElement=document.body;}// Support: IE 9 - 11 only\n// IE may return null instead of an element\n// Interestingly, this only seems to occur when NOT in an iframe\nif(!activeElement){activeElement=document.body;}// Support: IE 11 only\n// IE11 returns a seemingly empty object in some cases when accessing\n// document.activeElement from an <iframe>\nif(!activeElement.nodeName){activeElement=document.body;}return activeElement;};/*!\r\n * jQuery UI Menu 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Menu\n//>>group: Widgets\n//>>description: Creates nestable menus.\n//>>docs: http://api.jqueryui.com/menu/\n//>>demos: http://jqueryui.com/menu/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/menu.css\n//>>css.theme: ../../themes/base/theme.css\nvar widgetsMenu=$.widget(\"ui.menu\",{version:\"1.13.1\",defaultElement:\"<ul>\",delay:300,options:{icons:{submenu:\"ui-icon-caret-1-e\"},items:\"> *\",menus:\"ul\",position:{my:\"left top\",at:\"right top\"},role:\"menu\",// Callbacks\nblur:null,focus:null,select:null},_create:function _create(){this.activeMenu=this.element;// Flag used to prevent firing of the click handler\n// as the event bubbles up through nested menus\nthis.mouseHandled=false;this.lastMousePosition={x:null,y:null};this.element.uniqueId().attr({role:this.options.role,tabIndex:0});this._addClass(\"ui-menu\",\"ui-widget ui-widget-content\");this._on({// Prevent focus from sticking to links inside menu after clicking\n// them (focus should always stay on UL during navigation).\n\"mousedown .ui-menu-item\":function mousedownUiMenuItem(event){event.preventDefault();this._activateItem(event);},\"click .ui-menu-item\":function clickUiMenuItem(event){var target=$(event.target);var active=$($.ui.safeActiveElement(this.document[0]));if(!this.mouseHandled&&target.not(\".ui-state-disabled\").length){this.select(event);// Only set the mouseHandled flag if the event will bubble, see #9469.\nif(!event.isPropagationStopped()){this.mouseHandled=true;}// Open submenu on click\nif(target.has(\".ui-menu\").length){this.expand(event);}else if(!this.element.is(\":focus\")&&active.closest(\".ui-menu\").length){// Redirect focus to the menu\nthis.element.trigger(\"focus\",[true]);// If the active item is on the top level, let it stay active.\n// Otherwise, blur the active item since it is no longer visible.\nif(this.active&&this.active.parents(\".ui-menu\").length===1){clearTimeout(this.timer);}}}},\"mouseenter .ui-menu-item\":\"_activateItem\",\"mousemove .ui-menu-item\":\"_activateItem\",mouseleave:\"collapseAll\",\"mouseleave .ui-menu\":\"collapseAll\",focus:function focus(event,keepActiveItem){// If there's already an active item, keep it active\n// If not, activate the first item\nvar item=this.active||this._menuItems().first();if(!keepActiveItem){this.focus(event,item);}},blur:function blur(event){this._delay(function(){var notContained=!$.contains(this.element[0],$.ui.safeActiveElement(this.document[0]));if(notContained){this.collapseAll(event);}});},keydown:\"_keydown\"});this.refresh();// Clicks outside of a menu collapse any open menus\nthis._on(this.document,{click:function click(event){if(this._closeOnDocumentClick(event)){this.collapseAll(event,true);}// Reset the mouseHandled flag\nthis.mouseHandled=false;}});},_activateItem:function _activateItem(event){// Ignore mouse events while typeahead is active, see #10458.\n// Prevents focusing the wrong item when typeahead causes a scroll while the mouse\n// is over an item in the menu\nif(this.previousFilter){return;}// If the mouse didn't actually move, but the page was scrolled, ignore the event (#9356)\nif(event.clientX===this.lastMousePosition.x&&event.clientY===this.lastMousePosition.y){return;}this.lastMousePosition={x:event.clientX,y:event.clientY};var actualTarget=$(event.target).closest(\".ui-menu-item\"),target=$(event.currentTarget);// Ignore bubbled events on parent items, see #11641\nif(actualTarget[0]!==target[0]){return;}// If the item is already active, there's nothing to do\nif(target.is(\".ui-state-active\")){return;}// Remove ui-state-active class from siblings of the newly focused menu item\n// to avoid a jump caused by adjacent elements both having a class with a border\nthis._removeClass(target.siblings().children(\".ui-state-active\"),null,\"ui-state-active\");this.focus(event,target);},_destroy:function _destroy(){var items=this.element.find(\".ui-menu-item\").removeAttr(\"role aria-disabled\"),submenus=items.children(\".ui-menu-item-wrapper\").removeUniqueId().removeAttr(\"tabIndex role aria-haspopup\");// Destroy (sub)menus\nthis.element.removeAttr(\"aria-activedescendant\").find(\".ui-menu\").addBack().removeAttr(\"role aria-labelledby aria-expanded aria-hidden aria-disabled \"+\"tabIndex\").removeUniqueId().show();submenus.children().each(function(){var elem=$(this);if(elem.data(\"ui-menu-submenu-caret\")){elem.remove();}});},_keydown:function _keydown(event){var match,prev,character,skip,preventDefault=true;switch(event.keyCode){case $.ui.keyCode.PAGE_UP:this.previousPage(event);break;case $.ui.keyCode.PAGE_DOWN:this.nextPage(event);break;case $.ui.keyCode.HOME:this._move(\"first\",\"first\",event);break;case $.ui.keyCode.END:this._move(\"last\",\"last\",event);break;case $.ui.keyCode.UP:this.previous(event);break;case $.ui.keyCode.DOWN:this.next(event);break;case $.ui.keyCode.LEFT:this.collapse(event);break;case $.ui.keyCode.RIGHT:if(this.active&&!this.active.is(\".ui-state-disabled\")){this.expand(event);}break;case $.ui.keyCode.ENTER:case $.ui.keyCode.SPACE:this._activate(event);break;case $.ui.keyCode.ESCAPE:this.collapse(event);break;default:preventDefault=false;prev=this.previousFilter||\"\";skip=false;// Support number pad values\ncharacter=event.keyCode>=96&&event.keyCode<=105?(event.keyCode-96).toString():String.fromCharCode(event.keyCode);clearTimeout(this.filterTimer);if(character===prev){skip=true;}else{character=prev+character;}match=this._filterMenuItems(character);match=skip&&match.index(this.active.next())!==-1?this.active.nextAll(\".ui-menu-item\"):match;// If no matches on the current filter, reset to the last character pressed\n// to move down the menu to the first item that starts with that character\nif(!match.length){character=String.fromCharCode(event.keyCode);match=this._filterMenuItems(character);}if(match.length){this.focus(event,match);this.previousFilter=character;this.filterTimer=this._delay(function(){delete this.previousFilter;},1000);}else{delete this.previousFilter;}}if(preventDefault){event.preventDefault();}},_activate:function _activate(event){if(this.active&&!this.active.is(\".ui-state-disabled\")){if(this.active.children(\"[aria-haspopup='true']\").length){this.expand(event);}else{this.select(event);}}},refresh:function refresh(){var menus,items,newSubmenus,newItems,newWrappers,that=this,icon=this.options.icons.submenu,submenus=this.element.find(this.options.menus);this._toggleClass(\"ui-menu-icons\",null,!!this.element.find(\".ui-icon\").length);// Initialize nested menus\nnewSubmenus=submenus.filter(\":not(.ui-menu)\").hide().attr({role:this.options.role,\"aria-hidden\":\"true\",\"aria-expanded\":\"false\"}).each(function(){var menu=$(this),item=menu.prev(),submenuCaret=$(\"<span>\").data(\"ui-menu-submenu-caret\",true);that._addClass(submenuCaret,\"ui-menu-icon\",\"ui-icon \"+icon);item.attr(\"aria-haspopup\",\"true\").prepend(submenuCaret);menu.attr(\"aria-labelledby\",item.attr(\"id\"));});this._addClass(newSubmenus,\"ui-menu\",\"ui-widget ui-widget-content ui-front\");menus=submenus.add(this.element);items=menus.find(this.options.items);// Initialize menu-items containing spaces and/or dashes only as dividers\nitems.not(\".ui-menu-item\").each(function(){var item=$(this);if(that._isDivider(item)){that._addClass(item,\"ui-menu-divider\",\"ui-widget-content\");}});// Don't refresh list items that are already adapted\nnewItems=items.not(\".ui-menu-item, .ui-menu-divider\");newWrappers=newItems.children().not(\".ui-menu\").uniqueId().attr({tabIndex:-1,role:this._itemRole()});this._addClass(newItems,\"ui-menu-item\")._addClass(newWrappers,\"ui-menu-item-wrapper\");// Add aria-disabled attribute to any disabled menu item\nitems.filter(\".ui-state-disabled\").attr(\"aria-disabled\",\"true\");// If the active item has been removed, blur the menu\nif(this.active&&!$.contains(this.element[0],this.active[0])){this.blur();}},_itemRole:function _itemRole(){return{menu:\"menuitem\",listbox:\"option\"}[this.options.role];},_setOption:function _setOption(key,value){if(key===\"icons\"){var icons=this.element.find(\".ui-menu-icon\");this._removeClass(icons,null,this.options.icons.submenu)._addClass(icons,null,value.submenu);}this._super(key,value);},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this.element.attr(\"aria-disabled\",String(value));this._toggleClass(null,\"ui-state-disabled\",!!value);},focus:function focus(event,item){var nested,focused,activeParent;this.blur(event,event&&event.type===\"focus\");this._scrollIntoView(item);this.active=item.first();focused=this.active.children(\".ui-menu-item-wrapper\");this._addClass(focused,null,\"ui-state-active\");// Only update aria-activedescendant if there's a role\n// otherwise we assume focus is managed elsewhere\nif(this.options.role){this.element.attr(\"aria-activedescendant\",focused.attr(\"id\"));}// Highlight active parent menu item, if any\nactiveParent=this.active.parent().closest(\".ui-menu-item\").children(\".ui-menu-item-wrapper\");this._addClass(activeParent,null,\"ui-state-active\");if(event&&event.type===\"keydown\"){this._close();}else{this.timer=this._delay(function(){this._close();},this.delay);}nested=item.children(\".ui-menu\");if(nested.length&&event&&/^mouse/.test(event.type)){this._startOpening(nested);}this.activeMenu=item.parent();this._trigger(\"focus\",event,{item:item});},_scrollIntoView:function _scrollIntoView(item){var borderTop,paddingTop,offset,scroll,elementHeight,itemHeight;if(this._hasScroll()){borderTop=parseFloat($.css(this.activeMenu[0],\"borderTopWidth\"))||0;paddingTop=parseFloat($.css(this.activeMenu[0],\"paddingTop\"))||0;offset=item.offset().top-this.activeMenu.offset().top-borderTop-paddingTop;scroll=this.activeMenu.scrollTop();elementHeight=this.activeMenu.height();itemHeight=item.outerHeight();if(offset<0){this.activeMenu.scrollTop(scroll+offset);}else if(offset+itemHeight>elementHeight){this.activeMenu.scrollTop(scroll+offset-elementHeight+itemHeight);}}},blur:function blur(event,fromFocus){if(!fromFocus){clearTimeout(this.timer);}if(!this.active){return;}this._removeClass(this.active.children(\".ui-menu-item-wrapper\"),null,\"ui-state-active\");this._trigger(\"blur\",event,{item:this.active});this.active=null;},_startOpening:function _startOpening(submenu){clearTimeout(this.timer);// Don't open if already open fixes a Firefox bug that caused a .5 pixel\n// shift in the submenu position when mousing over the caret icon\nif(submenu.attr(\"aria-hidden\")!==\"true\"){return;}this.timer=this._delay(function(){this._close();this._open(submenu);},this.delay);},_open:function _open(submenu){var position=$.extend({of:this.active},this.options.position);clearTimeout(this.timer);this.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\")).hide().attr(\"aria-hidden\",\"true\");submenu.show().removeAttr(\"aria-hidden\").attr(\"aria-expanded\",\"true\").position(position);},collapseAll:function collapseAll(event,all){clearTimeout(this.timer);this.timer=this._delay(function(){// If we were passed an event, look for the submenu that contains the event\nvar currentMenu=all?this.element:$(event&&event.target).closest(this.element.find(\".ui-menu\"));// If we found no valid submenu ancestor, use the main menu to close all\n// sub menus anyway\nif(!currentMenu.length){currentMenu=this.element;}this._close(currentMenu);this.blur(event);// Work around active item staying active after menu is blurred\nthis._removeClass(currentMenu.find(\".ui-state-active\"),null,\"ui-state-active\");this.activeMenu=currentMenu;},all?0:this.delay);},// With no arguments, closes the currently active menu - if nothing is active\n// it closes all menus.  If passed an argument, it will search for menus BELOW\n_close:function _close(startMenu){if(!startMenu){startMenu=this.active?this.active.parent():this.element;}startMenu.find(\".ui-menu\").hide().attr(\"aria-hidden\",\"true\").attr(\"aria-expanded\",\"false\");},_closeOnDocumentClick:function _closeOnDocumentClick(event){return!$(event.target).closest(\".ui-menu\").length;},_isDivider:function _isDivider(item){// Match hyphen, em dash, en dash\nreturn!/[^\\-\\u2014\\u2013\\s]/.test(item.text());},collapse:function collapse(event){var newItem=this.active&&this.active.parent().closest(\".ui-menu-item\",this.element);if(newItem&&newItem.length){this._close();this.focus(event,newItem);}},expand:function expand(event){var newItem=this.active&&this._menuItems(this.active.children(\".ui-menu\")).first();if(newItem&&newItem.length){this._open(newItem.parent());// Delay so Firefox will not hide activedescendant change in expanding submenu from AT\nthis._delay(function(){this.focus(event,newItem);});}},next:function next(event){this._move(\"next\",\"first\",event);},previous:function previous(event){this._move(\"prev\",\"last\",event);},isFirstItem:function isFirstItem(){return this.active&&!this.active.prevAll(\".ui-menu-item\").length;},isLastItem:function isLastItem(){return this.active&&!this.active.nextAll(\".ui-menu-item\").length;},_menuItems:function _menuItems(menu){return(menu||this.element).find(this.options.items).filter(\".ui-menu-item\");},_move:function _move(direction,filter,event){var next;if(this.active){if(direction===\"first\"||direction===\"last\"){next=this.active[direction===\"first\"?\"prevAll\":\"nextAll\"](\".ui-menu-item\").last();}else{next=this.active[direction+\"All\"](\".ui-menu-item\").first();}}if(!next||!next.length||!this.active){next=this._menuItems(this.activeMenu)[filter]();}this.focus(event,next);},nextPage:function nextPage(event){var item,base,height;if(!this.active){this.next(event);return;}if(this.isLastItem()){return;}if(this._hasScroll()){base=this.active.offset().top;height=this.element.innerHeight();// jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.\nif($.fn.jquery.indexOf(\"3.2.\")===0){height+=this.element[0].offsetHeight-this.element.outerHeight();}this.active.nextAll(\".ui-menu-item\").each(function(){item=$(this);return item.offset().top-base-height<0;});this.focus(event,item);}else{this.focus(event,this._menuItems(this.activeMenu)[!this.active?\"first\":\"last\"]());}},previousPage:function previousPage(event){var item,base,height;if(!this.active){this.next(event);return;}if(this.isFirstItem()){return;}if(this._hasScroll()){base=this.active.offset().top;height=this.element.innerHeight();// jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.\nif($.fn.jquery.indexOf(\"3.2.\")===0){height+=this.element[0].offsetHeight-this.element.outerHeight();}this.active.prevAll(\".ui-menu-item\").each(function(){item=$(this);return item.offset().top-base+height>0;});this.focus(event,item);}else{this.focus(event,this._menuItems(this.activeMenu).first());}},_hasScroll:function _hasScroll(){return this.element.outerHeight()<this.element.prop(\"scrollHeight\");},select:function select(event){// TODO: It should never be possible to not have an active item at this\n// point, but the tests don't trigger mouseenter before click.\nthis.active=this.active||$(event.target).closest(\".ui-menu-item\");var ui={item:this.active};if(!this.active.has(\".ui-menu\").length){this.collapseAll(event,true);}this._trigger(\"select\",event,ui);},_filterMenuItems:function _filterMenuItems(character){var escapedCharacter=character.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g,\"\\\\$&\"),regex=new RegExp(\"^\"+escapedCharacter,\"i\");return this.activeMenu.find(this.options.items)// Only match on items, not dividers or other content (#10571)\n.filter(\".ui-menu-item\").filter(function(){return regex.test(String.prototype.trim.call($(this).children(\".ui-menu-item-wrapper\").text()));});}});/*!\r\n * jQuery UI Autocomplete 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Autocomplete\n//>>group: Widgets\n//>>description: Lists suggested words as the user is typing.\n//>>docs: http://api.jqueryui.com/autocomplete/\n//>>demos: http://jqueryui.com/autocomplete/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/autocomplete.css\n//>>css.theme: ../../themes/base/theme.css\n$.widget(\"ui.autocomplete\",{version:\"1.13.1\",defaultElement:\"<input>\",options:{appendTo:null,autoFocus:false,delay:300,minLength:1,position:{my:\"left top\",at:\"left bottom\",collision:\"none\"},source:null,// Callbacks\nchange:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,liveRegionTimer:null,_create:function _create(){// Some browsers only repeat keydown events, not keypress events,\n// so we use the suppressKeyPress flag to determine if we've already\n// handled the keydown event. #7269\n// Unfortunately the code for & in keypress is the same as the up arrow,\n// so we use the suppressKeyPressRepeat flag to avoid handling keypress\n// events when we know the keydown event was used to modify the\n// search term. #7799\nvar suppressKeyPress,suppressKeyPressRepeat,suppressInput,nodeName=this.element[0].nodeName.toLowerCase(),isTextarea=nodeName===\"textarea\",isInput=nodeName===\"input\";// Textareas are always multi-line\n// Inputs are always single-line, even if inside a contentEditable element\n// IE also treats inputs as contentEditable\n// All other element types are determined by whether or not they're contentEditable\nthis.isMultiLine=isTextarea||!isInput&&this._isContentEditable(this.element);this.valueMethod=this.element[isTextarea||isInput?\"val\":\"text\"];this.isNewMenu=true;this._addClass(\"ui-autocomplete-input\");this.element.attr(\"autocomplete\",\"off\");this._on(this.element,{keydown:function keydown(event){if(this.element.prop(\"readOnly\")){suppressKeyPress=true;suppressInput=true;suppressKeyPressRepeat=true;return;}suppressKeyPress=false;suppressInput=false;suppressKeyPressRepeat=false;var keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.PAGE_UP:suppressKeyPress=true;this._move(\"previousPage\",event);break;case keyCode.PAGE_DOWN:suppressKeyPress=true;this._move(\"nextPage\",event);break;case keyCode.UP:suppressKeyPress=true;this._keyEvent(\"previous\",event);break;case keyCode.DOWN:suppressKeyPress=true;this._keyEvent(\"next\",event);break;case keyCode.ENTER:// when menu is open and has focus\nif(this.menu.active){// #6055 - Opera still allows the keypress to occur\n// which causes forms to submit\nsuppressKeyPress=true;event.preventDefault();this.menu.select(event);}break;case keyCode.TAB:if(this.menu.active){this.menu.select(event);}break;case keyCode.ESCAPE:if(this.menu.element.is(\":visible\")){if(!this.isMultiLine){this._value(this.term);}this.close(event);// Different browsers have different default behavior for escape\n// Single press can mean undo or clear\n// Double press in IE means clear the whole form\nevent.preventDefault();}break;default:suppressKeyPressRepeat=true;// search timeout should be triggered before the input value is changed\nthis._searchTimeout(event);break;}},keypress:function keypress(event){if(suppressKeyPress){suppressKeyPress=false;if(!this.isMultiLine||this.menu.element.is(\":visible\")){event.preventDefault();}return;}if(suppressKeyPressRepeat){return;}// Replicate some key handlers to allow them to repeat in Firefox and Opera\nvar keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.PAGE_UP:this._move(\"previousPage\",event);break;case keyCode.PAGE_DOWN:this._move(\"nextPage\",event);break;case keyCode.UP:this._keyEvent(\"previous\",event);break;case keyCode.DOWN:this._keyEvent(\"next\",event);break;}},input:function input(event){if(suppressInput){suppressInput=false;event.preventDefault();return;}this._searchTimeout(event);},focus:function focus(){this.selectedItem=null;this.previous=this._value();},blur:function blur(event){clearTimeout(this.searching);this.close(event);this._change(event);}});this._initSource();this.menu=$(\"<ul>\").appendTo(this._appendTo()).menu({// disable ARIA support, the live region takes care of that\nrole:null}).hide()// Support: IE 11 only, Edge <= 14\n// For other browsers, we preventDefault() on the mousedown event\n// to keep the dropdown from taking focus from the input. This doesn't\n// work for IE/Edge, causing problems with selection and scrolling (#9638)\n// Happily, IE and Edge support an \"unselectable\" attribute that\n// prevents an element from receiving focus, exactly what we want here.\n.attr({\"unselectable\":\"on\"}).menu(\"instance\");this._addClass(this.menu.element,\"ui-autocomplete\",\"ui-front\");this._on(this.menu.element,{mousedown:function mousedown(event){// Prevent moving focus out of the text field\nevent.preventDefault();},menufocus:function menufocus(event,ui){var label,item;// support: Firefox\n// Prevent accidental activation of menu items in Firefox (#7024 #9118)\nif(this.isNewMenu){this.isNewMenu=false;if(event.originalEvent&&/^mouse/.test(event.originalEvent.type)){this.menu.blur();this.document.one(\"mousemove\",function(){$(event.target).trigger(event.originalEvent);});return;}}item=ui.item.data(\"ui-autocomplete-item\");if(false!==this._trigger(\"focus\",event,{item:item})){// use value to match what will end up in the input, if it was a key event\nif(event.originalEvent&&/^key/.test(event.originalEvent.type)){this._value(item.value);}}// Announce the value in the liveRegion\nlabel=ui.item.attr(\"aria-label\")||item.value;if(label&&String.prototype.trim.call(label).length){clearTimeout(this.liveRegionTimer);this.liveRegionTimer=this._delay(function(){this.liveRegion.html($(\"<div>\").text(label));},100);}},menuselect:function menuselect(event,ui){var item=ui.item.data(\"ui-autocomplete-item\"),previous=this.previous;// Only trigger when focus was lost (click on menu)\nif(this.element[0]!==$.ui.safeActiveElement(this.document[0])){this.element.trigger(\"focus\");this.previous=previous;// #6109 - IE triggers two focus events and the second\n// is asynchronous, so we need to reset the previous\n// term synchronously and asynchronously :-(\nthis._delay(function(){this.previous=previous;this.selectedItem=item;});}if(false!==this._trigger(\"select\",event,{item:item})){this._value(item.value);}// reset the term after the select event\n// this allows custom select handling to work properly\nthis.term=this._value();this.close(event);this.selectedItem=item;}});this.liveRegion=$(\"<div>\",{role:\"status\",\"aria-live\":\"assertive\",\"aria-relevant\":\"additions\"}).appendTo(this.document[0].body);this._addClass(this.liveRegion,null,\"ui-helper-hidden-accessible\");// Turning off autocomplete prevents the browser from remembering the\n// value when navigating through history, so we re-enable autocomplete\n// if the page is unloaded before the widget is destroyed. #7790\nthis._on(this.window,{beforeunload:function beforeunload(){this.element.removeAttr(\"autocomplete\");}});},_destroy:function _destroy(){clearTimeout(this.searching);this.element.removeAttr(\"autocomplete\");this.menu.element.remove();this.liveRegion.remove();},_setOption:function _setOption(key,value){this._super(key,value);if(key===\"source\"){this._initSource();}if(key===\"appendTo\"){this.menu.element.appendTo(this._appendTo());}if(key===\"disabled\"&&value&&this.xhr){this.xhr.abort();}},_isEventTargetInWidget:function _isEventTargetInWidget(event){var menuElement=this.menu.element[0];return event.target===this.element[0]||event.target===menuElement||$.contains(menuElement,event.target);},_closeOnClickOutside:function _closeOnClickOutside(event){if(!this._isEventTargetInWidget(event)){this.close();}},_appendTo:function _appendTo(){var element=this.options.appendTo;if(element){element=element.jquery||element.nodeType?$(element):this.document.find(element).eq(0);}if(!element||!element[0]){element=this.element.closest(\".ui-front, dialog\");}if(!element.length){element=this.document[0].body;}return element;},_initSource:function _initSource(){var array,url,that=this;if(Array.isArray(this.options.source)){array=this.options.source;this.source=function(request,response){response($.ui.autocomplete.filter(array,request.term));};}else if(typeof this.options.source===\"string\"){url=this.options.source;this.source=function(request,response){if(that.xhr){that.xhr.abort();}that.xhr=$.ajax({url:url,data:request,dataType:\"json\",success:function success(data){response(data);},error:function error(){response([]);}});};}else{this.source=this.options.source;}},_searchTimeout:function _searchTimeout(event){clearTimeout(this.searching);this.searching=this._delay(function(){// Search if the value has changed, or if the user retypes the same value (see #7434)\nvar equalValues=this.term===this._value(),menuVisible=this.menu.element.is(\":visible\"),modifierKey=event.altKey||event.ctrlKey||event.metaKey||event.shiftKey;if(!equalValues||equalValues&&!menuVisible&&!modifierKey){this.selectedItem=null;this.search(null,event);}},this.options.delay);},search:function search(value,event){value=value!=null?value:this._value();// Always save the actual value, not the one passed as an argument\nthis.term=this._value();if(value.length<this.options.minLength){return this.close(event);}if(this._trigger(\"search\",event)===false){return;}return this._search(value);},_search:function _search(value){this.pending++;this._addClass(\"ui-autocomplete-loading\");this.cancelSearch=false;this.source({term:value},this._response());},_response:function _response(){var index=++this.requestIndex;return function(content){if(index===this.requestIndex){this.__response(content);}this.pending--;if(!this.pending){this._removeClass(\"ui-autocomplete-loading\");}}.bind(this);},__response:function __response(content){if(content){content=this._normalize(content);}this._trigger(\"response\",null,{content:content});if(!this.options.disabled&&content&&content.length&&!this.cancelSearch){this._suggest(content);this._trigger(\"open\");}else{// use ._close() instead of .close() so we don't cancel future searches\nthis._close();}},close:function close(event){this.cancelSearch=true;this._close(event);},_close:function _close(event){// Remove the handler that closes the menu on outside clicks\nthis._off(this.document,\"mousedown\");if(this.menu.element.is(\":visible\")){this.menu.element.hide();this.menu.blur();this.isNewMenu=true;this._trigger(\"close\",event);}},_change:function _change(event){if(this.previous!==this._value()){this._trigger(\"change\",event,{item:this.selectedItem});}},_normalize:function _normalize(items){// assume all items have the right format when the first item is complete\nif(items.length&&items[0].label&&items[0].value){return items;}return $.map(items,function(item){if(typeof item===\"string\"){return{label:item,value:item};}return $.extend({},item,{label:item.label||item.value,value:item.value||item.label});});},_suggest:function _suggest(items){var ul=this.menu.element.empty();this._renderMenu(ul,items);this.isNewMenu=true;this.menu.refresh();// Size and position menu\nul.show();this._resizeMenu();ul.position($.extend({of:this.element},this.options.position));if(this.options.autoFocus){this.menu.next();}// Listen for interactions outside of the widget (#6642)\nthis._on(this.document,{mousedown:\"_closeOnClickOutside\"});},_resizeMenu:function _resizeMenu(){var ul=this.menu.element;ul.outerWidth(Math.max(// Firefox wraps long text (possibly a rounding bug)\n// so we add 1px to avoid the wrapping (#7513)\nul.width(\"\").outerWidth()+1,this.element.outerWidth()));},_renderMenu:function _renderMenu(ul,items){var that=this;$.each(items,function(index,item){that._renderItemData(ul,item);});},_renderItemData:function _renderItemData(ul,item){return this._renderItem(ul,item).data(\"ui-autocomplete-item\",item);},_renderItem:function _renderItem(ul,item){return $(\"<li>\").append($(\"<div>\").text(item.label)).appendTo(ul);},_move:function _move(direction,event){if(!this.menu.element.is(\":visible\")){this.search(null,event);return;}if(this.menu.isFirstItem()&&/^previous/.test(direction)||this.menu.isLastItem()&&/^next/.test(direction)){if(!this.isMultiLine){this._value(this.term);}this.menu.blur();return;}this.menu[direction](event);},widget:function widget(){return this.menu.element;},_value:function _value(){return this.valueMethod.apply(this.element,arguments);},_keyEvent:function _keyEvent(keyEvent,event){if(!this.isMultiLine||this.menu.element.is(\":visible\")){this._move(keyEvent,event);// Prevents moving cursor to beginning/end of the text field in some browsers\nevent.preventDefault();}},// Support: Chrome <=50\n// We should be able to just use this.element.prop( \"isContentEditable\" )\n// but hidden elements always report false in Chrome.\n// https://code.google.com/p/chromium/issues/detail?id=313082\n_isContentEditable:function _isContentEditable(element){if(!element.length){return false;}var editable=element.prop(\"contentEditable\");if(editable===\"inherit\"){return this._isContentEditable(element.parent());}return editable===\"true\";}});$.extend($.ui.autocomplete,{escapeRegex:function escapeRegex(value){return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g,\"\\\\$&\");},filter:function filter(array,term){var matcher=new RegExp($.ui.autocomplete.escapeRegex(term),\"i\");return $.grep(array,function(value){return matcher.test(value.label||value.value||value);});}});// Live region extension, adding a `messages` option\n// NOTE: This is an experimental API. We are still investigating\n// a full solution for string manipulation and internationalization.\n$.widget(\"ui.autocomplete\",$.ui.autocomplete,{options:{messages:{noResults:\"No search results.\",results:function results(amount){return amount+(amount>1?\" results are\":\" result is\")+\" available, use up and down arrow keys to navigate.\";}}},__response:function __response(content){var message;this._superApply(arguments);if(this.options.disabled||this.cancelSearch){return;}if(content&&content.length){message=this.options.messages.results(content.length);}else{message=this.options.messages.noResults;}clearTimeout(this.liveRegionTimer);this.liveRegionTimer=this._delay(function(){this.liveRegion.html($(\"<div>\").text(message));},100);}});var widgetsAutocomplete=$.ui.autocomplete;/*!\r\n * jQuery UI Controlgroup 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Controlgroup\n//>>group: Widgets\n//>>description: Visually groups form control widgets\n//>>docs: http://api.jqueryui.com/controlgroup/\n//>>demos: http://jqueryui.com/controlgroup/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/controlgroup.css\n//>>css.theme: ../../themes/base/theme.css\nvar controlgroupCornerRegex=/ui-corner-([a-z]){2,6}/g;var widgetsControlgroup=$.widget(\"ui.controlgroup\",{version:\"1.13.1\",defaultElement:\"<div>\",options:{direction:\"horizontal\",disabled:null,onlyVisible:true,items:{\"button\":\"input[type=button], input[type=submit], input[type=reset], button, a\",\"controlgroupLabel\":\".ui-controlgroup-label\",\"checkboxradio\":\"input[type='checkbox'], input[type='radio']\",\"selectmenu\":\"select\",\"spinner\":\".ui-spinner-input\"}},_create:function _create(){this._enhance();},// To support the enhanced option in jQuery Mobile, we isolate DOM manipulation\n_enhance:function _enhance(){this.element.attr(\"role\",\"toolbar\");this.refresh();},_destroy:function _destroy(){this._callChildMethod(\"destroy\");this.childWidgets.removeData(\"ui-controlgroup-data\");this.element.removeAttr(\"role\");if(this.options.items.controlgroupLabel){this.element.find(this.options.items.controlgroupLabel).find(\".ui-controlgroup-label-contents\").contents().unwrap();}},_initWidgets:function _initWidgets(){var that=this,childWidgets=[];// First we iterate over each of the items options\n$.each(this.options.items,function(widget,selector){var labels;var options={};// Make sure the widget has a selector set\nif(!selector){return;}if(widget===\"controlgroupLabel\"){labels=that.element.find(selector);labels.each(function(){var element=$(this);if(element.children(\".ui-controlgroup-label-contents\").length){return;}element.contents().wrapAll(\"<span class='ui-controlgroup-label-contents'></span>\");});that._addClass(labels,null,\"ui-widget ui-widget-content ui-state-default\");childWidgets=childWidgets.concat(labels.get());return;}// Make sure the widget actually exists\nif(!$.fn[widget]){return;}// We assume everything is in the middle to start because we can't determine\n// first / last elements until all enhancments are done.\nif(that[\"_\"+widget+\"Options\"]){options=that[\"_\"+widget+\"Options\"](\"middle\");}else{options={classes:{}};}// Find instances of this widget inside controlgroup and init them\nthat.element.find(selector).each(function(){var element=$(this);var instance=element[widget](\"instance\");// We need to clone the default options for this type of widget to avoid\n// polluting the variable options which has a wider scope than a single widget.\nvar instanceOptions=$.widget.extend({},options);// If the button is the child of a spinner ignore it\n// TODO: Find a more generic solution\nif(widget===\"button\"&&element.parent(\".ui-spinner\").length){return;}// Create the widget if it doesn't exist\nif(!instance){instance=element[widget]()[widget](\"instance\");}if(instance){instanceOptions.classes=that._resolveClassesValues(instanceOptions.classes,instance);}element[widget](instanceOptions);// Store an instance of the controlgroup to be able to reference\n// from the outermost element for changing options and refresh\nvar widgetElement=element[widget](\"widget\");$.data(widgetElement[0],\"ui-controlgroup-data\",instance?instance:element[widget](\"instance\"));childWidgets.push(widgetElement[0]);});});this.childWidgets=$($.uniqueSort(childWidgets));this._addClass(this.childWidgets,\"ui-controlgroup-item\");},_callChildMethod:function _callChildMethod(method){this.childWidgets.each(function(){var element=$(this),data=element.data(\"ui-controlgroup-data\");if(data&&data[method]){data[method]();}});},_updateCornerClass:function _updateCornerClass(element,position){var remove=\"ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all\";var add=this._buildSimpleOptions(position,\"label\").classes.label;this._removeClass(element,null,remove);this._addClass(element,null,add);},_buildSimpleOptions:function _buildSimpleOptions(position,key){var direction=this.options.direction===\"vertical\";var result={classes:{}};result.classes[key]={\"middle\":\"\",\"first\":\"ui-corner-\"+(direction?\"top\":\"left\"),\"last\":\"ui-corner-\"+(direction?\"bottom\":\"right\"),\"only\":\"ui-corner-all\"}[position];return result;},_spinnerOptions:function _spinnerOptions(position){var options=this._buildSimpleOptions(position,\"ui-spinner\");options.classes[\"ui-spinner-up\"]=\"\";options.classes[\"ui-spinner-down\"]=\"\";return options;},_buttonOptions:function _buttonOptions(position){return this._buildSimpleOptions(position,\"ui-button\");},_checkboxradioOptions:function _checkboxradioOptions(position){return this._buildSimpleOptions(position,\"ui-checkboxradio-label\");},_selectmenuOptions:function _selectmenuOptions(position){var direction=this.options.direction===\"vertical\";return{width:direction?\"auto\":false,classes:{middle:{\"ui-selectmenu-button-open\":\"\",\"ui-selectmenu-button-closed\":\"\"},first:{\"ui-selectmenu-button-open\":\"ui-corner-\"+(direction?\"top\":\"tl\"),\"ui-selectmenu-button-closed\":\"ui-corner-\"+(direction?\"top\":\"left\")},last:{\"ui-selectmenu-button-open\":direction?\"\":\"ui-corner-tr\",\"ui-selectmenu-button-closed\":\"ui-corner-\"+(direction?\"bottom\":\"right\")},only:{\"ui-selectmenu-button-open\":\"ui-corner-top\",\"ui-selectmenu-button-closed\":\"ui-corner-all\"}}[position]};},_resolveClassesValues:function _resolveClassesValues(classes,instance){var result={};$.each(classes,function(key){var current=instance.options.classes[key]||\"\";current=String.prototype.trim.call(current.replace(controlgroupCornerRegex,\"\"));result[key]=(current+\" \"+classes[key]).replace(/\\s+/g,\" \");});return result;},_setOption:function _setOption(key,value){if(key===\"direction\"){this._removeClass(\"ui-controlgroup-\"+this.options.direction);}this._super(key,value);if(key===\"disabled\"){this._callChildMethod(value?\"disable\":\"enable\");return;}this.refresh();},refresh:function refresh(){var children,that=this;this._addClass(\"ui-controlgroup ui-controlgroup-\"+this.options.direction);if(this.options.direction===\"horizontal\"){this._addClass(null,\"ui-helper-clearfix\");}this._initWidgets();children=this.childWidgets;// We filter here because we need to track all childWidgets not just the visible ones\nif(this.options.onlyVisible){children=children.filter(\":visible\");}if(children.length){// We do this last because we need to make sure all enhancment is done\n// before determining first and last\n$.each([\"first\",\"last\"],function(index,value){var instance=children[value]().data(\"ui-controlgroup-data\");if(instance&&that[\"_\"+instance.widgetName+\"Options\"]){var options=that[\"_\"+instance.widgetName+\"Options\"](children.length===1?\"only\":value);options.classes=that._resolveClassesValues(options.classes,instance);instance.element[instance.widgetName](options);}else{that._updateCornerClass(children[value](),value);}});// Finally call the refresh method on each of the child widgets.\nthis._callChildMethod(\"refresh\");}}});/*!\r\n * jQuery UI Checkboxradio 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Checkboxradio\n//>>group: Widgets\n//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.\n//>>docs: http://api.jqueryui.com/checkboxradio/\n//>>demos: http://jqueryui.com/checkboxradio/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/button.css\n//>>css.structure: ../../themes/base/checkboxradio.css\n//>>css.theme: ../../themes/base/theme.css\n$.widget(\"ui.checkboxradio\",[$.ui.formResetMixin,{version:\"1.13.1\",options:{disabled:null,label:null,icon:true,classes:{\"ui-checkboxradio-label\":\"ui-corner-all\",\"ui-checkboxradio-icon\":\"ui-corner-all\"}},_getCreateOptions:function _getCreateOptions(){var disabled,labels;var that=this;var options=this._super()||{};// We read the type here, because it makes more sense to throw a element type error first,\n// rather then the error for lack of a label. Often if its the wrong type, it\n// won't have a label (e.g. calling on a div, btn, etc)\nthis._readType();labels=this.element.labels();// If there are multiple labels, use the last one\nthis.label=$(labels[labels.length-1]);if(!this.label.length){$.error(\"No label found for checkboxradio widget\");}this.originalLabel=\"\";// We need to get the label text but this may also need to make sure it does not contain the\n// input itself.\nthis.label.contents().not(this.element[0]).each(function(){// The label contents could be text, html, or a mix. We concat each element to get a\n// string representation of the label, without the input as part of it.\nthat.originalLabel+=this.nodeType===3?$(this).text():this.outerHTML;});// Set the label option if we found label text\nif(this.originalLabel){options.label=this.originalLabel;}disabled=this.element[0].disabled;if(disabled!=null){options.disabled=disabled;}return options;},_create:function _create(){var checked=this.element[0].checked;this._bindFormResetHandler();if(this.options.disabled==null){this.options.disabled=this.element[0].disabled;}this._setOption(\"disabled\",this.options.disabled);this._addClass(\"ui-checkboxradio\",\"ui-helper-hidden-accessible\");this._addClass(this.label,\"ui-checkboxradio-label\",\"ui-button ui-widget\");if(this.type===\"radio\"){this._addClass(this.label,\"ui-checkboxradio-radio-label\");}if(this.options.label&&this.options.label!==this.originalLabel){this._updateLabel();}else if(this.originalLabel){this.options.label=this.originalLabel;}this._enhance();if(checked){this._addClass(this.label,\"ui-checkboxradio-checked\",\"ui-state-active\");}this._on({change:\"_toggleClasses\",focus:function focus(){this._addClass(this.label,null,\"ui-state-focus ui-visual-focus\");},blur:function blur(){this._removeClass(this.label,null,\"ui-state-focus ui-visual-focus\");}});},_readType:function _readType(){var nodeName=this.element[0].nodeName.toLowerCase();this.type=this.element[0].type;if(nodeName!==\"input\"||!/radio|checkbox/.test(this.type)){$.error(\"Can't create checkboxradio on element.nodeName=\"+nodeName+\" and element.type=\"+this.type);}},// Support jQuery Mobile enhanced option\n_enhance:function _enhance(){this._updateIcon(this.element[0].checked);},widget:function widget(){return this.label;},_getRadioGroup:function _getRadioGroup(){var group;var name=this.element[0].name;var nameSelector=\"input[name='\"+$.escapeSelector(name)+\"']\";if(!name){return $([]);}if(this.form.length){group=$(this.form[0].elements).filter(nameSelector);}else{// Not inside a form, check all inputs that also are not inside a form\ngroup=$(nameSelector).filter(function(){return $(this)._form().length===0;});}return group.not(this.element);},_toggleClasses:function _toggleClasses(){var checked=this.element[0].checked;this._toggleClass(this.label,\"ui-checkboxradio-checked\",\"ui-state-active\",checked);if(this.options.icon&&this.type===\"checkbox\"){this._toggleClass(this.icon,null,\"ui-icon-check ui-state-checked\",checked)._toggleClass(this.icon,null,\"ui-icon-blank\",!checked);}if(this.type===\"radio\"){this._getRadioGroup().each(function(){var instance=$(this).checkboxradio(\"instance\");if(instance){instance._removeClass(instance.label,\"ui-checkboxradio-checked\",\"ui-state-active\");}});}},_destroy:function _destroy(){this._unbindFormResetHandler();if(this.icon){this.icon.remove();this.iconSpace.remove();}},_setOption:function _setOption(key,value){// We don't allow the value to be set to nothing\nif(key===\"label\"&&!value){return;}this._super(key,value);if(key===\"disabled\"){this._toggleClass(this.label,null,\"ui-state-disabled\",value);this.element[0].disabled=value;// Don't refresh when setting disabled\nreturn;}this.refresh();},_updateIcon:function _updateIcon(checked){var toAdd=\"ui-icon ui-icon-background \";if(this.options.icon){if(!this.icon){this.icon=$(\"<span>\");this.iconSpace=$(\"<span> </span>\");this._addClass(this.iconSpace,\"ui-checkboxradio-icon-space\");}if(this.type===\"checkbox\"){toAdd+=checked?\"ui-icon-check ui-state-checked\":\"ui-icon-blank\";this._removeClass(this.icon,null,checked?\"ui-icon-blank\":\"ui-icon-check\");}else{toAdd+=\"ui-icon-blank\";}this._addClass(this.icon,\"ui-checkboxradio-icon\",toAdd);if(!checked){this._removeClass(this.icon,null,\"ui-icon-check ui-state-checked\");}this.icon.prependTo(this.label).after(this.iconSpace);}else if(this.icon!==undefined){this.icon.remove();this.iconSpace.remove();delete this.icon;}},_updateLabel:function _updateLabel(){// Remove the contents of the label ( minus the icon, icon space, and input )\nvar contents=this.label.contents().not(this.element[0]);if(this.icon){contents=contents.not(this.icon[0]);}if(this.iconSpace){contents=contents.not(this.iconSpace[0]);}contents.remove();this.label.append(this.options.label);},refresh:function refresh(){var checked=this.element[0].checked,isDisabled=this.element[0].disabled;this._updateIcon(checked);this._toggleClass(this.label,\"ui-checkboxradio-checked\",\"ui-state-active\",checked);if(this.options.label!==null){this._updateLabel();}if(isDisabled!==this.options.disabled){this._setOptions({\"disabled\":isDisabled});}}}]);var widgetsCheckboxradio=$.ui.checkboxradio;/*!\r\n * jQuery UI Button 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Button\n//>>group: Widgets\n//>>description: Enhances a form with themeable buttons.\n//>>docs: http://api.jqueryui.com/button/\n//>>demos: http://jqueryui.com/button/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/button.css\n//>>css.theme: ../../themes/base/theme.css\n$.widget(\"ui.button\",{version:\"1.13.1\",defaultElement:\"<button>\",options:{classes:{\"ui-button\":\"ui-corner-all\"},disabled:null,icon:null,iconPosition:\"beginning\",label:null,showLabel:true},_getCreateOptions:function _getCreateOptions(){var disabled,// This is to support cases like in jQuery Mobile where the base widget does have\n// an implementation of _getCreateOptions\noptions=this._super()||{};this.isInput=this.element.is(\"input\");disabled=this.element[0].disabled;if(disabled!=null){options.disabled=disabled;}this.originalLabel=this.isInput?this.element.val():this.element.html();if(this.originalLabel){options.label=this.originalLabel;}return options;},_create:function _create(){if(!this.option.showLabel&!this.options.icon){this.options.showLabel=true;}// We have to check the option again here even though we did in _getCreateOptions,\n// because null may have been passed on init which would override what was set in\n// _getCreateOptions\nif(this.options.disabled==null){this.options.disabled=this.element[0].disabled||false;}this.hasTitle=!!this.element.attr(\"title\");// Check to see if the label needs to be set or if its already correct\nif(this.options.label&&this.options.label!==this.originalLabel){if(this.isInput){this.element.val(this.options.label);}else{this.element.html(this.options.label);}}this._addClass(\"ui-button\",\"ui-widget\");this._setOption(\"disabled\",this.options.disabled);this._enhance();if(this.element.is(\"a\")){this._on({\"keyup\":function keyup(event){if(event.keyCode===$.ui.keyCode.SPACE){event.preventDefault();// Support: PhantomJS <= 1.9, IE 8 Only\n// If a native click is available use it so we actually cause navigation\n// otherwise just trigger a click event\nif(this.element[0].click){this.element[0].click();}else{this.element.trigger(\"click\");}}}});}},_enhance:function _enhance(){if(!this.element.is(\"button\")){this.element.attr(\"role\",\"button\");}if(this.options.icon){this._updateIcon(\"icon\",this.options.icon);this._updateTooltip();}},_updateTooltip:function _updateTooltip(){this.title=this.element.attr(\"title\");if(!this.options.showLabel&&!this.title){this.element.attr(\"title\",this.options.label);}},_updateIcon:function _updateIcon(option,value){var icon=option!==\"iconPosition\",position=icon?this.options.iconPosition:value,displayBlock=position===\"top\"||position===\"bottom\";// Create icon\nif(!this.icon){this.icon=$(\"<span>\");this._addClass(this.icon,\"ui-button-icon\",\"ui-icon\");if(!this.options.showLabel){this._addClass(\"ui-button-icon-only\");}}else if(icon){// If we are updating the icon remove the old icon class\nthis._removeClass(this.icon,null,this.options.icon);}// If we are updating the icon add the new icon class\nif(icon){this._addClass(this.icon,null,value);}this._attachIcon(position);// If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove\n// the iconSpace if there is one.\nif(displayBlock){this._addClass(this.icon,null,\"ui-widget-icon-block\");if(this.iconSpace){this.iconSpace.remove();}}else{// Position is beginning or end so remove the ui-widget-icon-block class and add the\n// space if it does not exist\nif(!this.iconSpace){this.iconSpace=$(\"<span> </span>\");this._addClass(this.iconSpace,\"ui-button-icon-space\");}this._removeClass(this.icon,null,\"ui-wiget-icon-block\");this._attachIconSpace(position);}},_destroy:function _destroy(){this.element.removeAttr(\"role\");if(this.icon){this.icon.remove();}if(this.iconSpace){this.iconSpace.remove();}if(!this.hasTitle){this.element.removeAttr(\"title\");}},_attachIconSpace:function _attachIconSpace(iconPosition){this.icon[/^(?:end|bottom)/.test(iconPosition)?\"before\":\"after\"](this.iconSpace);},_attachIcon:function _attachIcon(iconPosition){this.element[/^(?:end|bottom)/.test(iconPosition)?\"append\":\"prepend\"](this.icon);},_setOptions:function _setOptions(options){var newShowLabel=options.showLabel===undefined?this.options.showLabel:options.showLabel,newIcon=options.icon===undefined?this.options.icon:options.icon;if(!newShowLabel&&!newIcon){options.showLabel=true;}this._super(options);},_setOption:function _setOption(key,value){if(key===\"icon\"){if(value){this._updateIcon(key,value);}else if(this.icon){this.icon.remove();if(this.iconSpace){this.iconSpace.remove();}}}if(key===\"iconPosition\"){this._updateIcon(key,value);}// Make sure we can't end up with a button that has neither text nor icon\nif(key===\"showLabel\"){this._toggleClass(\"ui-button-icon-only\",null,!value);this._updateTooltip();}if(key===\"label\"){if(this.isInput){this.element.val(value);}else{// If there is an icon, append it, else nothing then append the value\n// this avoids removal of the icon when setting label text\nthis.element.html(value);if(this.icon){this._attachIcon(this.options.iconPosition);this._attachIconSpace(this.options.iconPosition);}}}this._super(key,value);if(key===\"disabled\"){this._toggleClass(null,\"ui-state-disabled\",value);this.element[0].disabled=value;if(value){this.element.trigger(\"blur\");}}},refresh:function refresh(){// Make sure to only check disabled if its an element that supports this otherwise\n// check for the disabled class to determine state\nvar isDisabled=this.element.is(\"input, button\")?this.element[0].disabled:this.element.hasClass(\"ui-button-disabled\");if(isDisabled!==this.options.disabled){this._setOptions({disabled:isDisabled});}this._updateTooltip();}});// DEPRECATED\nif($.uiBackCompat!==false){// Text and Icons options\n$.widget(\"ui.button\",$.ui.button,{options:{text:true,icons:{primary:null,secondary:null}},_create:function _create(){if(this.options.showLabel&&!this.options.text){this.options.showLabel=this.options.text;}if(!this.options.showLabel&&this.options.text){this.options.text=this.options.showLabel;}if(!this.options.icon&&(this.options.icons.primary||this.options.icons.secondary)){if(this.options.icons.primary){this.options.icon=this.options.icons.primary;}else{this.options.icon=this.options.icons.secondary;this.options.iconPosition=\"end\";}}else if(this.options.icon){this.options.icons.primary=this.options.icon;}this._super();},_setOption:function _setOption(key,value){if(key===\"text\"){this._super(\"showLabel\",value);return;}if(key===\"showLabel\"){this.options.text=value;}if(key===\"icon\"){this.options.icons.primary=value;}if(key===\"icons\"){if(value.primary){this._super(\"icon\",value.primary);this._super(\"iconPosition\",\"beginning\");}else if(value.secondary){this._super(\"icon\",value.secondary);this._super(\"iconPosition\",\"end\");}}this._superApply(arguments);}});$.fn.button=function(orig){return function(options){var isMethodCall=typeof options===\"string\";var args=Array.prototype.slice.call(arguments,1);var returnValue=this;if(isMethodCall){// If this is an empty collection, we need to have the instance method\n// return undefined instead of the jQuery instance\nif(!this.length&&options===\"instance\"){returnValue=undefined;}else{this.each(function(){var methodValue;var type=$(this).attr(\"type\");var name=type!==\"checkbox\"&&type!==\"radio\"?\"button\":\"checkboxradio\";var instance=$.data(this,\"ui-\"+name);if(options===\"instance\"){returnValue=instance;return false;}if(!instance){return $.error(\"cannot call methods on button\"+\" prior to initialization; \"+\"attempted to call method '\"+options+\"'\");}if(typeof instance[options]!==\"function\"||options.charAt(0)===\"_\"){return $.error(\"no such method '\"+options+\"' for button\"+\" widget instance\");}methodValue=instance[options].apply(instance,args);if(methodValue!==instance&&methodValue!==undefined){returnValue=methodValue&&methodValue.jquery?returnValue.pushStack(methodValue.get()):methodValue;return false;}});}}else{// Allow multiple hashes to be passed on init\nif(args.length){options=$.widget.extend.apply(null,[options].concat(args));}this.each(function(){var type=$(this).attr(\"type\");var name=type!==\"checkbox\"&&type!==\"radio\"?\"button\":\"checkboxradio\";var instance=$.data(this,\"ui-\"+name);if(instance){instance.option(options||{});if(instance._init){instance._init();}}else{if(name===\"button\"){orig.call($(this),options);return;}$(this).checkboxradio($.extend({icon:false},options));}});}return returnValue;};}($.fn.button);$.fn.buttonset=function(){if(!$.ui.controlgroup){$.error(\"Controlgroup widget missing\");}if(arguments[0]===\"option\"&&arguments[1]===\"items\"&&arguments[2]){return this.controlgroup.apply(this,[arguments[0],\"items.button\",arguments[2]]);}if(arguments[0]===\"option\"&&arguments[1]===\"items\"){return this.controlgroup.apply(this,[arguments[0],\"items.button\"]);}if(_typeof(arguments[0])===\"object\"&&arguments[0].items){arguments[0].items={button:arguments[0].items};}return this.controlgroup.apply(this,arguments);};}var widgetsButton=$.ui.button;/* eslint-disable max-len, camelcase */ /*!\r\n * jQuery UI Datepicker 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Datepicker\n//>>group: Widgets\n//>>description: Displays a calendar from an input or inline for selecting dates.\n//>>docs: http://api.jqueryui.com/datepicker/\n//>>demos: http://jqueryui.com/datepicker/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/datepicker.css\n//>>css.theme: ../../themes/base/theme.css\n$.extend($.ui,{datepicker:{version:\"1.13.1\"}});var datepicker_instActive;function datepicker_getZindex(elem){var position,value;while(elem.length&&elem[0]!==document){// Ignore z-index if position is set to a value where z-index is ignored by the browser\n// This makes behavior of this function consistent across browsers\n// WebKit always returns auto if the element is positioned\nposition=elem.css(\"position\");if(position===\"absolute\"||position===\"relative\"||position===\"fixed\"){// IE returns 0 when zIndex is not specified\n// other browsers return a string\n// we ignore the case of nested elements with an explicit value of 0\n// <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\nvalue=parseInt(elem.css(\"zIndex\"),10);if(!isNaN(value)&&value!==0){return value;}}elem=elem.parent();}return 0;}/* Date picker manager.\r\n   Use the singleton instance of this class, $.datepicker, to interact with the date picker.\r\n   Settings for (groups of) date pickers are maintained in an instance object,\r\n   allowing multiple different settings on the same page. */function Datepicker(){this._curInst=null;// The current instance in use\nthis._keyEvent=false;// If the last event was a key event\nthis._disabledInputs=[];// List of date picker inputs that have been disabled\nthis._datepickerShowing=false;// True if the popup picker is showing , false if not\nthis._inDialog=false;// True if showing within a \"dialog\", false if not\nthis._mainDivId=\"ui-datepicker-div\";// The ID of the main datepicker division\nthis._inlineClass=\"ui-datepicker-inline\";// The name of the inline marker class\nthis._appendClass=\"ui-datepicker-append\";// The name of the append marker class\nthis._triggerClass=\"ui-datepicker-trigger\";// The name of the trigger marker class\nthis._dialogClass=\"ui-datepicker-dialog\";// The name of the dialog marker class\nthis._disableClass=\"ui-datepicker-disabled\";// The name of the disabled covering marker class\nthis._unselectableClass=\"ui-datepicker-unselectable\";// The name of the unselectable cell marker class\nthis._currentClass=\"ui-datepicker-current-day\";// The name of the current day marker class\nthis._dayOverClass=\"ui-datepicker-days-cell-over\";// The name of the day hover marker class\nthis.regional=[];// Available regional settings, indexed by language code\nthis.regional[\"\"]={// Default regional settings\ncloseText:\"Done\",// Display text for close link\nprevText:\"Prev\",// Display text for previous month link\nnextText:\"Next\",// Display text for next month link\ncurrentText:\"Today\",// Display text for current month link\nmonthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],// Names of months for drop-down and formatting\nmonthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],// For formatting\ndayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],// For formatting\ndayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],// For formatting\ndayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],// Column headings for days starting at Sunday\nweekHeader:\"Wk\",// Column header for week of the year\ndateFormat:\"mm/dd/yy\",// See format options on parseDate\nfirstDay:0,// The first day of the week, Sun = 0, Mon = 1, ...\nisRTL:false,// True if right-to-left language, false if left-to-right\nshowMonthAfterYear:false,// True if the year select precedes month, false for month then year\nyearSuffix:\"\",// Additional text to append to the year in the month headers,\nselectMonthLabel:\"Select month\",// Invisible label for month selector\nselectYearLabel:\"Select year\"// Invisible label for year selector\n};this._defaults={// Global defaults for all the date picker instances\nshowOn:\"focus\",// \"focus\" for popup on focus,\n// \"button\" for trigger button, or \"both\" for either\nshowAnim:\"fadeIn\",// Name of jQuery animation for popup\nshowOptions:{},// Options for enhanced animations\ndefaultDate:null,// Used when field is blank: actual date,\n// +/-number for offset from today, null for today\nappendText:\"\",// Display text following the input box, e.g. showing the format\nbuttonText:\"...\",// Text for trigger button\nbuttonImage:\"\",// URL for trigger button image\nbuttonImageOnly:false,// True if the image appears alone, false if it appears on a button\nhideIfNoPrevNext:false,// True to hide next/previous month links\n// if not applicable, false to just disable them\nnavigationAsDateFormat:false,// True if date formatting applied to prev/today/next links\ngotoCurrent:false,// True if today link goes back to current selection instead\nchangeMonth:false,// True if month can be selected directly, false if only prev/next\nchangeYear:false,// True if year can be selected directly, false if only prev/next\nyearRange:\"c-10:c+10\",// Range of years to display in drop-down,\n// either relative to today's year (-nn:+nn), relative to currently displayed year\n// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\nshowOtherMonths:false,// True to show dates in other months, false to leave blank\nselectOtherMonths:false,// True to allow selection of dates in other months, false for unselectable\nshowWeek:false,// True to show week of the year, false to not show it\ncalculateWeek:this.iso8601Week,// How to calculate the week of the year,\n// takes a Date and returns the number of the week for it\nshortYearCutoff:\"+10\",// Short year values < this are in the current century,\n// > this are in the previous century,\n// string value starting with \"+\" for current year + value\nminDate:null,// The earliest selectable date, or null for no limit\nmaxDate:null,// The latest selectable date, or null for no limit\nduration:\"fast\",// Duration of display/closure\nbeforeShowDay:null,// Function that takes a date and returns an array with\n// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or \"\",\n// [2] = cell title (optional), e.g. $.datepicker.noWeekends\nbeforeShow:null,// Function that takes an input field and\n// returns a set of custom settings for the date picker\nonSelect:null,// Define a callback function when a date is selected\nonChangeMonthYear:null,// Define a callback function when the month or year is changed\nonClose:null,// Define a callback function when the datepicker is closed\nonUpdateDatepicker:null,// Define a callback function when the datepicker is updated\nnumberOfMonths:1,// Number of months to show at a time\nshowCurrentAtPos:0,// The position in multipe months at which to show the current month (starting at 0)\nstepMonths:1,// Number of months to step back/forward\nstepBigMonths:12,// Number of months to step back/forward for the big links\naltField:\"\",// Selector for an alternate field to store selected dates into\naltFormat:\"\",// The date format to use for the alternate field\nconstrainInput:true,// The input is constrained by the current date format\nshowButtonPanel:false,// True to show button panel, false to not show it\nautoSize:false,// True to size the input for the date format, false to leave as is\ndisabled:false// The initial disabled state\n};$.extend(this._defaults,this.regional[\"\"]);this.regional.en=$.extend(true,{},this.regional[\"\"]);this.regional[\"en-US\"]=$.extend(true,{},this.regional.en);this.dpDiv=datepicker_bindHover($(\"<div id='\"+this._mainDivId+\"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"));}$.extend(Datepicker.prototype,{/* Class name added to elements to indicate already configured with a date picker. */markerClassName:\"hasDatepicker\",//Keep track of the maximum number of rows displayed (see #7043)\nmaxRows:4,// TODO rename to \"widget\" when switching to widget factory\n_widgetDatepicker:function _widgetDatepicker(){return this.dpDiv;},/* Override the default settings for all instances of the date picker.\r\n\t * @param  settings  object - the new settings to use as defaults (anonymous object)\r\n\t * @return the manager object\r\n\t */setDefaults:function setDefaults(settings){datepicker_extendRemove(this._defaults,settings||{});return this;},/* Attach the date picker to a jQuery selection.\r\n\t * @param  target\telement - the target input field or division or span\r\n\t * @param  settings  object - the new settings to use for this date picker instance (anonymous)\r\n\t */_attachDatepicker:function _attachDatepicker(target,settings){var nodeName,inline,inst;nodeName=target.nodeName.toLowerCase();inline=nodeName===\"div\"||nodeName===\"span\";if(!target.id){this.uuid+=1;target.id=\"dp\"+this.uuid;}inst=this._newInst($(target),inline);inst.settings=$.extend({},settings||{});if(nodeName===\"input\"){this._connectDatepicker(target,inst);}else if(inline){this._inlineDatepicker(target,inst);}},/* Create a new instance object. */_newInst:function _newInst(target,inline){var id=target[0].id.replace(/([^A-Za-z0-9_\\-])/g,\"\\\\\\\\$1\");// escape jQuery meta chars\nreturn{id:id,input:target,// associated target\nselectedDay:0,selectedMonth:0,selectedYear:0,// current selection\ndrawMonth:0,drawYear:0,// month being drawn\ninline:inline,// is datepicker inline or not\ndpDiv:!inline?this.dpDiv:// presentation div\ndatepicker_bindHover($(\"<div class='\"+this._inlineClass+\" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"))};},/* Attach the date picker to an input field. */_connectDatepicker:function _connectDatepicker(target,inst){var input=$(target);inst.append=$([]);inst.trigger=$([]);if(input.hasClass(this.markerClassName)){return;}this._attachments(input,inst);input.addClass(this.markerClassName).on(\"keydown\",this._doKeyDown).on(\"keypress\",this._doKeyPress).on(\"keyup\",this._doKeyUp);this._autoSize(inst);$.data(target,\"datepicker\",inst);//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\nif(inst.settings.disabled){this._disableDatepicker(target);}},/* Make attachments based on settings. */_attachments:function _attachments(input,inst){var showOn,buttonText,buttonImage,appendText=this._get(inst,\"appendText\"),isRTL=this._get(inst,\"isRTL\");if(inst.append){inst.append.remove();}if(appendText){inst.append=$(\"<span>\").addClass(this._appendClass).text(appendText);input[isRTL?\"before\":\"after\"](inst.append);}input.off(\"focus\",this._showDatepicker);if(inst.trigger){inst.trigger.remove();}showOn=this._get(inst,\"showOn\");if(showOn===\"focus\"||showOn===\"both\"){// pop-up date picker when in the marked field\ninput.on(\"focus\",this._showDatepicker);}if(showOn===\"button\"||showOn===\"both\"){// pop-up date picker when button clicked\nbuttonText=this._get(inst,\"buttonText\");buttonImage=this._get(inst,\"buttonImage\");if(this._get(inst,\"buttonImageOnly\")){inst.trigger=$(\"<img>\").addClass(this._triggerClass).attr({src:buttonImage,alt:buttonText,title:buttonText});}else{inst.trigger=$(\"<button type='button'>\").addClass(this._triggerClass);if(buttonImage){inst.trigger.html($(\"<img>\").attr({src:buttonImage,alt:buttonText,title:buttonText}));}else{inst.trigger.text(buttonText);}}input[isRTL?\"before\":\"after\"](inst.trigger);inst.trigger.on(\"click\",function(){if($.datepicker._datepickerShowing&&$.datepicker._lastInput===input[0]){$.datepicker._hideDatepicker();}else if($.datepicker._datepickerShowing&&$.datepicker._lastInput!==input[0]){$.datepicker._hideDatepicker();$.datepicker._showDatepicker(input[0]);}else{$.datepicker._showDatepicker(input[0]);}return false;});}},/* Apply the maximum length for the date format. */_autoSize:function _autoSize(inst){if(this._get(inst,\"autoSize\")&&!inst.inline){var findMax,max,maxI,i,date=new Date(2009,12-1,20),// Ensure double digits\ndateFormat=this._get(inst,\"dateFormat\");if(dateFormat.match(/[DM]/)){findMax=function findMax(names){max=0;maxI=0;for(i=0;i<names.length;i++){if(names[i].length>max){max=names[i].length;maxI=i;}}return maxI;};date.setMonth(findMax(this._get(inst,dateFormat.match(/MM/)?\"monthNames\":\"monthNamesShort\")));date.setDate(findMax(this._get(inst,dateFormat.match(/DD/)?\"dayNames\":\"dayNamesShort\"))+20-date.getDay());}inst.input.attr(\"size\",this._formatDate(inst,date).length);}},/* Attach an inline date picker to a div. */_inlineDatepicker:function _inlineDatepicker(target,inst){var divSpan=$(target);if(divSpan.hasClass(this.markerClassName)){return;}divSpan.addClass(this.markerClassName).append(inst.dpDiv);$.data(target,\"datepicker\",inst);this._setDate(inst,this._getDefaultDate(inst),true);this._updateDatepicker(inst);this._updateAlternate(inst);//If disabled option is true, disable the datepicker before showing it (see ticket #5665)\nif(inst.settings.disabled){this._disableDatepicker(target);}// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\n// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\ninst.dpDiv.css(\"display\",\"block\");},/* Pop-up the date picker in a \"dialog\" box.\r\n\t * @param  input element - ignored\r\n\t * @param  date\tstring or Date - the initial date to display\r\n\t * @param  onSelect  function - the function to call when a date is selected\r\n\t * @param  settings  object - update the dialog date picker instance's settings (anonymous object)\r\n\t * @param  pos int[2] - coordinates for the dialog's position within the screen or\r\n\t *\t\t\t\t\tevent - with x/y coordinates or\r\n\t *\t\t\t\t\tleave empty for default (screen centre)\r\n\t * @return the manager object\r\n\t */_dialogDatepicker:function _dialogDatepicker(input,date,onSelect,settings,pos){var id,browserWidth,browserHeight,scrollX,scrollY,inst=this._dialogInst;// internal instance\nif(!inst){this.uuid+=1;id=\"dp\"+this.uuid;this._dialogInput=$(\"<input type='text' id='\"+id+\"' style='position: absolute; top: -100px; width: 0px;'/>\");this._dialogInput.on(\"keydown\",this._doKeyDown);$(\"body\").append(this._dialogInput);inst=this._dialogInst=this._newInst(this._dialogInput,false);inst.settings={};$.data(this._dialogInput[0],\"datepicker\",inst);}datepicker_extendRemove(inst.settings,settings||{});date=date&&date.constructor===Date?this._formatDate(inst,date):date;this._dialogInput.val(date);this._pos=pos?pos.length?pos:[pos.pageX,pos.pageY]:null;if(!this._pos){browserWidth=document.documentElement.clientWidth;browserHeight=document.documentElement.clientHeight;scrollX=document.documentElement.scrollLeft||document.body.scrollLeft;scrollY=document.documentElement.scrollTop||document.body.scrollTop;this._pos=// should use actual width/height below\n[browserWidth/2-100+scrollX,browserHeight/2-150+scrollY];}// Move input on screen for focus, but hidden behind dialog\nthis._dialogInput.css(\"left\",this._pos[0]+20+\"px\").css(\"top\",this._pos[1]+\"px\");inst.settings.onSelect=onSelect;this._inDialog=true;this.dpDiv.addClass(this._dialogClass);this._showDatepicker(this._dialogInput[0]);if($.blockUI){$.blockUI(this.dpDiv);}$.data(this._dialogInput[0],\"datepicker\",inst);return this;},/* Detach a datepicker from its control.\r\n\t * @param  target\telement - the target input field or division or span\r\n\t */_destroyDatepicker:function _destroyDatepicker(target){var nodeName,$target=$(target),inst=$.data(target,\"datepicker\");if(!$target.hasClass(this.markerClassName)){return;}nodeName=target.nodeName.toLowerCase();$.removeData(target,\"datepicker\");if(nodeName===\"input\"){inst.append.remove();inst.trigger.remove();$target.removeClass(this.markerClassName).off(\"focus\",this._showDatepicker).off(\"keydown\",this._doKeyDown).off(\"keypress\",this._doKeyPress).off(\"keyup\",this._doKeyUp);}else if(nodeName===\"div\"||nodeName===\"span\"){$target.removeClass(this.markerClassName).empty();}if(datepicker_instActive===inst){datepicker_instActive=null;this._curInst=null;}},/* Enable the date picker to a jQuery selection.\r\n\t * @param  target\telement - the target input field or division or span\r\n\t */_enableDatepicker:function _enableDatepicker(target){var nodeName,inline,$target=$(target),inst=$.data(target,\"datepicker\");if(!$target.hasClass(this.markerClassName)){return;}nodeName=target.nodeName.toLowerCase();if(nodeName===\"input\"){target.disabled=false;inst.trigger.filter(\"button\").each(function(){this.disabled=false;}).end().filter(\"img\").css({opacity:\"1.0\",cursor:\"\"});}else if(nodeName===\"div\"||nodeName===\"span\"){inline=$target.children(\".\"+this._inlineClass);inline.children().removeClass(\"ui-state-disabled\");inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\",false);}this._disabledInputs=$.map(this._disabledInputs,// Delete entry\nfunction(value){return value===target?null:value;});},/* Disable the date picker to a jQuery selection.\r\n\t * @param  target\telement - the target input field or division or span\r\n\t */_disableDatepicker:function _disableDatepicker(target){var nodeName,inline,$target=$(target),inst=$.data(target,\"datepicker\");if(!$target.hasClass(this.markerClassName)){return;}nodeName=target.nodeName.toLowerCase();if(nodeName===\"input\"){target.disabled=true;inst.trigger.filter(\"button\").each(function(){this.disabled=true;}).end().filter(\"img\").css({opacity:\"0.5\",cursor:\"default\"});}else if(nodeName===\"div\"||nodeName===\"span\"){inline=$target.children(\".\"+this._inlineClass);inline.children().addClass(\"ui-state-disabled\");inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\",true);}this._disabledInputs=$.map(this._disabledInputs,// Delete entry\nfunction(value){return value===target?null:value;});this._disabledInputs[this._disabledInputs.length]=target;},/* Is the first field in a jQuery collection disabled as a datepicker?\r\n\t * @param  target\telement - the target input field or division or span\r\n\t * @return boolean - true if disabled, false if enabled\r\n\t */_isDisabledDatepicker:function _isDisabledDatepicker(target){if(!target){return false;}for(var i=0;i<this._disabledInputs.length;i++){if(this._disabledInputs[i]===target){return true;}}return false;},/* Retrieve the instance data for the target control.\r\n\t * @param  target  element - the target input field or division or span\r\n\t * @return  object - the associated instance data\r\n\t * @throws  error if a jQuery problem getting data\r\n\t */_getInst:function _getInst(target){try{return $.data(target,\"datepicker\");}catch(err){throw\"Missing instance data for this datepicker\";}},/* Update or retrieve the settings for a date picker attached to an input field or division.\r\n\t * @param  target  element - the target input field or division or span\r\n\t * @param  name\tobject - the new settings to update or\r\n\t *\t\t\t\tstring - the name of the setting to change or retrieve,\r\n\t *\t\t\t\twhen retrieving also \"all\" for all instance settings or\r\n\t *\t\t\t\t\"defaults\" for all global defaults\r\n\t * @param  value   any - the new value for the setting\r\n\t *\t\t\t\t(omit if above is an object or to retrieve a value)\r\n\t */_optionDatepicker:function _optionDatepicker(target,name,value){var settings,date,minDate,maxDate,inst=this._getInst(target);if(arguments.length===2&&typeof name===\"string\"){return name===\"defaults\"?$.extend({},$.datepicker._defaults):inst?name===\"all\"?$.extend({},inst.settings):this._get(inst,name):null;}settings=name||{};if(typeof name===\"string\"){settings={};settings[name]=value;}if(inst){if(this._curInst===inst){this._hideDatepicker();}date=this._getDateDatepicker(target,true);minDate=this._getMinMaxDate(inst,\"min\");maxDate=this._getMinMaxDate(inst,\"max\");datepicker_extendRemove(inst.settings,settings);// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\nif(minDate!==null&&settings.dateFormat!==undefined&&settings.minDate===undefined){inst.settings.minDate=this._formatDate(inst,minDate);}if(maxDate!==null&&settings.dateFormat!==undefined&&settings.maxDate===undefined){inst.settings.maxDate=this._formatDate(inst,maxDate);}if(\"disabled\"in settings){if(settings.disabled){this._disableDatepicker(target);}else{this._enableDatepicker(target);}}this._attachments($(target),inst);this._autoSize(inst);this._setDate(inst,date);this._updateAlternate(inst);this._updateDatepicker(inst);}},// Change method deprecated\n_changeDatepicker:function _changeDatepicker(target,name,value){this._optionDatepicker(target,name,value);},/* Redraw the date picker attached to an input field or division.\r\n\t * @param  target  element - the target input field or division or span\r\n\t */_refreshDatepicker:function _refreshDatepicker(target){var inst=this._getInst(target);if(inst){this._updateDatepicker(inst);}},/* Set the dates for a jQuery selection.\r\n\t * @param  target element - the target input field or division or span\r\n\t * @param  date\tDate - the new date\r\n\t */_setDateDatepicker:function _setDateDatepicker(target,date){var inst=this._getInst(target);if(inst){this._setDate(inst,date);this._updateDatepicker(inst);this._updateAlternate(inst);}},/* Get the date(s) for the first entry in a jQuery selection.\r\n\t * @param  target element - the target input field or division or span\r\n\t * @param  noDefault boolean - true if no default date is to be used\r\n\t * @return Date - the current date\r\n\t */_getDateDatepicker:function _getDateDatepicker(target,noDefault){var inst=this._getInst(target);if(inst&&!inst.inline){this._setDateFromField(inst,noDefault);}return inst?this._getDate(inst):null;},/* Handle keystrokes. */_doKeyDown:function _doKeyDown(event){var onSelect,dateStr,sel,inst=$.datepicker._getInst(event.target),handled=true,isRTL=inst.dpDiv.is(\".ui-datepicker-rtl\");inst._keyEvent=true;if($.datepicker._datepickerShowing){switch(event.keyCode){case 9:$.datepicker._hideDatepicker();handled=false;break;// hide on tab out\ncase 13:sel=$(\"td.\"+$.datepicker._dayOverClass+\":not(.\"+$.datepicker._currentClass+\")\",inst.dpDiv);if(sel[0]){$.datepicker._selectDay(event.target,inst.selectedMonth,inst.selectedYear,sel[0]);}onSelect=$.datepicker._get(inst,\"onSelect\");if(onSelect){dateStr=$.datepicker._formatDate(inst);// Trigger custom callback\nonSelect.apply(inst.input?inst.input[0]:null,[dateStr,inst]);}else{$.datepicker._hideDatepicker();}return false;// don't submit the form\ncase 27:$.datepicker._hideDatepicker();break;// hide on escape\ncase 33:$.datepicker._adjustDate(event.target,event.ctrlKey?-$.datepicker._get(inst,\"stepBigMonths\"):-$.datepicker._get(inst,\"stepMonths\"),\"M\");break;// previous month/year on page up/+ ctrl\ncase 34:$.datepicker._adjustDate(event.target,event.ctrlKey?+$.datepicker._get(inst,\"stepBigMonths\"):+$.datepicker._get(inst,\"stepMonths\"),\"M\");break;// next month/year on page down/+ ctrl\ncase 35:if(event.ctrlKey||event.metaKey){$.datepicker._clearDate(event.target);}handled=event.ctrlKey||event.metaKey;break;// clear on ctrl or command +end\ncase 36:if(event.ctrlKey||event.metaKey){$.datepicker._gotoToday(event.target);}handled=event.ctrlKey||event.metaKey;break;// current on ctrl or command +home\ncase 37:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,isRTL?+1:-1,\"D\");}handled=event.ctrlKey||event.metaKey;// -1 day on ctrl or command +left\nif(event.originalEvent.altKey){$.datepicker._adjustDate(event.target,event.ctrlKey?-$.datepicker._get(inst,\"stepBigMonths\"):-$.datepicker._get(inst,\"stepMonths\"),\"M\");}// next month/year on alt +left on Mac\nbreak;case 38:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,-7,\"D\");}handled=event.ctrlKey||event.metaKey;break;// -1 week on ctrl or command +up\ncase 39:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,isRTL?-1:+1,\"D\");}handled=event.ctrlKey||event.metaKey;// +1 day on ctrl or command +right\nif(event.originalEvent.altKey){$.datepicker._adjustDate(event.target,event.ctrlKey?+$.datepicker._get(inst,\"stepBigMonths\"):+$.datepicker._get(inst,\"stepMonths\"),\"M\");}// next month/year on alt +right\nbreak;case 40:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,+7,\"D\");}handled=event.ctrlKey||event.metaKey;break;// +1 week on ctrl or command +down\ndefault:handled=false;}}else if(event.keyCode===36&&event.ctrlKey){// display the date picker on ctrl+home\n$.datepicker._showDatepicker(this);}else{handled=false;}if(handled){event.preventDefault();event.stopPropagation();}},/* Filter entered characters - based on date format. */_doKeyPress:function _doKeyPress(event){var chars,chr,inst=$.datepicker._getInst(event.target);if($.datepicker._get(inst,\"constrainInput\")){chars=$.datepicker._possibleChars($.datepicker._get(inst,\"dateFormat\"));chr=String.fromCharCode(event.charCode==null?event.keyCode:event.charCode);return event.ctrlKey||event.metaKey||chr<\" \"||!chars||chars.indexOf(chr)>-1;}},/* Synchronise manual entry and field/alternate field. */_doKeyUp:function _doKeyUp(event){var date,inst=$.datepicker._getInst(event.target);if(inst.input.val()!==inst.lastVal){try{date=$.datepicker.parseDate($.datepicker._get(inst,\"dateFormat\"),inst.input?inst.input.val():null,$.datepicker._getFormatConfig(inst));if(date){// only if valid\n$.datepicker._setDateFromField(inst);$.datepicker._updateAlternate(inst);$.datepicker._updateDatepicker(inst);}}catch(err){}}return true;},/* Pop-up the date picker for a given input field.\r\n\t * If false returned from beforeShow event handler do not show.\r\n\t * @param  input  element - the input field attached to the date picker or\r\n\t *\t\t\t\t\tevent - if triggered by focus\r\n\t */_showDatepicker:function _showDatepicker(input){input=input.target||input;if(input.nodeName.toLowerCase()!==\"input\"){// find from button/image trigger\ninput=$(\"input\",input.parentNode)[0];}if($.datepicker._isDisabledDatepicker(input)||$.datepicker._lastInput===input){// already here\nreturn;}var inst,beforeShow,beforeShowSettings,isFixed,offset,showAnim,duration;inst=$.datepicker._getInst(input);if($.datepicker._curInst&&$.datepicker._curInst!==inst){$.datepicker._curInst.dpDiv.stop(true,true);if(inst&&$.datepicker._datepickerShowing){$.datepicker._hideDatepicker($.datepicker._curInst.input[0]);}}beforeShow=$.datepicker._get(inst,\"beforeShow\");beforeShowSettings=beforeShow?beforeShow.apply(input,[input,inst]):{};if(beforeShowSettings===false){return;}datepicker_extendRemove(inst.settings,beforeShowSettings);inst.lastVal=null;$.datepicker._lastInput=input;$.datepicker._setDateFromField(inst);if($.datepicker._inDialog){// hide cursor\ninput.value=\"\";}if(!$.datepicker._pos){// position below input\n$.datepicker._pos=$.datepicker._findPos(input);$.datepicker._pos[1]+=input.offsetHeight;// add the height\n}isFixed=false;$(input).parents().each(function(){isFixed|=$(this).css(\"position\")===\"fixed\";return!isFixed;});offset={left:$.datepicker._pos[0],top:$.datepicker._pos[1]};$.datepicker._pos=null;//to avoid flashes on Firefox\ninst.dpDiv.empty();// determine sizing offscreen\ninst.dpDiv.css({position:\"absolute\",display:\"block\",top:\"-1000px\"});$.datepicker._updateDatepicker(inst);// fix width for dynamic number of date pickers\n// and adjust position before showing\noffset=$.datepicker._checkOffset(inst,offset,isFixed);inst.dpDiv.css({position:$.datepicker._inDialog&&$.blockUI?\"static\":isFixed?\"fixed\":\"absolute\",display:\"none\",left:offset.left+\"px\",top:offset.top+\"px\"});if(!inst.inline){showAnim=$.datepicker._get(inst,\"showAnim\");duration=$.datepicker._get(inst,\"duration\");inst.dpDiv.css(\"z-index\",datepicker_getZindex($(input))+1);$.datepicker._datepickerShowing=true;if($.effects&&$.effects.effect[showAnim]){inst.dpDiv.show(showAnim,$.datepicker._get(inst,\"showOptions\"),duration);}else{inst.dpDiv[showAnim||\"show\"](showAnim?duration:null);}if($.datepicker._shouldFocusInput(inst)){inst.input.trigger(\"focus\");}$.datepicker._curInst=inst;}},/* Generate the date picker content. */_updateDatepicker:function _updateDatepicker(inst){this.maxRows=4;//Reset the max number of rows being displayed (see #7043)\ndatepicker_instActive=inst;// for delegate hover events\ninst.dpDiv.empty().append(this._generateHTML(inst));this._attachHandlers(inst);var origyearshtml,numMonths=this._getNumberOfMonths(inst),cols=numMonths[1],width=17,activeCell=inst.dpDiv.find(\".\"+this._dayOverClass+\" a\"),onUpdateDatepicker=$.datepicker._get(inst,\"onUpdateDatepicker\");if(activeCell.length>0){datepicker_handleMouseover.apply(activeCell.get(0));}inst.dpDiv.removeClass(\"ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4\").width(\"\");if(cols>1){inst.dpDiv.addClass(\"ui-datepicker-multi-\"+cols).css(\"width\",width*cols+\"em\");}inst.dpDiv[(numMonths[0]!==1||numMonths[1]!==1?\"add\":\"remove\")+\"Class\"](\"ui-datepicker-multi\");inst.dpDiv[(this._get(inst,\"isRTL\")?\"add\":\"remove\")+\"Class\"](\"ui-datepicker-rtl\");if(inst===$.datepicker._curInst&&$.datepicker._datepickerShowing&&$.datepicker._shouldFocusInput(inst)){inst.input.trigger(\"focus\");}// Deffered render of the years select (to avoid flashes on Firefox)\nif(inst.yearshtml){origyearshtml=inst.yearshtml;setTimeout(function(){//assure that inst.yearshtml didn't change.\nif(origyearshtml===inst.yearshtml&&inst.yearshtml){inst.dpDiv.find(\"select.ui-datepicker-year\").first().replaceWith(inst.yearshtml);}origyearshtml=inst.yearshtml=null;},0);}if(onUpdateDatepicker){onUpdateDatepicker.apply(inst.input?inst.input[0]:null,[inst]);}},// #6694 - don't focus the input if it's already focused\n// this breaks the change event in IE\n// Support: IE and jQuery <1.9\n_shouldFocusInput:function _shouldFocusInput(inst){return inst.input&&inst.input.is(\":visible\")&&!inst.input.is(\":disabled\")&&!inst.input.is(\":focus\");},/* Check positioning to remain on screen. */_checkOffset:function _checkOffset(inst,offset,isFixed){var dpWidth=inst.dpDiv.outerWidth(),dpHeight=inst.dpDiv.outerHeight(),inputWidth=inst.input?inst.input.outerWidth():0,inputHeight=inst.input?inst.input.outerHeight():0,viewWidth=document.documentElement.clientWidth+(isFixed?0:$(document).scrollLeft()),viewHeight=document.documentElement.clientHeight+(isFixed?0:$(document).scrollTop());offset.left-=this._get(inst,\"isRTL\")?dpWidth-inputWidth:0;offset.left-=isFixed&&offset.left===inst.input.offset().left?$(document).scrollLeft():0;offset.top-=isFixed&&offset.top===inst.input.offset().top+inputHeight?$(document).scrollTop():0;// Now check if datepicker is showing outside window viewport - move to a better place if so.\noffset.left-=Math.min(offset.left,offset.left+dpWidth>viewWidth&&viewWidth>dpWidth?Math.abs(offset.left+dpWidth-viewWidth):0);offset.top-=Math.min(offset.top,offset.top+dpHeight>viewHeight&&viewHeight>dpHeight?Math.abs(dpHeight+inputHeight):0);return offset;},/* Find an object's position on the screen. */_findPos:function _findPos(obj){var position,inst=this._getInst(obj),isRTL=this._get(inst,\"isRTL\");while(obj&&(obj.type===\"hidden\"||obj.nodeType!==1||$.expr.pseudos.hidden(obj))){obj=obj[isRTL?\"previousSibling\":\"nextSibling\"];}position=$(obj).offset();return[position.left,position.top];},/* Hide the date picker from view.\r\n\t * @param  input  element - the input field attached to the date picker\r\n\t */_hideDatepicker:function _hideDatepicker(input){var showAnim,duration,postProcess,onClose,inst=this._curInst;if(!inst||input&&inst!==$.data(input,\"datepicker\")){return;}if(this._datepickerShowing){showAnim=this._get(inst,\"showAnim\");duration=this._get(inst,\"duration\");postProcess=function postProcess(){$.datepicker._tidyDialog(inst);};// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\nif($.effects&&($.effects.effect[showAnim]||$.effects[showAnim])){inst.dpDiv.hide(showAnim,$.datepicker._get(inst,\"showOptions\"),duration,postProcess);}else{inst.dpDiv[showAnim===\"slideDown\"?\"slideUp\":showAnim===\"fadeIn\"?\"fadeOut\":\"hide\"](showAnim?duration:null,postProcess);}if(!showAnim){postProcess();}this._datepickerShowing=false;onClose=this._get(inst,\"onClose\");if(onClose){onClose.apply(inst.input?inst.input[0]:null,[inst.input?inst.input.val():\"\",inst]);}this._lastInput=null;if(this._inDialog){this._dialogInput.css({position:\"absolute\",left:\"0\",top:\"-100px\"});if($.blockUI){$.unblockUI();$(\"body\").append(this.dpDiv);}}this._inDialog=false;}},/* Tidy up after a dialog display. */_tidyDialog:function _tidyDialog(inst){inst.dpDiv.removeClass(this._dialogClass).off(\".ui-datepicker-calendar\");},/* Close date picker if clicked elsewhere. */_checkExternalClick:function _checkExternalClick(event){if(!$.datepicker._curInst){return;}var $target=$(event.target),inst=$.datepicker._getInst($target[0]);if($target[0].id!==$.datepicker._mainDivId&&$target.parents(\"#\"+$.datepicker._mainDivId).length===0&&!$target.hasClass($.datepicker.markerClassName)&&!$target.closest(\".\"+$.datepicker._triggerClass).length&&$.datepicker._datepickerShowing&&!($.datepicker._inDialog&&$.blockUI)||$target.hasClass($.datepicker.markerClassName)&&$.datepicker._curInst!==inst){$.datepicker._hideDatepicker();}},/* Adjust one of the date sub-fields. */_adjustDate:function _adjustDate(id,offset,period){var target=$(id),inst=this._getInst(target[0]);if(this._isDisabledDatepicker(target[0])){return;}this._adjustInstDate(inst,offset,period);this._updateDatepicker(inst);},/* Action for current link. */_gotoToday:function _gotoToday(id){var date,target=$(id),inst=this._getInst(target[0]);if(this._get(inst,\"gotoCurrent\")&&inst.currentDay){inst.selectedDay=inst.currentDay;inst.drawMonth=inst.selectedMonth=inst.currentMonth;inst.drawYear=inst.selectedYear=inst.currentYear;}else{date=new Date();inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();}this._notifyChange(inst);this._adjustDate(target);},/* Action for selecting a new month/year. */_selectMonthYear:function _selectMonthYear(id,select,period){var target=$(id),inst=this._getInst(target[0]);inst[\"selected\"+(period===\"M\"?\"Month\":\"Year\")]=inst[\"draw\"+(period===\"M\"?\"Month\":\"Year\")]=parseInt(select.options[select.selectedIndex].value,10);this._notifyChange(inst);this._adjustDate(target);},/* Action for selecting a day. */_selectDay:function _selectDay(id,month,year,td){var inst,target=$(id);if($(td).hasClass(this._unselectableClass)||this._isDisabledDatepicker(target[0])){return;}inst=this._getInst(target[0]);inst.selectedDay=inst.currentDay=parseInt($(\"a\",td).attr(\"data-date\"));inst.selectedMonth=inst.currentMonth=month;inst.selectedYear=inst.currentYear=year;this._selectDate(id,this._formatDate(inst,inst.currentDay,inst.currentMonth,inst.currentYear));},/* Erase the input field and hide the date picker. */_clearDate:function _clearDate(id){var target=$(id);this._selectDate(target,\"\");},/* Update the input field with the selected date. */_selectDate:function _selectDate(id,dateStr){var onSelect,target=$(id),inst=this._getInst(target[0]);dateStr=dateStr!=null?dateStr:this._formatDate(inst);if(inst.input){inst.input.val(dateStr);}this._updateAlternate(inst);onSelect=this._get(inst,\"onSelect\");if(onSelect){onSelect.apply(inst.input?inst.input[0]:null,[dateStr,inst]);// trigger custom callback\n}else if(inst.input){inst.input.trigger(\"change\");// fire the change event\n}if(inst.inline){this._updateDatepicker(inst);}else{this._hideDatepicker();this._lastInput=inst.input[0];if(_typeof(inst.input[0])!==\"object\"){inst.input.trigger(\"focus\");// restore focus\n}this._lastInput=null;}},/* Update any alternate field to synchronise with the main field. */_updateAlternate:function _updateAlternate(inst){var altFormat,date,dateStr,altField=this._get(inst,\"altField\");if(altField){// update alternate field too\naltFormat=this._get(inst,\"altFormat\")||this._get(inst,\"dateFormat\");date=this._getDate(inst);dateStr=this.formatDate(altFormat,date,this._getFormatConfig(inst));$(document).find(altField).val(dateStr);}},/* Set as beforeShowDay function to prevent selection of weekends.\r\n\t * @param  date  Date - the date to customise\r\n\t * @return [boolean, string] - is this date selectable?, what is its CSS class?\r\n\t */noWeekends:function noWeekends(date){var day=date.getDay();return[day>0&&day<6,\"\"];},/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\r\n\t * @param  date  Date - the date to get the week for\r\n\t * @return  number - the number of the week within the year that contains this date\r\n\t */iso8601Week:function iso8601Week(date){var time,checkDate=new Date(date.getTime());// Find Thursday of this week starting on Monday\ncheckDate.setDate(checkDate.getDate()+4-(checkDate.getDay()||7));time=checkDate.getTime();checkDate.setMonth(0);// Compare with Jan 1\ncheckDate.setDate(1);return Math.floor(Math.round((time-checkDate)/86400000)/7)+1;},/* Parse a string value into a date object.\r\n\t * See formatDate below for the possible formats.\r\n\t *\r\n\t * @param  format string - the expected format of the date\r\n\t * @param  value string - the date in the above format\r\n\t * @param  settings Object - attributes include:\r\n\t *\t\t\t\t\tshortYearCutoff  number - the cutoff year for determining the century (optional)\r\n\t *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\r\n\t *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\r\n\t *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\r\n\t *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\r\n\t * @return  Date - the extracted date value or null if value is blank\r\n\t */parseDate:function parseDate(format,value,settings){if(format==null||value==null){throw\"Invalid arguments\";}value=_typeof(value)===\"object\"?value.toString():value+\"\";if(value===\"\"){return null;}var iFormat,dim,extra,iValue=0,shortYearCutoffTemp=(settings?settings.shortYearCutoff:null)||this._defaults.shortYearCutoff,shortYearCutoff=typeof shortYearCutoffTemp!==\"string\"?shortYearCutoffTemp:new Date().getFullYear()%100+parseInt(shortYearCutoffTemp,10),dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort,dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames,monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort,monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames,year=-1,month=-1,day=-1,doy=-1,literal=false,date,// Check whether a format character is doubled\nlookAhead=function lookAhead(match){var matches=iFormat+1<format.length&&format.charAt(iFormat+1)===match;if(matches){iFormat++;}return matches;},// Extract a number from the string value\ngetNumber=function getNumber(match){var isDoubled=lookAhead(match),size=match===\"@\"?14:match===\"!\"?20:match===\"y\"&&isDoubled?4:match===\"o\"?3:2,minSize=match===\"y\"?size:1,digits=new RegExp(\"^\\\\d{\"+minSize+\",\"+size+\"}\"),num=value.substring(iValue).match(digits);if(!num){throw\"Missing number at position \"+iValue;}iValue+=num[0].length;return parseInt(num[0],10);},// Extract a name from the string value and convert to an index\ngetName=function getName(match,shortNames,longNames){var index=-1,names=$.map(lookAhead(match)?longNames:shortNames,function(v,k){return[[k,v]];}).sort(function(a,b){return-(a[1].length-b[1].length);});$.each(names,function(i,pair){var name=pair[1];if(value.substr(iValue,name.length).toLowerCase()===name.toLowerCase()){index=pair[0];iValue+=name.length;return false;}});if(index!==-1){return index+1;}else{throw\"Unknown name at position \"+iValue;}},// Confirm that a literal character matches the string value\ncheckLiteral=function checkLiteral(){if(value.charAt(iValue)!==format.charAt(iFormat)){throw\"Unexpected literal at position \"+iValue;}iValue++;};for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)===\"'\"&&!lookAhead(\"'\")){literal=false;}else{checkLiteral();}}else{switch(format.charAt(iFormat)){case\"d\":day=getNumber(\"d\");break;case\"D\":getName(\"D\",dayNamesShort,dayNames);break;case\"o\":doy=getNumber(\"o\");break;case\"m\":month=getNumber(\"m\");break;case\"M\":month=getName(\"M\",monthNamesShort,monthNames);break;case\"y\":year=getNumber(\"y\");break;case\"@\":date=new Date(getNumber(\"@\"));year=date.getFullYear();month=date.getMonth()+1;day=date.getDate();break;case\"!\":date=new Date((getNumber(\"!\")-this._ticksTo1970)/10000);year=date.getFullYear();month=date.getMonth()+1;day=date.getDate();break;case\"'\":if(lookAhead(\"'\")){checkLiteral();}else{literal=true;}break;default:checkLiteral();}}}if(iValue<value.length){extra=value.substr(iValue);if(!/^\\s+/.test(extra)){throw\"Extra/unparsed characters found in date: \"+extra;}}if(year===-1){year=new Date().getFullYear();}else if(year<100){year+=new Date().getFullYear()-new Date().getFullYear()%100+(year<=shortYearCutoff?0:-100);}if(doy>-1){month=1;day=doy;do{dim=this._getDaysInMonth(year,month-1);if(day<=dim){break;}month++;day-=dim;}while(true);}date=this._daylightSavingAdjust(new Date(year,month-1,day));if(date.getFullYear()!==year||date.getMonth()+1!==month||date.getDate()!==day){throw\"Invalid date\";// E.g. 31/02/00\n}return date;},/* Standard date formats. */ATOM:\"yy-mm-dd\",// RFC 3339 (ISO 8601)\nCOOKIE:\"D, dd M yy\",ISO_8601:\"yy-mm-dd\",RFC_822:\"D, d M y\",RFC_850:\"DD, dd-M-y\",RFC_1036:\"D, d M y\",RFC_1123:\"D, d M yy\",RFC_2822:\"D, d M yy\",RSS:\"D, d M y\",// RFC 822\nTICKS:\"!\",TIMESTAMP:\"@\",W3C:\"yy-mm-dd\",// ISO 8601\n_ticksTo1970:((1970-1)*365+Math.floor(1970/4)-Math.floor(1970/100)+Math.floor(1970/400))*24*60*60*10000000,/* Format a date object into a string value.\r\n\t * The format can be combinations of the following:\r\n\t * d  - day of month (no leading zero)\r\n\t * dd - day of month (two digit)\r\n\t * o  - day of year (no leading zeros)\r\n\t * oo - day of year (three digit)\r\n\t * D  - day name short\r\n\t * DD - day name long\r\n\t * m  - month of year (no leading zero)\r\n\t * mm - month of year (two digit)\r\n\t * M  - month name short\r\n\t * MM - month name long\r\n\t * y  - year (two digit)\r\n\t * yy - year (four digit)\r\n\t * @ - Unix timestamp (ms since 01/01/1970)\r\n\t * ! - Windows ticks (100ns since 01/01/0001)\r\n\t * \"...\" - literal text\r\n\t * '' - single quote\r\n\t *\r\n\t * @param  format string - the desired format of the date\r\n\t * @param  date Date - the date value to format\r\n\t * @param  settings Object - attributes include:\r\n\t *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\r\n\t *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\r\n\t *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\r\n\t *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\r\n\t * @return  string - the date in the above format\r\n\t */formatDate:function formatDate(format,date,settings){if(!date){return\"\";}var iFormat,dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort,dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames,monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort,monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames,// Check whether a format character is doubled\nlookAhead=function lookAhead(match){var matches=iFormat+1<format.length&&format.charAt(iFormat+1)===match;if(matches){iFormat++;}return matches;},// Format a number, with leading zero if necessary\nformatNumber=function formatNumber(match,value,len){var num=\"\"+value;if(lookAhead(match)){while(num.length<len){num=\"0\"+num;}}return num;},// Format a name, short or long as requested\nformatName=function formatName(match,value,shortNames,longNames){return lookAhead(match)?longNames[value]:shortNames[value];},output=\"\",literal=false;if(date){for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)===\"'\"&&!lookAhead(\"'\")){literal=false;}else{output+=format.charAt(iFormat);}}else{switch(format.charAt(iFormat)){case\"d\":output+=formatNumber(\"d\",date.getDate(),2);break;case\"D\":output+=formatName(\"D\",date.getDay(),dayNamesShort,dayNames);break;case\"o\":output+=formatNumber(\"o\",Math.round((new Date(date.getFullYear(),date.getMonth(),date.getDate()).getTime()-new Date(date.getFullYear(),0,0).getTime())/86400000),3);break;case\"m\":output+=formatNumber(\"m\",date.getMonth()+1,2);break;case\"M\":output+=formatName(\"M\",date.getMonth(),monthNamesShort,monthNames);break;case\"y\":output+=lookAhead(\"y\")?date.getFullYear():(date.getFullYear()%100<10?\"0\":\"\")+date.getFullYear()%100;break;case\"@\":output+=date.getTime();break;case\"!\":output+=date.getTime()*10000+this._ticksTo1970;break;case\"'\":if(lookAhead(\"'\")){output+=\"'\";}else{literal=true;}break;default:output+=format.charAt(iFormat);}}}}return output;},/* Extract all possible characters from the date format. */_possibleChars:function _possibleChars(format){var iFormat,chars=\"\",literal=false,// Check whether a format character is doubled\nlookAhead=function lookAhead(match){var matches=iFormat+1<format.length&&format.charAt(iFormat+1)===match;if(matches){iFormat++;}return matches;};for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)===\"'\"&&!lookAhead(\"'\")){literal=false;}else{chars+=format.charAt(iFormat);}}else{switch(format.charAt(iFormat)){case\"d\":case\"m\":case\"y\":case\"@\":chars+=\"0123456789\";break;case\"D\":case\"M\":return null;// Accept anything\ncase\"'\":if(lookAhead(\"'\")){chars+=\"'\";}else{literal=true;}break;default:chars+=format.charAt(iFormat);}}}return chars;},/* Get a setting value, defaulting if necessary. */_get:function _get(inst,name){return inst.settings[name]!==undefined?inst.settings[name]:this._defaults[name];},/* Parse existing date and initialise date picker. */_setDateFromField:function _setDateFromField(inst,noDefault){if(inst.input.val()===inst.lastVal){return;}var dateFormat=this._get(inst,\"dateFormat\"),dates=inst.lastVal=inst.input?inst.input.val():null,defaultDate=this._getDefaultDate(inst),date=defaultDate,settings=this._getFormatConfig(inst);try{date=this.parseDate(dateFormat,dates,settings)||defaultDate;}catch(event){dates=noDefault?\"\":dates;}inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();inst.currentDay=dates?date.getDate():0;inst.currentMonth=dates?date.getMonth():0;inst.currentYear=dates?date.getFullYear():0;this._adjustInstDate(inst);},/* Retrieve the default date shown on opening. */_getDefaultDate:function _getDefaultDate(inst){return this._restrictMinMax(inst,this._determineDate(inst,this._get(inst,\"defaultDate\"),new Date()));},/* A date may be specified as an exact value or a relative one. */_determineDate:function _determineDate(inst,date,defaultDate){var offsetNumeric=function offsetNumeric(offset){var date=new Date();date.setDate(date.getDate()+offset);return date;},offsetString=function offsetString(offset){try{return $.datepicker.parseDate($.datepicker._get(inst,\"dateFormat\"),offset,$.datepicker._getFormatConfig(inst));}catch(e){// Ignore\n}var date=(offset.toLowerCase().match(/^c/)?$.datepicker._getDate(inst):null)||new Date(),year=date.getFullYear(),month=date.getMonth(),day=date.getDate(),pattern=/([+\\-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g,matches=pattern.exec(offset);while(matches){switch(matches[2]||\"d\"){case\"d\":case\"D\":day+=parseInt(matches[1],10);break;case\"w\":case\"W\":day+=parseInt(matches[1],10)*7;break;case\"m\":case\"M\":month+=parseInt(matches[1],10);day=Math.min(day,$.datepicker._getDaysInMonth(year,month));break;case\"y\":case\"Y\":year+=parseInt(matches[1],10);day=Math.min(day,$.datepicker._getDaysInMonth(year,month));break;}matches=pattern.exec(offset);}return new Date(year,month,day);},newDate=date==null||date===\"\"?defaultDate:typeof date===\"string\"?offsetString(date):typeof date===\"number\"?isNaN(date)?defaultDate:offsetNumeric(date):new Date(date.getTime());newDate=newDate&&newDate.toString()===\"Invalid Date\"?defaultDate:newDate;if(newDate){newDate.setHours(0);newDate.setMinutes(0);newDate.setSeconds(0);newDate.setMilliseconds(0);}return this._daylightSavingAdjust(newDate);},/* Handle switch to/from daylight saving.\r\n\t * Hours may be non-zero on daylight saving cut-over:\r\n\t * > 12 when midnight changeover, but then cannot generate\r\n\t * midnight datetime, so jump to 1AM, otherwise reset.\r\n\t * @param  date  (Date) the date to check\r\n\t * @return  (Date) the corrected date\r\n\t */_daylightSavingAdjust:function _daylightSavingAdjust(date){if(!date){return null;}date.setHours(date.getHours()>12?date.getHours()+2:0);return date;},/* Set the date(s) directly. */_setDate:function _setDate(inst,date,noChange){var clear=!date,origMonth=inst.selectedMonth,origYear=inst.selectedYear,newDate=this._restrictMinMax(inst,this._determineDate(inst,date,new Date()));inst.selectedDay=inst.currentDay=newDate.getDate();inst.drawMonth=inst.selectedMonth=inst.currentMonth=newDate.getMonth();inst.drawYear=inst.selectedYear=inst.currentYear=newDate.getFullYear();if((origMonth!==inst.selectedMonth||origYear!==inst.selectedYear)&&!noChange){this._notifyChange(inst);}this._adjustInstDate(inst);if(inst.input){inst.input.val(clear?\"\":this._formatDate(inst));}},/* Retrieve the date(s) directly. */_getDate:function _getDate(inst){var startDate=!inst.currentYear||inst.input&&inst.input.val()===\"\"?null:this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay));return startDate;},/* Attach the onxxx handlers.  These are declared statically so\r\n\t * they work with static code transformers like Caja.\r\n\t */_attachHandlers:function _attachHandlers(inst){var stepMonths=this._get(inst,\"stepMonths\"),id=\"#\"+inst.id.replace(/\\\\\\\\/g,\"\\\\\");inst.dpDiv.find(\"[data-handler]\").map(function(){var handler={prev:function prev(){$.datepicker._adjustDate(id,-stepMonths,\"M\");},next:function next(){$.datepicker._adjustDate(id,+stepMonths,\"M\");},hide:function hide(){$.datepicker._hideDatepicker();},today:function today(){$.datepicker._gotoToday(id);},selectDay:function selectDay(){$.datepicker._selectDay(id,+this.getAttribute(\"data-month\"),+this.getAttribute(\"data-year\"),this);return false;},selectMonth:function selectMonth(){$.datepicker._selectMonthYear(id,this,\"M\");return false;},selectYear:function selectYear(){$.datepicker._selectMonthYear(id,this,\"Y\");return false;}};$(this).on(this.getAttribute(\"data-event\"),handler[this.getAttribute(\"data-handler\")]);});},/* Generate the HTML for the current state of the date picker. */_generateHTML:function _generateHTML(inst){var maxDraw,prevText,prev,nextText,next,currentText,gotoDate,controls,buttonPanel,firstDay,showWeek,dayNames,dayNamesMin,monthNames,monthNamesShort,beforeShowDay,showOtherMonths,selectOtherMonths,defaultDate,html,dow,row,group,col,selectedDate,cornerClass,calender,thead,day,daysInMonth,leadDays,curRows,numRows,printDate,dRow,tbody,daySettings,otherMonth,unselectable,tempDate=new Date(),today=this._daylightSavingAdjust(new Date(tempDate.getFullYear(),tempDate.getMonth(),tempDate.getDate())),// clear time\nisRTL=this._get(inst,\"isRTL\"),showButtonPanel=this._get(inst,\"showButtonPanel\"),hideIfNoPrevNext=this._get(inst,\"hideIfNoPrevNext\"),navigationAsDateFormat=this._get(inst,\"navigationAsDateFormat\"),numMonths=this._getNumberOfMonths(inst),showCurrentAtPos=this._get(inst,\"showCurrentAtPos\"),stepMonths=this._get(inst,\"stepMonths\"),isMultiMonth=numMonths[0]!==1||numMonths[1]!==1,currentDate=this._daylightSavingAdjust(!inst.currentDay?new Date(9999,9,9):new Date(inst.currentYear,inst.currentMonth,inst.currentDay)),minDate=this._getMinMaxDate(inst,\"min\"),maxDate=this._getMinMaxDate(inst,\"max\"),drawMonth=inst.drawMonth-showCurrentAtPos,drawYear=inst.drawYear;if(drawMonth<0){drawMonth+=12;drawYear--;}if(maxDate){maxDraw=this._daylightSavingAdjust(new Date(maxDate.getFullYear(),maxDate.getMonth()-numMonths[0]*numMonths[1]+1,maxDate.getDate()));maxDraw=minDate&&maxDraw<minDate?minDate:maxDraw;while(this._daylightSavingAdjust(new Date(drawYear,drawMonth,1))>maxDraw){drawMonth--;if(drawMonth<0){drawMonth=11;drawYear--;}}}inst.drawMonth=drawMonth;inst.drawYear=drawYear;prevText=this._get(inst,\"prevText\");prevText=!navigationAsDateFormat?prevText:this.formatDate(prevText,this._daylightSavingAdjust(new Date(drawYear,drawMonth-stepMonths,1)),this._getFormatConfig(inst));if(this._canAdjustMonth(inst,-1,drawYear,drawMonth)){prev=$(\"<a>\").attr({\"class\":\"ui-datepicker-prev ui-corner-all\",\"data-handler\":\"prev\",\"data-event\":\"click\",title:prevText}).append($(\"<span>\").addClass(\"ui-icon ui-icon-circle-triangle-\"+(isRTL?\"e\":\"w\")).text(prevText))[0].outerHTML;}else if(hideIfNoPrevNext){prev=\"\";}else{prev=$(\"<a>\").attr({\"class\":\"ui-datepicker-prev ui-corner-all ui-state-disabled\",title:prevText}).append($(\"<span>\").addClass(\"ui-icon ui-icon-circle-triangle-\"+(isRTL?\"e\":\"w\")).text(prevText))[0].outerHTML;}nextText=this._get(inst,\"nextText\");nextText=!navigationAsDateFormat?nextText:this.formatDate(nextText,this._daylightSavingAdjust(new Date(drawYear,drawMonth+stepMonths,1)),this._getFormatConfig(inst));if(this._canAdjustMonth(inst,+1,drawYear,drawMonth)){next=$(\"<a>\").attr({\"class\":\"ui-datepicker-next ui-corner-all\",\"data-handler\":\"next\",\"data-event\":\"click\",title:nextText}).append($(\"<span>\").addClass(\"ui-icon ui-icon-circle-triangle-\"+(isRTL?\"w\":\"e\")).text(nextText))[0].outerHTML;}else if(hideIfNoPrevNext){next=\"\";}else{next=$(\"<a>\").attr({\"class\":\"ui-datepicker-next ui-corner-all ui-state-disabled\",title:nextText}).append($(\"<span>\").attr(\"class\",\"ui-icon ui-icon-circle-triangle-\"+(isRTL?\"w\":\"e\")).text(nextText))[0].outerHTML;}currentText=this._get(inst,\"currentText\");gotoDate=this._get(inst,\"gotoCurrent\")&&inst.currentDay?currentDate:today;currentText=!navigationAsDateFormat?currentText:this.formatDate(currentText,gotoDate,this._getFormatConfig(inst));controls=\"\";if(!inst.inline){controls=$(\"<button>\").attr({type:\"button\",\"class\":\"ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all\",\"data-handler\":\"hide\",\"data-event\":\"click\"}).text(this._get(inst,\"closeText\"))[0].outerHTML;}buttonPanel=\"\";if(showButtonPanel){buttonPanel=$(\"<div class='ui-datepicker-buttonpane ui-widget-content'>\").append(isRTL?controls:\"\").append(this._isInRange(inst,gotoDate)?$(\"<button>\").attr({type:\"button\",\"class\":\"ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all\",\"data-handler\":\"today\",\"data-event\":\"click\"}).text(currentText):\"\").append(isRTL?\"\":controls)[0].outerHTML;}firstDay=parseInt(this._get(inst,\"firstDay\"),10);firstDay=isNaN(firstDay)?0:firstDay;showWeek=this._get(inst,\"showWeek\");dayNames=this._get(inst,\"dayNames\");dayNamesMin=this._get(inst,\"dayNamesMin\");monthNames=this._get(inst,\"monthNames\");monthNamesShort=this._get(inst,\"monthNamesShort\");beforeShowDay=this._get(inst,\"beforeShowDay\");showOtherMonths=this._get(inst,\"showOtherMonths\");selectOtherMonths=this._get(inst,\"selectOtherMonths\");defaultDate=this._getDefaultDate(inst);html=\"\";for(row=0;row<numMonths[0];row++){group=\"\";this.maxRows=4;for(col=0;col<numMonths[1];col++){selectedDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,inst.selectedDay));cornerClass=\" ui-corner-all\";calender=\"\";if(isMultiMonth){calender+=\"<div class='ui-datepicker-group\";if(numMonths[1]>1){switch(col){case 0:calender+=\" ui-datepicker-group-first\";cornerClass=\" ui-corner-\"+(isRTL?\"right\":\"left\");break;case numMonths[1]-1:calender+=\" ui-datepicker-group-last\";cornerClass=\" ui-corner-\"+(isRTL?\"left\":\"right\");break;default:calender+=\" ui-datepicker-group-middle\";cornerClass=\"\";break;}}calender+=\"'>\";}calender+=\"<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix\"+cornerClass+\"'>\"+(/all|left/.test(cornerClass)&&row===0?isRTL?next:prev:\"\")+(/all|right/.test(cornerClass)&&row===0?isRTL?prev:next:\"\")+this._generateMonthYearHeader(inst,drawMonth,drawYear,minDate,maxDate,row>0||col>0,monthNames,monthNamesShort)+// draw month headers\n\"</div><table class='ui-datepicker-calendar'><thead>\"+\"<tr>\";thead=showWeek?\"<th class='ui-datepicker-week-col'>\"+this._get(inst,\"weekHeader\")+\"</th>\":\"\";for(dow=0;dow<7;dow++){// days of the week\nday=(dow+firstDay)%7;thead+=\"<th scope='col'\"+((dow+firstDay+6)%7>=5?\" class='ui-datepicker-week-end'\":\"\")+\">\"+\"<span title='\"+dayNames[day]+\"'>\"+dayNamesMin[day]+\"</span></th>\";}calender+=thead+\"</tr></thead><tbody>\";daysInMonth=this._getDaysInMonth(drawYear,drawMonth);if(drawYear===inst.selectedYear&&drawMonth===inst.selectedMonth){inst.selectedDay=Math.min(inst.selectedDay,daysInMonth);}leadDays=(this._getFirstDayOfMonth(drawYear,drawMonth)-firstDay+7)%7;curRows=Math.ceil((leadDays+daysInMonth)/7);// calculate the number of rows to generate\nnumRows=isMultiMonth?this.maxRows>curRows?this.maxRows:curRows:curRows;//If multiple months, use the higher number of rows (see #7043)\nthis.maxRows=numRows;printDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,1-leadDays));for(dRow=0;dRow<numRows;dRow++){// create date picker rows\ncalender+=\"<tr>\";tbody=!showWeek?\"\":\"<td class='ui-datepicker-week-col'>\"+this._get(inst,\"calculateWeek\")(printDate)+\"</td>\";for(dow=0;dow<7;dow++){// create date picker days\ndaySettings=beforeShowDay?beforeShowDay.apply(inst.input?inst.input[0]:null,[printDate]):[true,\"\"];otherMonth=printDate.getMonth()!==drawMonth;unselectable=otherMonth&&!selectOtherMonths||!daySettings[0]||minDate&&printDate<minDate||maxDate&&printDate>maxDate;tbody+=\"<td class='\"+((dow+firstDay+6)%7>=5?\" ui-datepicker-week-end\":\"\")+(// highlight weekends\notherMonth?\" ui-datepicker-other-month\":\"\")+(// highlight days from other months\nprintDate.getTime()===selectedDate.getTime()&&drawMonth===inst.selectedMonth&&inst._keyEvent||// user pressed key\ndefaultDate.getTime()===printDate.getTime()&&defaultDate.getTime()===selectedDate.getTime()?// or defaultDate is current printedDate and defaultDate is selectedDate\n\" \"+this._dayOverClass:\"\")+(// highlight selected day\nunselectable?\" \"+this._unselectableClass+\" ui-state-disabled\":\"\")+(// highlight unselectable days\notherMonth&&!showOtherMonths?\"\":\" \"+daySettings[1]+(// highlight custom dates\nprintDate.getTime()===currentDate.getTime()?\" \"+this._currentClass:\"\")+(// highlight selected day\nprintDate.getTime()===today.getTime()?\" ui-datepicker-today\":\"\"))+\"'\"+(// highlight today (if different)\n(!otherMonth||showOtherMonths)&&daySettings[2]?\" title='\"+daySettings[2].replace(/'/g,\"&#39;\")+\"'\":\"\")+(// cell title\nunselectable?\"\":\" data-handler='selectDay' data-event='click' data-month='\"+printDate.getMonth()+\"' data-year='\"+printDate.getFullYear()+\"'\")+\">\"+(// actions\notherMonth&&!showOtherMonths?\"&#xa0;\":// display for other months\nunselectable?\"<span class='ui-state-default'>\"+printDate.getDate()+\"</span>\":\"<a class='ui-state-default\"+(printDate.getTime()===today.getTime()?\" ui-state-highlight\":\"\")+(printDate.getTime()===currentDate.getTime()?\" ui-state-active\":\"\")+(// highlight selected day\notherMonth?\" ui-priority-secondary\":\"\")+// distinguish dates from other months\n\"' href='#' aria-current='\"+(printDate.getTime()===currentDate.getTime()?\"true\":\"false\")+// mark date as selected for screen reader\n\"' data-date='\"+printDate.getDate()+// store date as data\n\"'>\"+printDate.getDate()+\"</a>\")+\"</td>\";// display selectable date\nprintDate.setDate(printDate.getDate()+1);printDate=this._daylightSavingAdjust(printDate);}calender+=tbody+\"</tr>\";}drawMonth++;if(drawMonth>11){drawMonth=0;drawYear++;}calender+=\"</tbody></table>\"+(isMultiMonth?\"</div>\"+(numMonths[0]>0&&col===numMonths[1]-1?\"<div class='ui-datepicker-row-break'></div>\":\"\"):\"\");group+=calender;}html+=group;}html+=buttonPanel;inst._keyEvent=false;return html;},/* Generate the month and year header. */_generateMonthYearHeader:function _generateMonthYearHeader(inst,drawMonth,drawYear,minDate,maxDate,secondary,monthNames,monthNamesShort){var inMinYear,inMaxYear,month,years,thisYear,determineYear,year,endYear,changeMonth=this._get(inst,\"changeMonth\"),changeYear=this._get(inst,\"changeYear\"),showMonthAfterYear=this._get(inst,\"showMonthAfterYear\"),selectMonthLabel=this._get(inst,\"selectMonthLabel\"),selectYearLabel=this._get(inst,\"selectYearLabel\"),html=\"<div class='ui-datepicker-title'>\",monthHtml=\"\";// Month selection\nif(secondary||!changeMonth){monthHtml+=\"<span class='ui-datepicker-month'>\"+monthNames[drawMonth]+\"</span>\";}else{inMinYear=minDate&&minDate.getFullYear()===drawYear;inMaxYear=maxDate&&maxDate.getFullYear()===drawYear;monthHtml+=\"<select class='ui-datepicker-month' aria-label='\"+selectMonthLabel+\"' data-handler='selectMonth' data-event='change'>\";for(month=0;month<12;month++){if((!inMinYear||month>=minDate.getMonth())&&(!inMaxYear||month<=maxDate.getMonth())){monthHtml+=\"<option value='\"+month+\"'\"+(month===drawMonth?\" selected='selected'\":\"\")+\">\"+monthNamesShort[month]+\"</option>\";}}monthHtml+=\"</select>\";}if(!showMonthAfterYear){html+=monthHtml+(secondary||!(changeMonth&&changeYear)?\"&#xa0;\":\"\");}// Year selection\nif(!inst.yearshtml){inst.yearshtml=\"\";if(secondary||!changeYear){html+=\"<span class='ui-datepicker-year'>\"+drawYear+\"</span>\";}else{// determine range of years to display\nyears=this._get(inst,\"yearRange\").split(\":\");thisYear=new Date().getFullYear();determineYear=function determineYear(value){var year=value.match(/c[+\\-].*/)?drawYear+parseInt(value.substring(1),10):value.match(/[+\\-].*/)?thisYear+parseInt(value,10):parseInt(value,10);return isNaN(year)?thisYear:year;};year=determineYear(years[0]);endYear=Math.max(year,determineYear(years[1]||\"\"));year=minDate?Math.max(year,minDate.getFullYear()):year;endYear=maxDate?Math.min(endYear,maxDate.getFullYear()):endYear;inst.yearshtml+=\"<select class='ui-datepicker-year' aria-label='\"+selectYearLabel+\"' data-handler='selectYear' data-event='change'>\";for(;year<=endYear;year++){inst.yearshtml+=\"<option value='\"+year+\"'\"+(year===drawYear?\" selected='selected'\":\"\")+\">\"+year+\"</option>\";}inst.yearshtml+=\"</select>\";html+=inst.yearshtml;inst.yearshtml=null;}}html+=this._get(inst,\"yearSuffix\");if(showMonthAfterYear){html+=(secondary||!(changeMonth&&changeYear)?\"&#xa0;\":\"\")+monthHtml;}html+=\"</div>\";// Close datepicker_header\nreturn html;},/* Adjust one of the date sub-fields. */_adjustInstDate:function _adjustInstDate(inst,offset,period){var year=inst.selectedYear+(period===\"Y\"?offset:0),month=inst.selectedMonth+(period===\"M\"?offset:0),day=Math.min(inst.selectedDay,this._getDaysInMonth(year,month))+(period===\"D\"?offset:0),date=this._restrictMinMax(inst,this._daylightSavingAdjust(new Date(year,month,day)));inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();if(period===\"M\"||period===\"Y\"){this._notifyChange(inst);}},/* Ensure a date is within any min/max bounds. */_restrictMinMax:function _restrictMinMax(inst,date){var minDate=this._getMinMaxDate(inst,\"min\"),maxDate=this._getMinMaxDate(inst,\"max\"),newDate=minDate&&date<minDate?minDate:date;return maxDate&&newDate>maxDate?maxDate:newDate;},/* Notify change of month/year. */_notifyChange:function _notifyChange(inst){var onChange=this._get(inst,\"onChangeMonthYear\");if(onChange){onChange.apply(inst.input?inst.input[0]:null,[inst.selectedYear,inst.selectedMonth+1,inst]);}},/* Determine the number of months to show. */_getNumberOfMonths:function _getNumberOfMonths(inst){var numMonths=this._get(inst,\"numberOfMonths\");return numMonths==null?[1,1]:typeof numMonths===\"number\"?[1,numMonths]:numMonths;},/* Determine the current maximum date - ensure no time components are set. */_getMinMaxDate:function _getMinMaxDate(inst,minMax){return this._determineDate(inst,this._get(inst,minMax+\"Date\"),null);},/* Find the number of days in a given month. */_getDaysInMonth:function _getDaysInMonth(year,month){return 32-this._daylightSavingAdjust(new Date(year,month,32)).getDate();},/* Find the day of the week of the first of a month. */_getFirstDayOfMonth:function _getFirstDayOfMonth(year,month){return new Date(year,month,1).getDay();},/* Determines if we should allow a \"next/prev\" month display change. */_canAdjustMonth:function _canAdjustMonth(inst,offset,curYear,curMonth){var numMonths=this._getNumberOfMonths(inst),date=this._daylightSavingAdjust(new Date(curYear,curMonth+(offset<0?offset:numMonths[0]*numMonths[1]),1));if(offset<0){date.setDate(this._getDaysInMonth(date.getFullYear(),date.getMonth()));}return this._isInRange(inst,date);},/* Is the given date in the accepted range? */_isInRange:function _isInRange(inst,date){var yearSplit,currentYear,minDate=this._getMinMaxDate(inst,\"min\"),maxDate=this._getMinMaxDate(inst,\"max\"),minYear=null,maxYear=null,years=this._get(inst,\"yearRange\");if(years){yearSplit=years.split(\":\");currentYear=new Date().getFullYear();minYear=parseInt(yearSplit[0],10);maxYear=parseInt(yearSplit[1],10);if(yearSplit[0].match(/[+\\-].*/)){minYear+=currentYear;}if(yearSplit[1].match(/[+\\-].*/)){maxYear+=currentYear;}}return(!minDate||date.getTime()>=minDate.getTime())&&(!maxDate||date.getTime()<=maxDate.getTime())&&(!minYear||date.getFullYear()>=minYear)&&(!maxYear||date.getFullYear()<=maxYear);},/* Provide the configuration settings for formatting/parsing. */_getFormatConfig:function _getFormatConfig(inst){var shortYearCutoff=this._get(inst,\"shortYearCutoff\");shortYearCutoff=typeof shortYearCutoff!==\"string\"?shortYearCutoff:new Date().getFullYear()%100+parseInt(shortYearCutoff,10);return{shortYearCutoff:shortYearCutoff,dayNamesShort:this._get(inst,\"dayNamesShort\"),dayNames:this._get(inst,\"dayNames\"),monthNamesShort:this._get(inst,\"monthNamesShort\"),monthNames:this._get(inst,\"monthNames\")};},/* Format the given date for display. */_formatDate:function _formatDate(inst,day,month,year){if(!day){inst.currentDay=inst.selectedDay;inst.currentMonth=inst.selectedMonth;inst.currentYear=inst.selectedYear;}var date=day?_typeof(day)===\"object\"?day:this._daylightSavingAdjust(new Date(year,month,day)):this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay));return this.formatDate(this._get(inst,\"dateFormat\"),date,this._getFormatConfig(inst));}});/*\r\n * Bind hover events for datepicker elements.\r\n * Done via delegate so the binding only occurs once in the lifetime of the parent div.\r\n * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\r\n */function datepicker_bindHover(dpDiv){var selector=\"button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a\";return dpDiv.on(\"mouseout\",selector,function(){$(this).removeClass(\"ui-state-hover\");if(this.className.indexOf(\"ui-datepicker-prev\")!==-1){$(this).removeClass(\"ui-datepicker-prev-hover\");}if(this.className.indexOf(\"ui-datepicker-next\")!==-1){$(this).removeClass(\"ui-datepicker-next-hover\");}}).on(\"mouseover\",selector,datepicker_handleMouseover);}function datepicker_handleMouseover(){if(!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline?datepicker_instActive.dpDiv.parent()[0]:datepicker_instActive.input[0])){$(this).parents(\".ui-datepicker-calendar\").find(\"a\").removeClass(\"ui-state-hover\");$(this).addClass(\"ui-state-hover\");if(this.className.indexOf(\"ui-datepicker-prev\")!==-1){$(this).addClass(\"ui-datepicker-prev-hover\");}if(this.className.indexOf(\"ui-datepicker-next\")!==-1){$(this).addClass(\"ui-datepicker-next-hover\");}}}/* jQuery extend now ignores nulls! */function datepicker_extendRemove(target,props){$.extend(target,props);for(var name in props){if(props[name]==null){target[name]=props[name];}}return target;}/* Invoke the datepicker functionality.\r\n   @param  options  string - a command, optionally followed by additional parameters or\r\n\t\t\t\t\tObject - settings for attaching new datepicker functionality\r\n   @return  jQuery object */$.fn.datepicker=function(options){/* Verify an empty collection wasn't passed - Fixes #6976 */if(!this.length){return this;}/* Initialise the date picker. */if(!$.datepicker.initialized){$(document).on(\"mousedown\",$.datepicker._checkExternalClick);$.datepicker.initialized=true;}/* Append datepicker main container to body if not exist. */if($(\"#\"+$.datepicker._mainDivId).length===0){$(\"body\").append($.datepicker.dpDiv);}var otherArgs=Array.prototype.slice.call(arguments,1);if(typeof options===\"string\"&&(options===\"isDisabled\"||options===\"getDate\"||options===\"widget\")){return $.datepicker[\"_\"+options+\"Datepicker\"].apply($.datepicker,[this[0]].concat(otherArgs));}if(options===\"option\"&&arguments.length===2&&typeof arguments[1]===\"string\"){return $.datepicker[\"_\"+options+\"Datepicker\"].apply($.datepicker,[this[0]].concat(otherArgs));}return this.each(function(){if(typeof options===\"string\"){$.datepicker[\"_\"+options+\"Datepicker\"].apply($.datepicker,[this].concat(otherArgs));}else{$.datepicker._attachDatepicker(this,options);}});};$.datepicker=new Datepicker();// singleton instance\n$.datepicker.initialized=false;$.datepicker.uuid=new Date().getTime();$.datepicker.version=\"1.13.1\";var widgetsDatepicker=$.datepicker;// This file is deprecated\nvar ie=$.ui.ie=!!/msie [\\w.]+/.exec(navigator.userAgent.toLowerCase());/*!\r\n * jQuery UI Mouse 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Mouse\n//>>group: Widgets\n//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.\n//>>docs: http://api.jqueryui.com/mouse/\nvar mouseHandled=false;$(document).on(\"mouseup\",function(){mouseHandled=false;});var widgetsMouse=$.widget(\"ui.mouse\",{version:\"1.13.1\",options:{cancel:\"input, textarea, button, select, option\",distance:1,delay:0},_mouseInit:function _mouseInit(){var that=this;this.element.on(\"mousedown.\"+this.widgetName,function(event){return that._mouseDown(event);}).on(\"click.\"+this.widgetName,function(event){if(true===$.data(event.target,that.widgetName+\".preventClickEvent\")){$.removeData(event.target,that.widgetName+\".preventClickEvent\");event.stopImmediatePropagation();return false;}});this.started=false;},// TODO: make sure destroying one instance of mouse doesn't mess with\n// other instances of mouse\n_mouseDestroy:function _mouseDestroy(){this.element.off(\".\"+this.widgetName);if(this._mouseMoveDelegate){this.document.off(\"mousemove.\"+this.widgetName,this._mouseMoveDelegate).off(\"mouseup.\"+this.widgetName,this._mouseUpDelegate);}},_mouseDown:function _mouseDown(event){// don't let more than one widget handle mouseStart\nif(mouseHandled){return;}this._mouseMoved=false;// We may have missed mouseup (out of window)\nif(this._mouseStarted){this._mouseUp(event);}this._mouseDownEvent=event;var that=this,btnIsLeft=event.which===1,// event.target.nodeName works around a bug in IE 8 with\n// disabled inputs (#7620)\nelIsCancel=typeof this.options.cancel===\"string\"&&event.target.nodeName?$(event.target).closest(this.options.cancel).length:false;if(!btnIsLeft||elIsCancel||!this._mouseCapture(event)){return true;}this.mouseDelayMet=!this.options.delay;if(!this.mouseDelayMet){this._mouseDelayTimer=setTimeout(function(){that.mouseDelayMet=true;},this.options.delay);}if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){this._mouseStarted=this._mouseStart(event)!==false;if(!this._mouseStarted){event.preventDefault();return true;}}// Click event may never have fired (Gecko & Opera)\nif(true===$.data(event.target,this.widgetName+\".preventClickEvent\")){$.removeData(event.target,this.widgetName+\".preventClickEvent\");}// These delegates are required to keep context\nthis._mouseMoveDelegate=function(event){return that._mouseMove(event);};this._mouseUpDelegate=function(event){return that._mouseUp(event);};this.document.on(\"mousemove.\"+this.widgetName,this._mouseMoveDelegate).on(\"mouseup.\"+this.widgetName,this._mouseUpDelegate);event.preventDefault();mouseHandled=true;return true;},_mouseMove:function _mouseMove(event){// Only check for mouseups outside the document if you've moved inside the document\n// at least once. This prevents the firing of mouseup in the case of IE<9, which will\n// fire a mousemove event if content is placed under the cursor. See #7778\n// Support: IE <9\nif(this._mouseMoved){// IE mouseup check - mouseup happened when mouse was out of window\nif($.ui.ie&&(!document.documentMode||document.documentMode<9)&&!event.button){return this._mouseUp(event);// Iframe mouseup check - mouseup occurred in another document\n}else if(!event.which){// Support: Safari <=8 - 9\n// Safari sets which to 0 if you press any of the following keys\n// during a drag (#14461)\nif(event.originalEvent.altKey||event.originalEvent.ctrlKey||event.originalEvent.metaKey||event.originalEvent.shiftKey){this.ignoreMissingWhich=true;}else if(!this.ignoreMissingWhich){return this._mouseUp(event);}}}if(event.which||event.button){this._mouseMoved=true;}if(this._mouseStarted){this._mouseDrag(event);return event.preventDefault();}if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){this._mouseStarted=this._mouseStart(this._mouseDownEvent,event)!==false;if(this._mouseStarted){this._mouseDrag(event);}else{this._mouseUp(event);}}return!this._mouseStarted;},_mouseUp:function _mouseUp(event){this.document.off(\"mousemove.\"+this.widgetName,this._mouseMoveDelegate).off(\"mouseup.\"+this.widgetName,this._mouseUpDelegate);if(this._mouseStarted){this._mouseStarted=false;if(event.target===this._mouseDownEvent.target){$.data(event.target,this.widgetName+\".preventClickEvent\",true);}this._mouseStop(event);}if(this._mouseDelayTimer){clearTimeout(this._mouseDelayTimer);delete this._mouseDelayTimer;}this.ignoreMissingWhich=false;mouseHandled=false;event.preventDefault();},_mouseDistanceMet:function _mouseDistanceMet(event){return Math.max(Math.abs(this._mouseDownEvent.pageX-event.pageX),Math.abs(this._mouseDownEvent.pageY-event.pageY))>=this.options.distance;},_mouseDelayMet:function/* event */_mouseDelayMet(){return this.mouseDelayMet;},// These are placeholder methods, to be overriden by extending plugin\n_mouseStart:function/* event */_mouseStart(){},_mouseDrag:function/* event */_mouseDrag(){},_mouseStop:function/* event */_mouseStop(){},_mouseCapture:function/* event */_mouseCapture(){return true;}});// $.ui.plugin is deprecated. Use $.widget() extensions instead.\nvar plugin=$.ui.plugin={add:function add(module,option,set){var i,proto=$.ui[module].prototype;for(i in set){proto.plugins[i]=proto.plugins[i]||[];proto.plugins[i].push([option,set[i]]);}},call:function call(instance,name,args,allowDisconnected){var i,set=instance.plugins[name];if(!set){return;}if(!allowDisconnected&&(!instance.element[0].parentNode||instance.element[0].parentNode.nodeType===11)){return;}for(i=0;i<set.length;i++){if(instance.options[set[i][0]]){set[i][1].apply(instance.element,args);}}}};var safeBlur=$.ui.safeBlur=function(element){// Support: IE9 - 10 only\n// If the <body> is blurred, IE will switch windows, see #9420\nif(element&&element.nodeName.toLowerCase()!==\"body\"){$(element).trigger(\"blur\");}};/*!\r\n * jQuery UI Draggable 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Draggable\n//>>group: Interactions\n//>>description: Enables dragging functionality for any element.\n//>>docs: http://api.jqueryui.com/draggable/\n//>>demos: http://jqueryui.com/draggable/\n//>>css.structure: ../../themes/base/draggable.css\n$.widget(\"ui.draggable\",$.ui.mouse,{version:\"1.13.1\",widgetEventPrefix:\"drag\",options:{addClasses:true,appendTo:\"parent\",axis:false,connectToSortable:false,containment:false,cursor:\"auto\",cursorAt:false,grid:false,handle:false,helper:\"original\",iframeFix:false,opacity:false,refreshPositions:false,revert:false,revertDuration:500,scope:\"default\",scroll:true,scrollSensitivity:20,scrollSpeed:20,snap:false,snapMode:\"both\",snapTolerance:20,stack:false,zIndex:false,// Callbacks\ndrag:null,start:null,stop:null},_create:function _create(){if(this.options.helper===\"original\"){this._setPositionRelative();}if(this.options.addClasses){this._addClass(\"ui-draggable\");}this._setHandleClassName();this._mouseInit();},_setOption:function _setOption(key,value){this._super(key,value);if(key===\"handle\"){this._removeHandleClassName();this._setHandleClassName();}},_destroy:function _destroy(){if((this.helper||this.element).is(\".ui-draggable-dragging\")){this.destroyOnClear=true;return;}this._removeHandleClassName();this._mouseDestroy();},_mouseCapture:function _mouseCapture(event){var o=this.options;// Among others, prevent a drag on a resizable-handle\nif(this.helper||o.disabled||$(event.target).closest(\".ui-resizable-handle\").length>0){return false;}//Quit if we're not on a valid handle\nthis.handle=this._getHandle(event);if(!this.handle){return false;}this._blurActiveElement(event);this._blockFrames(o.iframeFix===true?\"iframe\":o.iframeFix);return true;},_blockFrames:function _blockFrames(selector){this.iframeBlocks=this.document.find(selector).map(function(){var iframe=$(this);return $(\"<div>\").css(\"position\",\"absolute\").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];});},_unblockFrames:function _unblockFrames(){if(this.iframeBlocks){this.iframeBlocks.remove();delete this.iframeBlocks;}},_blurActiveElement:function _blurActiveElement(event){var activeElement=$.ui.safeActiveElement(this.document[0]),target=$(event.target);// Don't blur if the event occurred on an element that is within\n// the currently focused element\n// See #10527, #12472\nif(target.closest(activeElement).length){return;}// Blur any element that currently has focus, see #4261\n$.ui.safeBlur(activeElement);},_mouseStart:function _mouseStart(event){var o=this.options;//Create and append the visible helper\nthis.helper=this._createHelper(event);this._addClass(this.helper,\"ui-draggable-dragging\");//Cache the helper size\nthis._cacheHelperProportions();//If ddmanager is used for droppables, set the global draggable\nif($.ui.ddmanager){$.ui.ddmanager.current=this;}/*\r\n\t\t * - Position generation -\r\n\t\t * This block generates everything position related - it's the core of draggables.\r\n\t\t */ //Cache the margins of the original element\nthis._cacheMargins();//Store the helper's css position\nthis.cssPosition=this.helper.css(\"position\");this.scrollParent=this.helper.scrollParent(true);this.offsetParent=this.helper.offsetParent();this.hasFixedAncestor=this.helper.parents().filter(function(){return $(this).css(\"position\")===\"fixed\";}).length>0;//The element's absolute position on the page minus margins\nthis.positionAbs=this.element.offset();this._refreshOffsets(event);//Generate the original position\nthis.originalPosition=this.position=this._generatePosition(event,false);this.originalPageX=event.pageX;this.originalPageY=event.pageY;//Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\nif(o.cursorAt){this._adjustOffsetFromHelper(o.cursorAt);}//Set a containment if given in the options\nthis._setContainment();//Trigger event + callbacks\nif(this._trigger(\"start\",event)===false){this._clear();return false;}//Recache the helper size\nthis._cacheHelperProportions();//Prepare the droppable offsets\nif($.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}// Execute the drag once - this causes the helper not to be visible before getting its\n// correct position\nthis._mouseDrag(event,true);// If the ddmanager is used for droppables, inform the manager that dragging has started\n// (see #5003)\nif($.ui.ddmanager){$.ui.ddmanager.dragStart(this,event);}return true;},_refreshOffsets:function _refreshOffsets(event){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:false,parent:this._getParentOffset(),relative:this._getRelativeOffset()};this.offset.click={left:event.pageX-this.offset.left,top:event.pageY-this.offset.top};},_mouseDrag:function _mouseDrag(event,noPropagation){// reset any necessary cached properties (see #5009)\nif(this.hasFixedAncestor){this.offset.parent=this._getParentOffset();}//Compute the helpers position\nthis.position=this._generatePosition(event,true);this.positionAbs=this._convertPositionTo(\"absolute\");//Call plugins and callbacks and use the resulting position if something is returned\nif(!noPropagation){var ui=this._uiHash();if(this._trigger(\"drag\",event,ui)===false){this._mouseUp(new $.Event(\"mouseup\",event));return false;}this.position=ui.position;}this.helper[0].style.left=this.position.left+\"px\";this.helper[0].style.top=this.position.top+\"px\";if($.ui.ddmanager){$.ui.ddmanager.drag(this,event);}return false;},_mouseStop:function _mouseStop(event){//If we are using droppables, inform the manager about the drop\nvar that=this,dropped=false;if($.ui.ddmanager&&!this.options.dropBehaviour){dropped=$.ui.ddmanager.drop(this,event);}//if a drop comes from outside (a sortable)\nif(this.dropped){dropped=this.dropped;this.dropped=false;}if(this.options.revert===\"invalid\"&&!dropped||this.options.revert===\"valid\"&&dropped||this.options.revert===true||typeof this.options.revert===\"function\"&&this.options.revert.call(this.element,dropped)){$(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){if(that._trigger(\"stop\",event)!==false){that._clear();}});}else{if(this._trigger(\"stop\",event)!==false){this._clear();}}return false;},_mouseUp:function _mouseUp(event){this._unblockFrames();// If the ddmanager is used for droppables, inform the manager that dragging has stopped\n// (see #5003)\nif($.ui.ddmanager){$.ui.ddmanager.dragStop(this,event);}// Only need to focus if the event occurred on the draggable itself, see #10527\nif(this.handleElement.is(event.target)){// The interaction is over; whether or not the click resulted in a drag,\n// focus the element\nthis.element.trigger(\"focus\");}return $.ui.mouse.prototype._mouseUp.call(this,event);},cancel:function cancel(){if(this.helper.is(\".ui-draggable-dragging\")){this._mouseUp(new $.Event(\"mouseup\",{target:this.element[0]}));}else{this._clear();}return this;},_getHandle:function _getHandle(event){return this.options.handle?!!$(event.target).closest(this.element.find(this.options.handle)).length:true;},_setHandleClassName:function _setHandleClassName(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element;this._addClass(this.handleElement,\"ui-draggable-handle\");},_removeHandleClassName:function _removeHandleClassName(){this._removeClass(this.handleElement,\"ui-draggable-handle\");},_createHelper:function _createHelper(event){var o=this.options,helperIsFunction=typeof o.helper===\"function\",helper=helperIsFunction?$(o.helper.apply(this.element[0],[event])):o.helper===\"clone\"?this.element.clone().removeAttr(\"id\"):this.element;if(!helper.parents(\"body\").length){helper.appendTo(o.appendTo===\"parent\"?this.element[0].parentNode:o.appendTo);}// Http://bugs.jqueryui.com/ticket/9446\n// a helper function can return the original element\n// which wouldn't have been set to relative in _create\nif(helperIsFunction&&helper[0]===this.element[0]){this._setPositionRelative();}if(helper[0]!==this.element[0]&&!/(fixed|absolute)/.test(helper.css(\"position\"))){helper.css(\"position\",\"absolute\");}return helper;},_setPositionRelative:function _setPositionRelative(){if(!/^(?:r|a|f)/.test(this.element.css(\"position\"))){this.element[0].style.position=\"relative\";}},_adjustOffsetFromHelper:function _adjustOffsetFromHelper(obj){if(typeof obj===\"string\"){obj=obj.split(\" \");}if(Array.isArray(obj)){obj={left:+obj[0],top:+obj[1]||0};}if(\"left\"in obj){this.offset.click.left=obj.left+this.margins.left;}if(\"right\"in obj){this.offset.click.left=this.helperProportions.width-obj.right+this.margins.left;}if(\"top\"in obj){this.offset.click.top=obj.top+this.margins.top;}if(\"bottom\"in obj){this.offset.click.top=this.helperProportions.height-obj.bottom+this.margins.top;}},_isRootNode:function _isRootNode(element){return /(html|body)/i.test(element.tagName)||element===this.document[0];},_getParentOffset:function _getParentOffset(){//Get the offsetParent and cache its position\nvar po=this.offsetParent.offset(),document=this.document[0];// This is a special case where we need to modify a offset calculated on start, since the\n// following happened:\n// 1. The position of the helper is absolute, so it's position is calculated based on the\n// next positioned parent\n// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't\n// the document, which means that the scroll is included in the initial calculation of the\n// offset of the parent, and never recalculated upon drag\nif(this.cssPosition===\"absolute\"&&this.scrollParent[0]!==document&&$.contains(this.scrollParent[0],this.offsetParent[0])){po.left+=this.scrollParent.scrollLeft();po.top+=this.scrollParent.scrollTop();}if(this._isRootNode(this.offsetParent[0])){po={top:0,left:0};}return{top:po.top+(parseInt(this.offsetParent.css(\"borderTopWidth\"),10)||0),left:po.left+(parseInt(this.offsetParent.css(\"borderLeftWidth\"),10)||0)};},_getRelativeOffset:function _getRelativeOffset(){if(this.cssPosition!==\"relative\"){return{top:0,left:0};}var p=this.element.position(),scrollIsRootNode=this._isRootNode(this.scrollParent[0]);return{top:p.top-(parseInt(this.helper.css(\"top\"),10)||0)+(!scrollIsRootNode?this.scrollParent.scrollTop():0),left:p.left-(parseInt(this.helper.css(\"left\"),10)||0)+(!scrollIsRootNode?this.scrollParent.scrollLeft():0)};},_cacheMargins:function _cacheMargins(){this.margins={left:parseInt(this.element.css(\"marginLeft\"),10)||0,top:parseInt(this.element.css(\"marginTop\"),10)||0,right:parseInt(this.element.css(\"marginRight\"),10)||0,bottom:parseInt(this.element.css(\"marginBottom\"),10)||0};},_cacheHelperProportions:function _cacheHelperProportions(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()};},_setContainment:function _setContainment(){var isUserScrollable,c,ce,o=this.options,document=this.document[0];this.relativeContainer=null;if(!o.containment){this.containment=null;return;}if(o.containment===\"window\"){this.containment=[$(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,$(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,$(window).scrollLeft()+$(window).width()-this.helperProportions.width-this.margins.left,$(window).scrollTop()+($(window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];return;}if(o.containment===\"document\"){this.containment=[0,0,$(document).width()-this.helperProportions.width-this.margins.left,($(document).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];return;}if(o.containment.constructor===Array){this.containment=o.containment;return;}if(o.containment===\"parent\"){o.containment=this.helper[0].parentNode;}c=$(o.containment);ce=c[0];if(!ce){return;}isUserScrollable=/(scroll|auto)/.test(c.css(\"overflow\"));this.containment=[(parseInt(c.css(\"borderLeftWidth\"),10)||0)+(parseInt(c.css(\"paddingLeft\"),10)||0),(parseInt(c.css(\"borderTopWidth\"),10)||0)+(parseInt(c.css(\"paddingTop\"),10)||0),(isUserScrollable?Math.max(ce.scrollWidth,ce.offsetWidth):ce.offsetWidth)-(parseInt(c.css(\"borderRightWidth\"),10)||0)-(parseInt(c.css(\"paddingRight\"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(isUserScrollable?Math.max(ce.scrollHeight,ce.offsetHeight):ce.offsetHeight)-(parseInt(c.css(\"borderBottomWidth\"),10)||0)-(parseInt(c.css(\"paddingBottom\"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom];this.relativeContainer=c;},_convertPositionTo:function _convertPositionTo(d,pos){if(!pos){pos=this.position;}var mod=d===\"absolute\"?1:-1,scrollIsRootNode=this._isRootNode(this.scrollParent[0]);return{top:// The absolute mouse position\npos.top+// Only for relative positioned nodes: Relative offset from element to offset parent\nthis.offset.relative.top*mod+// The offsetParent's offset without borders (offset + border)\nthis.offset.parent.top*mod-(this.cssPosition===\"fixed\"?-this.offset.scroll.top:scrollIsRootNode?0:this.offset.scroll.top)*mod,left:// The absolute mouse position\npos.left+// Only for relative positioned nodes: Relative offset from element to offset parent\nthis.offset.relative.left*mod+// The offsetParent's offset without borders (offset + border)\nthis.offset.parent.left*mod-(this.cssPosition===\"fixed\"?-this.offset.scroll.left:scrollIsRootNode?0:this.offset.scroll.left)*mod};},_generatePosition:function _generatePosition(event,constrainPosition){var containment,co,top,left,o=this.options,scrollIsRootNode=this._isRootNode(this.scrollParent[0]),pageX=event.pageX,pageY=event.pageY;// Cache the scroll\nif(!scrollIsRootNode||!this.offset.scroll){this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()};}/*\r\n\t\t * - Position constraining -\r\n\t\t * Constrain the position to a mix of grid, containment.\r\n\t\t */ // If we are not dragging yet, we won't check for options\nif(constrainPosition){if(this.containment){if(this.relativeContainer){co=this.relativeContainer.offset();containment=[this.containment[0]+co.left,this.containment[1]+co.top,this.containment[2]+co.left,this.containment[3]+co.top];}else{containment=this.containment;}if(event.pageX-this.offset.click.left<containment[0]){pageX=containment[0]+this.offset.click.left;}if(event.pageY-this.offset.click.top<containment[1]){pageY=containment[1]+this.offset.click.top;}if(event.pageX-this.offset.click.left>containment[2]){pageX=containment[2]+this.offset.click.left;}if(event.pageY-this.offset.click.top>containment[3]){pageY=containment[3]+this.offset.click.top;}}if(o.grid){//Check for grid elements set to 0 to prevent divide by 0 error causing invalid\n// argument errors in IE (see ticket #6950)\ntop=o.grid[1]?this.originalPageY+Math.round((pageY-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY;pageY=containment?top-this.offset.click.top>=containment[1]||top-this.offset.click.top>containment[3]?top:top-this.offset.click.top>=containment[1]?top-o.grid[1]:top+o.grid[1]:top;left=o.grid[0]?this.originalPageX+Math.round((pageX-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX;pageX=containment?left-this.offset.click.left>=containment[0]||left-this.offset.click.left>containment[2]?left:left-this.offset.click.left>=containment[0]?left-o.grid[0]:left+o.grid[0]:left;}if(o.axis===\"y\"){pageX=this.originalPageX;}if(o.axis===\"x\"){pageY=this.originalPageY;}}return{top:// The absolute mouse position\npageY-// Click offset (relative to the element)\nthis.offset.click.top-// Only for relative positioned nodes: Relative offset from element to offset parent\nthis.offset.relative.top-// The offsetParent's offset without borders (offset + border)\nthis.offset.parent.top+(this.cssPosition===\"fixed\"?-this.offset.scroll.top:scrollIsRootNode?0:this.offset.scroll.top),left:// The absolute mouse position\npageX-// Click offset (relative to the element)\nthis.offset.click.left-// Only for relative positioned nodes: Relative offset from element to offset parent\nthis.offset.relative.left-// The offsetParent's offset without borders (offset + border)\nthis.offset.parent.left+(this.cssPosition===\"fixed\"?-this.offset.scroll.left:scrollIsRootNode?0:this.offset.scroll.left)};},_clear:function _clear(){this._removeClass(this.helper,\"ui-draggable-dragging\");if(this.helper[0]!==this.element[0]&&!this.cancelHelperRemoval){this.helper.remove();}this.helper=null;this.cancelHelperRemoval=false;if(this.destroyOnClear){this.destroy();}},// From now on bulk stuff - mainly helpers\n_trigger:function _trigger(type,event,ui){ui=ui||this._uiHash();$.ui.plugin.call(this,type,[event,ui,this],true);// Absolute position and offset (see #6884 ) have to be recalculated after plugins\nif(/^(drag|start|stop)/.test(type)){this.positionAbs=this._convertPositionTo(\"absolute\");ui.offset=this.positionAbs;}return $.Widget.prototype._trigger.call(this,type,event,ui);},plugins:{},_uiHash:function _uiHash(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs};}});$.ui.plugin.add(\"draggable\",\"connectToSortable\",{start:function start(event,ui,draggable){var uiSortable=$.extend({},ui,{item:draggable.element});draggable.sortables=[];$(draggable.options.connectToSortable).each(function(){var sortable=$(this).sortable(\"instance\");if(sortable&&!sortable.options.disabled){draggable.sortables.push(sortable);// RefreshPositions is called at drag start to refresh the containerCache\n// which is used in drag. This ensures it's initialized and synchronized\n// with any changes that might have happened on the page since initialization.\nsortable.refreshPositions();sortable._trigger(\"activate\",event,uiSortable);}});},stop:function stop(event,ui,draggable){var uiSortable=$.extend({},ui,{item:draggable.element});draggable.cancelHelperRemoval=false;$.each(draggable.sortables,function(){var sortable=this;if(sortable.isOver){sortable.isOver=0;// Allow this sortable to handle removing the helper\ndraggable.cancelHelperRemoval=true;sortable.cancelHelperRemoval=false;// Use _storedCSS To restore properties in the sortable,\n// as this also handles revert (#9675) since the draggable\n// may have modified them in unexpected ways (#8809)\nsortable._storedCSS={position:sortable.placeholder.css(\"position\"),top:sortable.placeholder.css(\"top\"),left:sortable.placeholder.css(\"left\")};sortable._mouseStop(event);// Once drag has ended, the sortable should return to using\n// its original helper, not the shared helper from draggable\nsortable.options.helper=sortable.options._helper;}else{// Prevent this Sortable from removing the helper.\n// However, don't set the draggable to remove the helper\n// either as another connected Sortable may yet handle the removal.\nsortable.cancelHelperRemoval=true;sortable._trigger(\"deactivate\",event,uiSortable);}});},drag:function drag(event,ui,draggable){$.each(draggable.sortables,function(){var innermostIntersecting=false,sortable=this;// Copy over variables that sortable's _intersectsWith uses\nsortable.positionAbs=draggable.positionAbs;sortable.helperProportions=draggable.helperProportions;sortable.offset.click=draggable.offset.click;if(sortable._intersectsWith(sortable.containerCache)){innermostIntersecting=true;$.each(draggable.sortables,function(){// Copy over variables that sortable's _intersectsWith uses\nthis.positionAbs=draggable.positionAbs;this.helperProportions=draggable.helperProportions;this.offset.click=draggable.offset.click;if(this!==sortable&&this._intersectsWith(this.containerCache)&&$.contains(sortable.element[0],this.element[0])){innermostIntersecting=false;}return innermostIntersecting;});}if(innermostIntersecting){// If it intersects, we use a little isOver variable and set it once,\n// so that the move-in stuff gets fired only once.\nif(!sortable.isOver){sortable.isOver=1;// Store draggable's parent in case we need to reappend to it later.\ndraggable._parent=ui.helper.parent();sortable.currentItem=ui.helper.appendTo(sortable.element).data(\"ui-sortable-item\",true);// Store helper option to later restore it\nsortable.options._helper=sortable.options.helper;sortable.options.helper=function(){return ui.helper[0];};// Fire the start events of the sortable with our passed browser event,\n// and our own helper (so it doesn't create a new one)\nevent.target=sortable.currentItem[0];sortable._mouseCapture(event,true);sortable._mouseStart(event,true,true);// Because the browser event is way off the new appended portlet,\n// modify necessary variables to reflect the changes\nsortable.offset.click.top=draggable.offset.click.top;sortable.offset.click.left=draggable.offset.click.left;sortable.offset.parent.left-=draggable.offset.parent.left-sortable.offset.parent.left;sortable.offset.parent.top-=draggable.offset.parent.top-sortable.offset.parent.top;draggable._trigger(\"toSortable\",event);// Inform draggable that the helper is in a valid drop zone,\n// used solely in the revert option to handle \"valid/invalid\".\ndraggable.dropped=sortable.element;// Need to refreshPositions of all sortables in the case that\n// adding to one sortable changes the location of the other sortables (#9675)\n$.each(draggable.sortables,function(){this.refreshPositions();});// Hack so receive/update callbacks work (mostly)\ndraggable.currentItem=draggable.element;sortable.fromOutside=draggable;}if(sortable.currentItem){sortable._mouseDrag(event);// Copy the sortable's position because the draggable's can potentially reflect\n// a relative position, while sortable is always absolute, which the dragged\n// element has now become. (#8809)\nui.position=sortable.position;}}else{// If it doesn't intersect with the sortable, and it intersected before,\n// we fake the drag stop of the sortable, but make sure it doesn't remove\n// the helper by using cancelHelperRemoval.\nif(sortable.isOver){sortable.isOver=0;sortable.cancelHelperRemoval=true;// Calling sortable's mouseStop would trigger a revert,\n// so revert must be temporarily false until after mouseStop is called.\nsortable.options._revert=sortable.options.revert;sortable.options.revert=false;sortable._trigger(\"out\",event,sortable._uiHash(sortable));sortable._mouseStop(event,true);// Restore sortable behaviors that were modfied\n// when the draggable entered the sortable area (#9481)\nsortable.options.revert=sortable.options._revert;sortable.options.helper=sortable.options._helper;if(sortable.placeholder){sortable.placeholder.remove();}// Restore and recalculate the draggable's offset considering the sortable\n// may have modified them in unexpected ways. (#8809, #10669)\nui.helper.appendTo(draggable._parent);draggable._refreshOffsets(event);ui.position=draggable._generatePosition(event,true);draggable._trigger(\"fromSortable\",event);// Inform draggable that the helper is no longer in a valid drop zone\ndraggable.dropped=false;// Need to refreshPositions of all sortables just in case removing\n// from one sortable changes the location of other sortables (#9675)\n$.each(draggable.sortables,function(){this.refreshPositions();});}}});}});$.ui.plugin.add(\"draggable\",\"cursor\",{start:function start(event,ui,instance){var t=$(\"body\"),o=instance.options;if(t.css(\"cursor\")){o._cursor=t.css(\"cursor\");}t.css(\"cursor\",o.cursor);},stop:function stop(event,ui,instance){var o=instance.options;if(o._cursor){$(\"body\").css(\"cursor\",o._cursor);}}});$.ui.plugin.add(\"draggable\",\"opacity\",{start:function start(event,ui,instance){var t=$(ui.helper),o=instance.options;if(t.css(\"opacity\")){o._opacity=t.css(\"opacity\");}t.css(\"opacity\",o.opacity);},stop:function stop(event,ui,instance){var o=instance.options;if(o._opacity){$(ui.helper).css(\"opacity\",o._opacity);}}});$.ui.plugin.add(\"draggable\",\"scroll\",{start:function start(event,ui,i){if(!i.scrollParentNotHidden){i.scrollParentNotHidden=i.helper.scrollParent(false);}if(i.scrollParentNotHidden[0]!==i.document[0]&&i.scrollParentNotHidden[0].tagName!==\"HTML\"){i.overflowOffset=i.scrollParentNotHidden.offset();}},drag:function drag(event,ui,i){var o=i.options,scrolled=false,scrollParent=i.scrollParentNotHidden[0],document=i.document[0];if(scrollParent!==document&&scrollParent.tagName!==\"HTML\"){if(!o.axis||o.axis!==\"x\"){if(i.overflowOffset.top+scrollParent.offsetHeight-event.pageY<o.scrollSensitivity){scrollParent.scrollTop=scrolled=scrollParent.scrollTop+o.scrollSpeed;}else if(event.pageY-i.overflowOffset.top<o.scrollSensitivity){scrollParent.scrollTop=scrolled=scrollParent.scrollTop-o.scrollSpeed;}}if(!o.axis||o.axis!==\"y\"){if(i.overflowOffset.left+scrollParent.offsetWidth-event.pageX<o.scrollSensitivity){scrollParent.scrollLeft=scrolled=scrollParent.scrollLeft+o.scrollSpeed;}else if(event.pageX-i.overflowOffset.left<o.scrollSensitivity){scrollParent.scrollLeft=scrolled=scrollParent.scrollLeft-o.scrollSpeed;}}}else{if(!o.axis||o.axis!==\"x\"){if(event.pageY-$(document).scrollTop()<o.scrollSensitivity){scrolled=$(document).scrollTop($(document).scrollTop()-o.scrollSpeed);}else if($(window).height()-(event.pageY-$(document).scrollTop())<o.scrollSensitivity){scrolled=$(document).scrollTop($(document).scrollTop()+o.scrollSpeed);}}if(!o.axis||o.axis!==\"y\"){if(event.pageX-$(document).scrollLeft()<o.scrollSensitivity){scrolled=$(document).scrollLeft($(document).scrollLeft()-o.scrollSpeed);}else if($(window).width()-(event.pageX-$(document).scrollLeft())<o.scrollSensitivity){scrolled=$(document).scrollLeft($(document).scrollLeft()+o.scrollSpeed);}}}if(scrolled!==false&&$.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(i,event);}}});$.ui.plugin.add(\"draggable\",\"snap\",{start:function start(event,ui,i){var o=i.options;i.snapElements=[];$(o.snap.constructor!==String?o.snap.items||\":data(ui-draggable)\":o.snap).each(function(){var $t=$(this),$o=$t.offset();if(this!==i.element[0]){i.snapElements.push({item:this,width:$t.outerWidth(),height:$t.outerHeight(),top:$o.top,left:$o.left});}});},drag:function drag(event,ui,inst){var ts,bs,ls,rs,l,r,t,b,i,first,o=inst.options,d=o.snapTolerance,x1=ui.offset.left,x2=x1+inst.helperProportions.width,y1=ui.offset.top,y2=y1+inst.helperProportions.height;for(i=inst.snapElements.length-1;i>=0;i--){l=inst.snapElements[i].left-inst.margins.left;r=l+inst.snapElements[i].width;t=inst.snapElements[i].top-inst.margins.top;b=t+inst.snapElements[i].height;if(x2<l-d||x1>r+d||y2<t-d||y1>b+d||!$.contains(inst.snapElements[i].item.ownerDocument,inst.snapElements[i].item)){if(inst.snapElements[i].snapping){if(inst.options.snap.release){inst.options.snap.release.call(inst.element,event,$.extend(inst._uiHash(),{snapItem:inst.snapElements[i].item}));}}inst.snapElements[i].snapping=false;continue;}if(o.snapMode!==\"inner\"){ts=Math.abs(t-y2)<=d;bs=Math.abs(b-y1)<=d;ls=Math.abs(l-x2)<=d;rs=Math.abs(r-x1)<=d;if(ts){ui.position.top=inst._convertPositionTo(\"relative\",{top:t-inst.helperProportions.height,left:0}).top;}if(bs){ui.position.top=inst._convertPositionTo(\"relative\",{top:b,left:0}).top;}if(ls){ui.position.left=inst._convertPositionTo(\"relative\",{top:0,left:l-inst.helperProportions.width}).left;}if(rs){ui.position.left=inst._convertPositionTo(\"relative\",{top:0,left:r}).left;}}first=ts||bs||ls||rs;if(o.snapMode!==\"outer\"){ts=Math.abs(t-y1)<=d;bs=Math.abs(b-y2)<=d;ls=Math.abs(l-x1)<=d;rs=Math.abs(r-x2)<=d;if(ts){ui.position.top=inst._convertPositionTo(\"relative\",{top:t,left:0}).top;}if(bs){ui.position.top=inst._convertPositionTo(\"relative\",{top:b-inst.helperProportions.height,left:0}).top;}if(ls){ui.position.left=inst._convertPositionTo(\"relative\",{top:0,left:l}).left;}if(rs){ui.position.left=inst._convertPositionTo(\"relative\",{top:0,left:r-inst.helperProportions.width}).left;}}if(!inst.snapElements[i].snapping&&(ts||bs||ls||rs||first)){if(inst.options.snap.snap){inst.options.snap.snap.call(inst.element,event,$.extend(inst._uiHash(),{snapItem:inst.snapElements[i].item}));}}inst.snapElements[i].snapping=ts||bs||ls||rs||first;}}});$.ui.plugin.add(\"draggable\",\"stack\",{start:function start(event,ui,instance){var min,o=instance.options,group=$.makeArray($(o.stack)).sort(function(a,b){return(parseInt($(a).css(\"zIndex\"),10)||0)-(parseInt($(b).css(\"zIndex\"),10)||0);});if(!group.length){return;}min=parseInt($(group[0]).css(\"zIndex\"),10)||0;$(group).each(function(i){$(this).css(\"zIndex\",min+i);});this.css(\"zIndex\",min+group.length);}});$.ui.plugin.add(\"draggable\",\"zIndex\",{start:function start(event,ui,instance){var t=$(ui.helper),o=instance.options;if(t.css(\"zIndex\")){o._zIndex=t.css(\"zIndex\");}t.css(\"zIndex\",o.zIndex);},stop:function stop(event,ui,instance){var o=instance.options;if(o._zIndex){$(ui.helper).css(\"zIndex\",o._zIndex);}}});var widgetsDraggable=$.ui.draggable;/*!\r\n * jQuery UI Resizable 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Resizable\n//>>group: Interactions\n//>>description: Enables resize functionality for any element.\n//>>docs: http://api.jqueryui.com/resizable/\n//>>demos: http://jqueryui.com/resizable/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/resizable.css\n//>>css.theme: ../../themes/base/theme.css\n$.widget(\"ui.resizable\",$.ui.mouse,{version:\"1.13.1\",widgetEventPrefix:\"resize\",options:{alsoResize:false,animate:false,animateDuration:\"slow\",animateEasing:\"swing\",aspectRatio:false,autoHide:false,classes:{\"ui-resizable-se\":\"ui-icon ui-icon-gripsmall-diagonal-se\"},containment:false,ghost:false,grid:false,handles:\"e,s,se\",helper:false,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,// See #7960\nzIndex:90,// Callbacks\nresize:null,start:null,stop:null},_num:function _num(value){return parseFloat(value)||0;},_isNumber:function _isNumber(value){return!isNaN(parseFloat(value));},_hasScroll:function _hasScroll(el,a){if($(el).css(\"overflow\")===\"hidden\"){return false;}var scroll=a&&a===\"left\"?\"scrollLeft\":\"scrollTop\",has=false;if(el[scroll]>0){return true;}// TODO: determine which cases actually cause this to happen\n// if the element doesn't have the scroll set, see if it's possible to\n// set the scroll\ntry{el[scroll]=1;has=el[scroll]>0;el[scroll]=0;}catch(e){// `el` might be a string, then setting `scroll` will throw\n// an error in strict mode; ignore it.\n}return has;},_create:function _create(){var margins,o=this.options,that=this;this._addClass(\"ui-resizable\");$.extend(this,{_aspectRatio:!!o.aspectRatio,aspectRatio:o.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:o.helper||o.ghost||o.animate?o.helper||\"ui-resizable-helper\":null});// Wrap the element if it cannot hold child nodes\nif(this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)){this.element.wrap($(\"<div class='ui-wrapper'></div>\").css({overflow:\"hidden\",position:this.element.css(\"position\"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css(\"top\"),left:this.element.css(\"left\")}));this.element=this.element.parent().data(\"ui-resizable\",this.element.resizable(\"instance\"));this.elementIsWrapper=true;margins={marginTop:this.originalElement.css(\"marginTop\"),marginRight:this.originalElement.css(\"marginRight\"),marginBottom:this.originalElement.css(\"marginBottom\"),marginLeft:this.originalElement.css(\"marginLeft\")};this.element.css(margins);this.originalElement.css(\"margin\",0);// support: Safari\n// Prevent Safari textarea resize\nthis.originalResizeStyle=this.originalElement.css(\"resize\");this.originalElement.css(\"resize\",\"none\");this._proportionallyResizeElements.push(this.originalElement.css({position:\"static\",zoom:1,display:\"block\"}));// Support: IE9\n// avoid IE jump (hard set the margin)\nthis.originalElement.css(margins);this._proportionallyResize();}this._setupHandles();if(o.autoHide){$(this.element).on(\"mouseenter\",function(){if(o.disabled){return;}that._removeClass(\"ui-resizable-autohide\");that._handles.show();}).on(\"mouseleave\",function(){if(o.disabled){return;}if(!that.resizing){that._addClass(\"ui-resizable-autohide\");that._handles.hide();}});}this._mouseInit();},_destroy:function _destroy(){this._mouseDestroy();this._addedHandles.remove();var wrapper,_destroy=function _destroy(exp){$(exp).removeData(\"resizable\").removeData(\"ui-resizable\").off(\".resizable\");};// TODO: Unwrap at same DOM position\nif(this.elementIsWrapper){_destroy(this.element);wrapper=this.element;this.originalElement.css({position:wrapper.css(\"position\"),width:wrapper.outerWidth(),height:wrapper.outerHeight(),top:wrapper.css(\"top\"),left:wrapper.css(\"left\")}).insertAfter(wrapper);wrapper.remove();}this.originalElement.css(\"resize\",this.originalResizeStyle);_destroy(this.originalElement);return this;},_setOption:function _setOption(key,value){this._super(key,value);switch(key){case\"handles\":this._removeHandles();this._setupHandles();break;case\"aspectRatio\":this._aspectRatio=!!value;break;default:break;}},_setupHandles:function _setupHandles(){var o=this.options,handle,i,n,hname,axis,that=this;this.handles=o.handles||(!$(\".ui-resizable-handle\",this.element).length?\"e,s,se\":{n:\".ui-resizable-n\",e:\".ui-resizable-e\",s:\".ui-resizable-s\",w:\".ui-resizable-w\",se:\".ui-resizable-se\",sw:\".ui-resizable-sw\",ne:\".ui-resizable-ne\",nw:\".ui-resizable-nw\"});this._handles=$();this._addedHandles=$();if(this.handles.constructor===String){if(this.handles===\"all\"){this.handles=\"n,e,s,w,se,sw,ne,nw\";}n=this.handles.split(\",\");this.handles={};for(i=0;i<n.length;i++){handle=String.prototype.trim.call(n[i]);hname=\"ui-resizable-\"+handle;axis=$(\"<div>\");this._addClass(axis,\"ui-resizable-handle \"+hname);axis.css({zIndex:o.zIndex});this.handles[handle]=\".ui-resizable-\"+handle;if(!this.element.children(this.handles[handle]).length){this.element.append(axis);this._addedHandles=this._addedHandles.add(axis);}}}this._renderAxis=function(target){var i,axis,padPos,padWrapper;target=target||this.element;for(i in this.handles){if(this.handles[i].constructor===String){this.handles[i]=this.element.children(this.handles[i]).first().show();}else if(this.handles[i].jquery||this.handles[i].nodeType){this.handles[i]=$(this.handles[i]);this._on(this.handles[i],{\"mousedown\":that._mouseDown});}if(this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)){axis=$(this.handles[i],this.element);padWrapper=/sw|ne|nw|se|n|s/.test(i)?axis.outerHeight():axis.outerWidth();padPos=[\"padding\",/ne|nw|n/.test(i)?\"Top\":/se|sw|s/.test(i)?\"Bottom\":/^e$/.test(i)?\"Right\":\"Left\"].join(\"\");target.css(padPos,padWrapper);this._proportionallyResize();}this._handles=this._handles.add(this.handles[i]);}};// TODO: make renderAxis a prototype function\nthis._renderAxis(this.element);this._handles=this._handles.add(this.element.find(\".ui-resizable-handle\"));this._handles.disableSelection();this._handles.on(\"mouseover\",function(){if(!that.resizing){if(this.className){axis=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);}that.axis=axis&&axis[1]?axis[1]:\"se\";}});if(o.autoHide){this._handles.hide();this._addClass(\"ui-resizable-autohide\");}},_removeHandles:function _removeHandles(){this._addedHandles.remove();},_mouseCapture:function _mouseCapture(event){var i,handle,capture=false;for(i in this.handles){handle=$(this.handles[i])[0];if(handle===event.target||$.contains(handle,event.target)){capture=true;}}return!this.options.disabled&&capture;},_mouseStart:function _mouseStart(event){var curleft,curtop,cursor,o=this.options,el=this.element;this.resizing=true;this._renderProxy();curleft=this._num(this.helper.css(\"left\"));curtop=this._num(this.helper.css(\"top\"));if(o.containment){curleft+=$(o.containment).scrollLeft()||0;curtop+=$(o.containment).scrollTop()||0;}this.offset=this.helper.offset();this.position={left:curleft,top:curtop};this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:el.width(),height:el.height()};this.originalSize=this._helper?{width:el.outerWidth(),height:el.outerHeight()}:{width:el.width(),height:el.height()};this.sizeDiff={width:el.outerWidth()-el.width(),height:el.outerHeight()-el.height()};this.originalPosition={left:curleft,top:curtop};this.originalMousePosition={left:event.pageX,top:event.pageY};this.aspectRatio=typeof o.aspectRatio===\"number\"?o.aspectRatio:this.originalSize.width/this.originalSize.height||1;cursor=$(\".ui-resizable-\"+this.axis).css(\"cursor\");$(\"body\").css(\"cursor\",cursor===\"auto\"?this.axis+\"-resize\":cursor);this._addClass(\"ui-resizable-resizing\");this._propagate(\"start\",event);return true;},_mouseDrag:function _mouseDrag(event){var data,props,smp=this.originalMousePosition,a=this.axis,dx=event.pageX-smp.left||0,dy=event.pageY-smp.top||0,trigger=this._change[a];this._updatePrevProperties();if(!trigger){return false;}data=trigger.apply(this,[event,dx,dy]);this._updateVirtualBoundaries(event.shiftKey);if(this._aspectRatio||event.shiftKey){data=this._updateRatio(data,event);}data=this._respectSize(data,event);this._updateCache(data);this._propagate(\"resize\",event);props=this._applyChanges();if(!this._helper&&this._proportionallyResizeElements.length){this._proportionallyResize();}if(!$.isEmptyObject(props)){this._updatePrevProperties();this._trigger(\"resize\",event,this.ui());this._applyChanges();}return false;},_mouseStop:function _mouseStop(event){this.resizing=false;var pr,ista,soffseth,soffsetw,s,left,top,o=this.options,that=this;if(this._helper){pr=this._proportionallyResizeElements;ista=pr.length&&/textarea/i.test(pr[0].nodeName);soffseth=ista&&this._hasScroll(pr[0],\"left\")?0:that.sizeDiff.height;soffsetw=ista?0:that.sizeDiff.width;s={width:that.helper.width()-soffsetw,height:that.helper.height()-soffseth};left=parseFloat(that.element.css(\"left\"))+(that.position.left-that.originalPosition.left)||null;top=parseFloat(that.element.css(\"top\"))+(that.position.top-that.originalPosition.top)||null;if(!o.animate){this.element.css($.extend(s,{top:top,left:left}));}that.helper.height(that.size.height);that.helper.width(that.size.width);if(this._helper&&!o.animate){this._proportionallyResize();}}$(\"body\").css(\"cursor\",\"auto\");this._removeClass(\"ui-resizable-resizing\");this._propagate(\"stop\",event);if(this._helper){this.helper.remove();}return false;},_updatePrevProperties:function _updatePrevProperties(){this.prevPosition={top:this.position.top,left:this.position.left};this.prevSize={width:this.size.width,height:this.size.height};},_applyChanges:function _applyChanges(){var props={};if(this.position.top!==this.prevPosition.top){props.top=this.position.top+\"px\";}if(this.position.left!==this.prevPosition.left){props.left=this.position.left+\"px\";}if(this.size.width!==this.prevSize.width){props.width=this.size.width+\"px\";}if(this.size.height!==this.prevSize.height){props.height=this.size.height+\"px\";}this.helper.css(props);return props;},_updateVirtualBoundaries:function _updateVirtualBoundaries(forceAspectRatio){var pMinWidth,pMaxWidth,pMinHeight,pMaxHeight,b,o=this.options;b={minWidth:this._isNumber(o.minWidth)?o.minWidth:0,maxWidth:this._isNumber(o.maxWidth)?o.maxWidth:Infinity,minHeight:this._isNumber(o.minHeight)?o.minHeight:0,maxHeight:this._isNumber(o.maxHeight)?o.maxHeight:Infinity};if(this._aspectRatio||forceAspectRatio){pMinWidth=b.minHeight*this.aspectRatio;pMinHeight=b.minWidth/this.aspectRatio;pMaxWidth=b.maxHeight*this.aspectRatio;pMaxHeight=b.maxWidth/this.aspectRatio;if(pMinWidth>b.minWidth){b.minWidth=pMinWidth;}if(pMinHeight>b.minHeight){b.minHeight=pMinHeight;}if(pMaxWidth<b.maxWidth){b.maxWidth=pMaxWidth;}if(pMaxHeight<b.maxHeight){b.maxHeight=pMaxHeight;}}this._vBoundaries=b;},_updateCache:function _updateCache(data){this.offset=this.helper.offset();if(this._isNumber(data.left)){this.position.left=data.left;}if(this._isNumber(data.top)){this.position.top=data.top;}if(this._isNumber(data.height)){this.size.height=data.height;}if(this._isNumber(data.width)){this.size.width=data.width;}},_updateRatio:function _updateRatio(data){var cpos=this.position,csize=this.size,a=this.axis;if(this._isNumber(data.height)){data.width=data.height*this.aspectRatio;}else if(this._isNumber(data.width)){data.height=data.width/this.aspectRatio;}if(a===\"sw\"){data.left=cpos.left+(csize.width-data.width);data.top=null;}if(a===\"nw\"){data.top=cpos.top+(csize.height-data.height);data.left=cpos.left+(csize.width-data.width);}return data;},_respectSize:function _respectSize(data){var o=this._vBoundaries,a=this.axis,ismaxw=this._isNumber(data.width)&&o.maxWidth&&o.maxWidth<data.width,ismaxh=this._isNumber(data.height)&&o.maxHeight&&o.maxHeight<data.height,isminw=this._isNumber(data.width)&&o.minWidth&&o.minWidth>data.width,isminh=this._isNumber(data.height)&&o.minHeight&&o.minHeight>data.height,dw=this.originalPosition.left+this.originalSize.width,dh=this.originalPosition.top+this.originalSize.height,cw=/sw|nw|w/.test(a),ch=/nw|ne|n/.test(a);if(isminw){data.width=o.minWidth;}if(isminh){data.height=o.minHeight;}if(ismaxw){data.width=o.maxWidth;}if(ismaxh){data.height=o.maxHeight;}if(isminw&&cw){data.left=dw-o.minWidth;}if(ismaxw&&cw){data.left=dw-o.maxWidth;}if(isminh&&ch){data.top=dh-o.minHeight;}if(ismaxh&&ch){data.top=dh-o.maxHeight;}// Fixing jump error on top/left - bug #2330\nif(!data.width&&!data.height&&!data.left&&data.top){data.top=null;}else if(!data.width&&!data.height&&!data.top&&data.left){data.left=null;}return data;},_getPaddingPlusBorderDimensions:function _getPaddingPlusBorderDimensions(element){var i=0,widths=[],borders=[element.css(\"borderTopWidth\"),element.css(\"borderRightWidth\"),element.css(\"borderBottomWidth\"),element.css(\"borderLeftWidth\")],paddings=[element.css(\"paddingTop\"),element.css(\"paddingRight\"),element.css(\"paddingBottom\"),element.css(\"paddingLeft\")];for(;i<4;i++){widths[i]=parseFloat(borders[i])||0;widths[i]+=parseFloat(paddings[i])||0;}return{height:widths[0]+widths[2],width:widths[1]+widths[3]};},_proportionallyResize:function _proportionallyResize(){if(!this._proportionallyResizeElements.length){return;}var prel,i=0,element=this.helper||this.element;for(;i<this._proportionallyResizeElements.length;i++){prel=this._proportionallyResizeElements[i];// TODO: Seems like a bug to cache this.outerDimensions\n// considering that we are in a loop.\nif(!this.outerDimensions){this.outerDimensions=this._getPaddingPlusBorderDimensions(prel);}prel.css({height:element.height()-this.outerDimensions.height||0,width:element.width()-this.outerDimensions.width||0});}},_renderProxy:function _renderProxy(){var el=this.element,o=this.options;this.elementOffset=el.offset();if(this._helper){this.helper=this.helper||$(\"<div></div>\").css({overflow:\"hidden\"});this._addClass(this.helper,this._helper);this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:\"absolute\",left:this.elementOffset.left+\"px\",top:this.elementOffset.top+\"px\",zIndex:++o.zIndex//TODO: Don't modify option\n});this.helper.appendTo(\"body\").disableSelection();}else{this.helper=this.element;}},_change:{e:function e(event,dx){return{width:this.originalSize.width+dx};},w:function w(event,dx){var cs=this.originalSize,sp=this.originalPosition;return{left:sp.left+dx,width:cs.width-dx};},n:function n(event,dx,dy){var cs=this.originalSize,sp=this.originalPosition;return{top:sp.top+dy,height:cs.height-dy};},s:function s(event,dx,dy){return{height:this.originalSize.height+dy};},se:function se(event,dx,dy){return $.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[event,dx,dy]));},sw:function sw(event,dx,dy){return $.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[event,dx,dy]));},ne:function ne(event,dx,dy){return $.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[event,dx,dy]));},nw:function nw(event,dx,dy){return $.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[event,dx,dy]));}},_propagate:function _propagate(n,event){$.ui.plugin.call(this,n,[event,this.ui()]);if(n!==\"resize\"){this._trigger(n,event,this.ui());}},plugins:{},ui:function ui(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition};}});/*\r\n * Resizable Extensions\r\n */$.ui.plugin.add(\"resizable\",\"animate\",{stop:function stop(event){var that=$(this).resizable(\"instance\"),o=that.options,pr=that._proportionallyResizeElements,ista=pr.length&&/textarea/i.test(pr[0].nodeName),soffseth=ista&&that._hasScroll(pr[0],\"left\")?0:that.sizeDiff.height,soffsetw=ista?0:that.sizeDiff.width,style={width:that.size.width-soffsetw,height:that.size.height-soffseth},left=parseFloat(that.element.css(\"left\"))+(that.position.left-that.originalPosition.left)||null,top=parseFloat(that.element.css(\"top\"))+(that.position.top-that.originalPosition.top)||null;that.element.animate($.extend(style,top&&left?{top:top,left:left}:{}),{duration:o.animateDuration,easing:o.animateEasing,step:function step(){var data={width:parseFloat(that.element.css(\"width\")),height:parseFloat(that.element.css(\"height\")),top:parseFloat(that.element.css(\"top\")),left:parseFloat(that.element.css(\"left\"))};if(pr&&pr.length){$(pr[0]).css({width:data.width,height:data.height});}// Propagating resize, and updating values for each animation step\nthat._updateCache(data);that._propagate(\"resize\",event);}});}});$.ui.plugin.add(\"resizable\",\"containment\",{start:function start(){var element,p,co,ch,cw,width,height,that=$(this).resizable(\"instance\"),o=that.options,el=that.element,oc=o.containment,ce=oc instanceof $?oc.get(0):/parent/.test(oc)?el.parent().get(0):oc;if(!ce){return;}that.containerElement=$(ce);if(/document/.test(oc)||oc===document){that.containerOffset={left:0,top:0};that.containerPosition={left:0,top:0};that.parentData={element:$(document),left:0,top:0,width:$(document).width(),height:$(document).height()||document.body.parentNode.scrollHeight};}else{element=$(ce);p=[];$([\"Top\",\"Right\",\"Left\",\"Bottom\"]).each(function(i,name){p[i]=that._num(element.css(\"padding\"+name));});that.containerOffset=element.offset();that.containerPosition=element.position();that.containerSize={height:element.innerHeight()-p[3],width:element.innerWidth()-p[1]};co=that.containerOffset;ch=that.containerSize.height;cw=that.containerSize.width;width=that._hasScroll(ce,\"left\")?ce.scrollWidth:cw;height=that._hasScroll(ce)?ce.scrollHeight:ch;that.parentData={element:ce,left:co.left,top:co.top,width:width,height:height};}},resize:function resize(event){var woset,hoset,isParent,isOffsetRelative,that=$(this).resizable(\"instance\"),o=that.options,co=that.containerOffset,cp=that.position,pRatio=that._aspectRatio||event.shiftKey,cop={top:0,left:0},ce=that.containerElement,continueResize=true;if(ce[0]!==document&&/static/.test(ce.css(\"position\"))){cop=co;}if(cp.left<(that._helper?co.left:0)){that.size.width=that.size.width+(that._helper?that.position.left-co.left:that.position.left-cop.left);if(pRatio){that.size.height=that.size.width/that.aspectRatio;continueResize=false;}that.position.left=o.helper?co.left:0;}if(cp.top<(that._helper?co.top:0)){that.size.height=that.size.height+(that._helper?that.position.top-co.top:that.position.top);if(pRatio){that.size.width=that.size.height*that.aspectRatio;continueResize=false;}that.position.top=that._helper?co.top:0;}isParent=that.containerElement.get(0)===that.element.parent().get(0);isOffsetRelative=/relative|absolute/.test(that.containerElement.css(\"position\"));if(isParent&&isOffsetRelative){that.offset.left=that.parentData.left+that.position.left;that.offset.top=that.parentData.top+that.position.top;}else{that.offset.left=that.element.offset().left;that.offset.top=that.element.offset().top;}woset=Math.abs(that.sizeDiff.width+(that._helper?that.offset.left-cop.left:that.offset.left-co.left));hoset=Math.abs(that.sizeDiff.height+(that._helper?that.offset.top-cop.top:that.offset.top-co.top));if(woset+that.size.width>=that.parentData.width){that.size.width=that.parentData.width-woset;if(pRatio){that.size.height=that.size.width/that.aspectRatio;continueResize=false;}}if(hoset+that.size.height>=that.parentData.height){that.size.height=that.parentData.height-hoset;if(pRatio){that.size.width=that.size.height*that.aspectRatio;continueResize=false;}}if(!continueResize){that.position.left=that.prevPosition.left;that.position.top=that.prevPosition.top;that.size.width=that.prevSize.width;that.size.height=that.prevSize.height;}},stop:function stop(){var that=$(this).resizable(\"instance\"),o=that.options,co=that.containerOffset,cop=that.containerPosition,ce=that.containerElement,helper=$(that.helper),ho=helper.offset(),w=helper.outerWidth()-that.sizeDiff.width,h=helper.outerHeight()-that.sizeDiff.height;if(that._helper&&!o.animate&&/relative/.test(ce.css(\"position\"))){$(this).css({left:ho.left-cop.left-co.left,width:w,height:h});}if(that._helper&&!o.animate&&/static/.test(ce.css(\"position\"))){$(this).css({left:ho.left-cop.left-co.left,width:w,height:h});}}});$.ui.plugin.add(\"resizable\",\"alsoResize\",{start:function start(){var that=$(this).resizable(\"instance\"),o=that.options;$(o.alsoResize).each(function(){var el=$(this);el.data(\"ui-resizable-alsoresize\",{width:parseFloat(el.width()),height:parseFloat(el.height()),left:parseFloat(el.css(\"left\")),top:parseFloat(el.css(\"top\"))});});},resize:function resize(event,ui){var that=$(this).resizable(\"instance\"),o=that.options,os=that.originalSize,op=that.originalPosition,delta={height:that.size.height-os.height||0,width:that.size.width-os.width||0,top:that.position.top-op.top||0,left:that.position.left-op.left||0};$(o.alsoResize).each(function(){var el=$(this),start=$(this).data(\"ui-resizable-alsoresize\"),style={},css=el.parents(ui.originalElement[0]).length?[\"width\",\"height\"]:[\"width\",\"height\",\"top\",\"left\"];$.each(css,function(i,prop){var sum=(start[prop]||0)+(delta[prop]||0);if(sum&&sum>=0){style[prop]=sum||null;}});el.css(style);});},stop:function stop(){$(this).removeData(\"ui-resizable-alsoresize\");}});$.ui.plugin.add(\"resizable\",\"ghost\",{start:function start(){var that=$(this).resizable(\"instance\"),cs=that.size;that.ghost=that.originalElement.clone();that.ghost.css({opacity:0.25,display:\"block\",position:\"relative\",height:cs.height,width:cs.width,margin:0,left:0,top:0});that._addClass(that.ghost,\"ui-resizable-ghost\");// DEPRECATED\n// TODO: remove after 1.12\nif($.uiBackCompat!==false&&typeof that.options.ghost===\"string\"){// Ghost option\nthat.ghost.addClass(this.options.ghost);}that.ghost.appendTo(that.helper);},resize:function resize(){var that=$(this).resizable(\"instance\");if(that.ghost){that.ghost.css({position:\"relative\",height:that.size.height,width:that.size.width});}},stop:function stop(){var that=$(this).resizable(\"instance\");if(that.ghost&&that.helper){that.helper.get(0).removeChild(that.ghost.get(0));}}});$.ui.plugin.add(\"resizable\",\"grid\",{resize:function resize(){var outerDimensions,that=$(this).resizable(\"instance\"),o=that.options,cs=that.size,os=that.originalSize,op=that.originalPosition,a=that.axis,grid=typeof o.grid===\"number\"?[o.grid,o.grid]:o.grid,gridX=grid[0]||1,gridY=grid[1]||1,ox=Math.round((cs.width-os.width)/gridX)*gridX,oy=Math.round((cs.height-os.height)/gridY)*gridY,newWidth=os.width+ox,newHeight=os.height+oy,isMaxWidth=o.maxWidth&&o.maxWidth<newWidth,isMaxHeight=o.maxHeight&&o.maxHeight<newHeight,isMinWidth=o.minWidth&&o.minWidth>newWidth,isMinHeight=o.minHeight&&o.minHeight>newHeight;o.grid=grid;if(isMinWidth){newWidth+=gridX;}if(isMinHeight){newHeight+=gridY;}if(isMaxWidth){newWidth-=gridX;}if(isMaxHeight){newHeight-=gridY;}if(/^(se|s|e)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;}else if(/^(ne)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;that.position.top=op.top-oy;}else if(/^(sw)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;that.position.left=op.left-ox;}else{if(newHeight-gridY<=0||newWidth-gridX<=0){outerDimensions=that._getPaddingPlusBorderDimensions(this);}if(newHeight-gridY>0){that.size.height=newHeight;that.position.top=op.top-oy;}else{newHeight=gridY-outerDimensions.height;that.size.height=newHeight;that.position.top=op.top+os.height-newHeight;}if(newWidth-gridX>0){that.size.width=newWidth;that.position.left=op.left-ox;}else{newWidth=gridX-outerDimensions.width;that.size.width=newWidth;that.position.left=op.left+os.width-newWidth;}}}});var widgetsResizable=$.ui.resizable;/*!\r\n * jQuery UI Dialog 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Dialog\n//>>group: Widgets\n//>>description: Displays customizable dialog windows.\n//>>docs: http://api.jqueryui.com/dialog/\n//>>demos: http://jqueryui.com/dialog/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/dialog.css\n//>>css.theme: ../../themes/base/theme.css\n$.widget(\"ui.dialog\",{version:\"1.13.1\",options:{appendTo:\"body\",autoOpen:true,buttons:[],classes:{\"ui-dialog\":\"ui-corner-all\",\"ui-dialog-titlebar\":\"ui-corner-all\"},closeOnEscape:true,closeText:\"Close\",draggable:true,hide:null,height:\"auto\",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:false,position:{my:\"center\",at:\"center\",of:window,collision:\"fit\",// Ensure the titlebar is always visible\nusing:function using(pos){var topOffset=$(this).css(pos).offset().top;if(topOffset<0){$(this).css(\"top\",pos.top-topOffset);}}},resizable:true,show:null,title:null,width:300,// Callbacks\nbeforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:true,height:true,maxHeight:true,maxWidth:true,minHeight:true,minWidth:true,width:true},resizableRelatedOptions:{maxHeight:true,maxWidth:true,minHeight:true,minWidth:true},_create:function _create(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height};this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)};this.originalTitle=this.element.attr(\"title\");if(this.options.title==null&&this.originalTitle!=null){this.options.title=this.originalTitle;}// Dialogs can't be disabled\nif(this.options.disabled){this.options.disabled=false;}this._createWrapper();this.element.show().removeAttr(\"title\").appendTo(this.uiDialog);this._addClass(\"ui-dialog-content\",\"ui-widget-content\");this._createTitlebar();this._createButtonPane();if(this.options.draggable&&$.fn.draggable){this._makeDraggable();}if(this.options.resizable&&$.fn.resizable){this._makeResizable();}this._isOpen=false;this._trackFocus();},_init:function _init(){if(this.options.autoOpen){this.open();}},_appendTo:function _appendTo(){var element=this.options.appendTo;if(element&&(element.jquery||element.nodeType)){return $(element);}return this.document.find(element||\"body\").eq(0);},_destroy:function _destroy(){var next,originalPosition=this.originalPosition;this._untrackInstance();this._destroyOverlay();this.element.removeUniqueId().css(this.originalCss)// Without detaching first, the following becomes really slow\n.detach();this.uiDialog.remove();if(this.originalTitle){this.element.attr(\"title\",this.originalTitle);}next=originalPosition.parent.children().eq(originalPosition.index);// Don't try to place the dialog next to itself (#8613)\nif(next.length&&next[0]!==this.element[0]){next.before(this.element);}else{originalPosition.parent.append(this.element);}},widget:function widget(){return this.uiDialog;},disable:$.noop,enable:$.noop,close:function close(event){var that=this;if(!this._isOpen||this._trigger(\"beforeClose\",event)===false){return;}this._isOpen=false;this._focusedElement=null;this._destroyOverlay();this._untrackInstance();if(!this.opener.filter(\":focusable\").trigger(\"focus\").length){// Hiding a focused element doesn't trigger blur in WebKit\n// so in case we have nothing to focus on, explicitly blur the active element\n// https://bugs.webkit.org/show_bug.cgi?id=47182\n$.ui.safeBlur($.ui.safeActiveElement(this.document[0]));}this._hide(this.uiDialog,this.options.hide,function(){that._trigger(\"close\",event);});},isOpen:function isOpen(){return this._isOpen;},moveToTop:function moveToTop(){this._moveToTop();},_moveToTop:function _moveToTop(event,silent){var moved=false,zIndices=this.uiDialog.siblings(\".ui-front:visible\").map(function(){return+$(this).css(\"z-index\");}).get(),zIndexMax=Math.max.apply(null,zIndices);if(zIndexMax>=+this.uiDialog.css(\"z-index\")){this.uiDialog.css(\"z-index\",zIndexMax+1);moved=true;}if(moved&&!silent){this._trigger(\"focus\",event);}return moved;},open:function open(){var that=this;if(this._isOpen){if(this._moveToTop()){this._focusTabbable();}return;}this._isOpen=true;this.opener=$($.ui.safeActiveElement(this.document[0]));this._size();this._position();this._createOverlay();this._moveToTop(null,true);// Ensure the overlay is moved to the top with the dialog, but only when\n// opening. The overlay shouldn't move after the dialog is open so that\n// modeless dialogs opened after the modal dialog stack properly.\nif(this.overlay){this.overlay.css(\"z-index\",this.uiDialog.css(\"z-index\")-1);}this._show(this.uiDialog,this.options.show,function(){that._focusTabbable();that._trigger(\"focus\");});// Track the dialog immediately upon opening in case a focus event\n// somehow occurs outside of the dialog before an element inside the\n// dialog is focused (#10152)\nthis._makeFocusTarget();this._trigger(\"open\");},_focusTabbable:function _focusTabbable(){// Set focus to the first match:\n// 1. An element that was focused previously\n// 2. First element inside the dialog matching [autofocus]\n// 3. Tabbable element inside the content element\n// 4. Tabbable element inside the buttonpane\n// 5. The close button\n// 6. The dialog itself\nvar hasFocus=this._focusedElement;if(!hasFocus){hasFocus=this.element.find(\"[autofocus]\");}if(!hasFocus.length){hasFocus=this.element.find(\":tabbable\");}if(!hasFocus.length){hasFocus=this.uiDialogButtonPane.find(\":tabbable\");}if(!hasFocus.length){hasFocus=this.uiDialogTitlebarClose.filter(\":tabbable\");}if(!hasFocus.length){hasFocus=this.uiDialog;}hasFocus.eq(0).trigger(\"focus\");},_restoreTabbableFocus:function _restoreTabbableFocus(){var activeElement=$.ui.safeActiveElement(this.document[0]),isActive=this.uiDialog[0]===activeElement||$.contains(this.uiDialog[0],activeElement);if(!isActive){this._focusTabbable();}},_keepFocus:function _keepFocus(event){event.preventDefault();this._restoreTabbableFocus();// support: IE\n// IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n// so we check again later\nthis._delay(this._restoreTabbableFocus);},_createWrapper:function _createWrapper(){this.uiDialog=$(\"<div>\").hide().attr({// Setting tabIndex makes the div focusable\ntabIndex:-1,role:\"dialog\"}).appendTo(this._appendTo());this._addClass(this.uiDialog,\"ui-dialog\",\"ui-widget ui-widget-content ui-front\");this._on(this.uiDialog,{keydown:function keydown(event){if(this.options.closeOnEscape&&!event.isDefaultPrevented()&&event.keyCode&&event.keyCode===$.ui.keyCode.ESCAPE){event.preventDefault();this.close(event);return;}// Prevent tabbing out of dialogs\nif(event.keyCode!==$.ui.keyCode.TAB||event.isDefaultPrevented()){return;}var tabbables=this.uiDialog.find(\":tabbable\"),first=tabbables.first(),last=tabbables.last();if((event.target===last[0]||event.target===this.uiDialog[0])&&!event.shiftKey){this._delay(function(){first.trigger(\"focus\");});event.preventDefault();}else if((event.target===first[0]||event.target===this.uiDialog[0])&&event.shiftKey){this._delay(function(){last.trigger(\"focus\");});event.preventDefault();}},mousedown:function mousedown(event){if(this._moveToTop(event)){this._focusTabbable();}}});// We assume that any existing aria-describedby attribute means\n// that the dialog content is marked up properly\n// otherwise we brute force the content as the description\nif(!this.element.find(\"[aria-describedby]\").length){this.uiDialog.attr({\"aria-describedby\":this.element.uniqueId().attr(\"id\")});}},_createTitlebar:function _createTitlebar(){var uiDialogTitle;this.uiDialogTitlebar=$(\"<div>\");this._addClass(this.uiDialogTitlebar,\"ui-dialog-titlebar\",\"ui-widget-header ui-helper-clearfix\");this._on(this.uiDialogTitlebar,{mousedown:function mousedown(event){// Don't prevent click on close button (#8838)\n// Focusing a dialog that is partially scrolled out of view\n// causes the browser to scroll it into view, preventing the click event\nif(!$(event.target).closest(\".ui-dialog-titlebar-close\")){// Dialog isn't getting focus when dragging (#8063)\nthis.uiDialog.trigger(\"focus\");}}});// Support: IE\n// Use type=\"button\" to prevent enter keypresses in textboxes from closing the\n// dialog in IE (#9312)\nthis.uiDialogTitlebarClose=$(\"<button type='button'></button>\").button({label:$(\"<a>\").text(this.options.closeText).html(),icon:\"ui-icon-closethick\",showLabel:false}).appendTo(this.uiDialogTitlebar);this._addClass(this.uiDialogTitlebarClose,\"ui-dialog-titlebar-close\");this._on(this.uiDialogTitlebarClose,{click:function click(event){event.preventDefault();this.close(event);}});uiDialogTitle=$(\"<span>\").uniqueId().prependTo(this.uiDialogTitlebar);this._addClass(uiDialogTitle,\"ui-dialog-title\");this._title(uiDialogTitle);this.uiDialogTitlebar.prependTo(this.uiDialog);this.uiDialog.attr({\"aria-labelledby\":uiDialogTitle.attr(\"id\")});},_title:function _title(title){if(this.options.title){title.text(this.options.title);}else{title.html(\"&#160;\");}},_createButtonPane:function _createButtonPane(){this.uiDialogButtonPane=$(\"<div>\");this._addClass(this.uiDialogButtonPane,\"ui-dialog-buttonpane\",\"ui-widget-content ui-helper-clearfix\");this.uiButtonSet=$(\"<div>\").appendTo(this.uiDialogButtonPane);this._addClass(this.uiButtonSet,\"ui-dialog-buttonset\");this._createButtons();},_createButtons:function _createButtons(){var that=this,buttons=this.options.buttons;// If we already have a button pane, remove it\nthis.uiDialogButtonPane.remove();this.uiButtonSet.empty();if($.isEmptyObject(buttons)||Array.isArray(buttons)&&!buttons.length){this._removeClass(this.uiDialog,\"ui-dialog-buttons\");return;}$.each(buttons,function(name,props){var click,buttonOptions;props=typeof props===\"function\"?{click:props,text:name}:props;// Default to a non-submitting button\nprops=$.extend({type:\"button\"},props);// Change the context for the click callback to be the main element\nclick=props.click;buttonOptions={icon:props.icon,iconPosition:props.iconPosition,showLabel:props.showLabel,// Deprecated options\nicons:props.icons,text:props.text};delete props.click;delete props.icon;delete props.iconPosition;delete props.showLabel;// Deprecated options\ndelete props.icons;if(typeof props.text===\"boolean\"){delete props.text;}$(\"<button></button>\",props).button(buttonOptions).appendTo(that.uiButtonSet).on(\"click\",function(){click.apply(that.element[0],arguments);});});this._addClass(this.uiDialog,\"ui-dialog-buttons\");this.uiDialogButtonPane.appendTo(this.uiDialog);},_makeDraggable:function _makeDraggable(){var that=this,options=this.options;function filteredUi(ui){return{position:ui.position,offset:ui.offset};}this.uiDialog.draggable({cancel:\".ui-dialog-content, .ui-dialog-titlebar-close\",handle:\".ui-dialog-titlebar\",containment:\"document\",start:function start(event,ui){that._addClass($(this),\"ui-dialog-dragging\");that._blockFrames();that._trigger(\"dragStart\",event,filteredUi(ui));},drag:function drag(event,ui){that._trigger(\"drag\",event,filteredUi(ui));},stop:function stop(event,ui){var left=ui.offset.left-that.document.scrollLeft(),top=ui.offset.top-that.document.scrollTop();options.position={my:\"left top\",at:\"left\"+(left>=0?\"+\":\"\")+left+\" \"+\"top\"+(top>=0?\"+\":\"\")+top,of:that.window};that._removeClass($(this),\"ui-dialog-dragging\");that._unblockFrames();that._trigger(\"dragStop\",event,filteredUi(ui));}});},_makeResizable:function _makeResizable(){var that=this,options=this.options,handles=options.resizable,// .ui-resizable has position: relative defined in the stylesheet\n// but dialogs have to use absolute or fixed positioning\nposition=this.uiDialog.css(\"position\"),resizeHandles=typeof handles===\"string\"?handles:\"n,e,s,w,se,sw,ne,nw\";function filteredUi(ui){return{originalPosition:ui.originalPosition,originalSize:ui.originalSize,position:ui.position,size:ui.size};}this.uiDialog.resizable({cancel:\".ui-dialog-content\",containment:\"document\",alsoResize:this.element,maxWidth:options.maxWidth,maxHeight:options.maxHeight,minWidth:options.minWidth,minHeight:this._minHeight(),handles:resizeHandles,start:function start(event,ui){that._addClass($(this),\"ui-dialog-resizing\");that._blockFrames();that._trigger(\"resizeStart\",event,filteredUi(ui));},resize:function resize(event,ui){that._trigger(\"resize\",event,filteredUi(ui));},stop:function stop(event,ui){var offset=that.uiDialog.offset(),left=offset.left-that.document.scrollLeft(),top=offset.top-that.document.scrollTop();options.height=that.uiDialog.height();options.width=that.uiDialog.width();options.position={my:\"left top\",at:\"left\"+(left>=0?\"+\":\"\")+left+\" \"+\"top\"+(top>=0?\"+\":\"\")+top,of:that.window};that._removeClass($(this),\"ui-dialog-resizing\");that._unblockFrames();that._trigger(\"resizeStop\",event,filteredUi(ui));}}).css(\"position\",position);},_trackFocus:function _trackFocus(){this._on(this.widget(),{focusin:function focusin(event){this._makeFocusTarget();this._focusedElement=$(event.target);}});},_makeFocusTarget:function _makeFocusTarget(){this._untrackInstance();this._trackingInstances().unshift(this);},_untrackInstance:function _untrackInstance(){var instances=this._trackingInstances(),exists=$.inArray(this,instances);if(exists!==-1){instances.splice(exists,1);}},_trackingInstances:function _trackingInstances(){var instances=this.document.data(\"ui-dialog-instances\");if(!instances){instances=[];this.document.data(\"ui-dialog-instances\",instances);}return instances;},_minHeight:function _minHeight(){var options=this.options;return options.height===\"auto\"?options.minHeight:Math.min(options.minHeight,options.height);},_position:function _position(){// Need to show the dialog to get the actual offset in the position plugin\nvar isVisible=this.uiDialog.is(\":visible\");if(!isVisible){this.uiDialog.show();}this.uiDialog.position(this.options.position);if(!isVisible){this.uiDialog.hide();}},_setOptions:function _setOptions(options){var that=this,resize=false,resizableOptions={};$.each(options,function(key,value){that._setOption(key,value);if(key in that.sizeRelatedOptions){resize=true;}if(key in that.resizableRelatedOptions){resizableOptions[key]=value;}});if(resize){this._size();this._position();}if(this.uiDialog.is(\":data(ui-resizable)\")){this.uiDialog.resizable(\"option\",resizableOptions);}},_setOption:function _setOption(key,value){var isDraggable,isResizable,uiDialog=this.uiDialog;if(key===\"disabled\"){return;}this._super(key,value);if(key===\"appendTo\"){this.uiDialog.appendTo(this._appendTo());}if(key===\"buttons\"){this._createButtons();}if(key===\"closeText\"){this.uiDialogTitlebarClose.button({// Ensure that we always pass a string\nlabel:$(\"<a>\").text(\"\"+this.options.closeText).html()});}if(key===\"draggable\"){isDraggable=uiDialog.is(\":data(ui-draggable)\");if(isDraggable&&!value){uiDialog.draggable(\"destroy\");}if(!isDraggable&&value){this._makeDraggable();}}if(key===\"position\"){this._position();}if(key===\"resizable\"){// currently resizable, becoming non-resizable\nisResizable=uiDialog.is(\":data(ui-resizable)\");if(isResizable&&!value){uiDialog.resizable(\"destroy\");}// Currently resizable, changing handles\nif(isResizable&&typeof value===\"string\"){uiDialog.resizable(\"option\",\"handles\",value);}// Currently non-resizable, becoming resizable\nif(!isResizable&&value!==false){this._makeResizable();}}if(key===\"title\"){this._title(this.uiDialogTitlebar.find(\".ui-dialog-title\"));}},_size:function _size(){// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n// divs will both have width and height set, so we need to reset them\nvar nonContentHeight,minContentHeight,maxContentHeight,options=this.options;// Reset content sizing\nthis.element.show().css({width:\"auto\",minHeight:0,maxHeight:\"none\",height:0});if(options.minWidth>options.width){options.width=options.minWidth;}// Reset wrapper sizing\n// determine the height of all the non-content elements\nnonContentHeight=this.uiDialog.css({height:\"auto\",width:options.width}).outerHeight();minContentHeight=Math.max(0,options.minHeight-nonContentHeight);maxContentHeight=typeof options.maxHeight===\"number\"?Math.max(0,options.maxHeight-nonContentHeight):\"none\";if(options.height===\"auto\"){this.element.css({minHeight:minContentHeight,maxHeight:maxContentHeight,height:\"auto\"});}else{this.element.height(Math.max(0,options.height-nonContentHeight));}if(this.uiDialog.is(\":data(ui-resizable)\")){this.uiDialog.resizable(\"option\",\"minHeight\",this._minHeight());}},_blockFrames:function _blockFrames(){this.iframeBlocks=this.document.find(\"iframe\").map(function(){var iframe=$(this);return $(\"<div>\").css({position:\"absolute\",width:iframe.outerWidth(),height:iframe.outerHeight()}).appendTo(iframe.parent()).offset(iframe.offset())[0];});},_unblockFrames:function _unblockFrames(){if(this.iframeBlocks){this.iframeBlocks.remove();delete this.iframeBlocks;}},_allowInteraction:function _allowInteraction(event){if($(event.target).closest(\".ui-dialog\").length){return true;}// TODO: Remove hack when datepicker implements\n// the .ui-front logic (#8989)\nreturn!!$(event.target).closest(\".ui-datepicker\").length;},_createOverlay:function _createOverlay(){if(!this.options.modal){return;}var jqMinor=$.fn.jquery.substring(0,4);// We use a delay in case the overlay is created from an\n// event that we're going to be cancelling (#2804)\nvar isOpening=true;this._delay(function(){isOpening=false;});if(!this.document.data(\"ui-dialog-overlays\")){// Prevent use of anchors and inputs\n// This doesn't use `_on()` because it is a shared event handler\n// across all open modal dialogs.\nthis.document.on(\"focusin.ui-dialog\",function(event){if(isOpening){return;}var instance=this._trackingInstances()[0];if(!instance._allowInteraction(event)){event.preventDefault();instance._focusTabbable();// Support: jQuery >=3.4 <3.6 only\n// Focus re-triggering in jQuery 3.4/3.5 makes the original element\n// have its focus event propagated last, breaking the re-targeting.\n// Trigger focus in a delay in addition if needed to avoid the issue\n// See https://github.com/jquery/jquery/issues/4382\nif(jqMinor===\"3.4.\"||jqMinor===\"3.5.\"){instance._delay(instance._restoreTabbableFocus);}}}.bind(this));}this.overlay=$(\"<div>\").appendTo(this._appendTo());this._addClass(this.overlay,null,\"ui-widget-overlay ui-front\");this._on(this.overlay,{mousedown:\"_keepFocus\"});this.document.data(\"ui-dialog-overlays\",(this.document.data(\"ui-dialog-overlays\")||0)+1);},_destroyOverlay:function _destroyOverlay(){if(!this.options.modal){return;}if(this.overlay){var overlays=this.document.data(\"ui-dialog-overlays\")-1;if(!overlays){this.document.off(\"focusin.ui-dialog\");this.document.removeData(\"ui-dialog-overlays\");}else{this.document.data(\"ui-dialog-overlays\",overlays);}this.overlay.remove();this.overlay=null;}}});// DEPRECATED\n// TODO: switch return back to widget declaration at top of file when this is removed\nif($.uiBackCompat!==false){// Backcompat for dialogClass option\n$.widget(\"ui.dialog\",$.ui.dialog,{options:{dialogClass:\"\"},_createWrapper:function _createWrapper(){this._super();this.uiDialog.addClass(this.options.dialogClass);},_setOption:function _setOption(key,value){if(key===\"dialogClass\"){this.uiDialog.removeClass(this.options.dialogClass).addClass(value);}this._superApply(arguments);}});}var widgetsDialog=$.ui.dialog;/*!\r\n * jQuery UI Droppable 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Droppable\n//>>group: Interactions\n//>>description: Enables drop targets for draggable elements.\n//>>docs: http://api.jqueryui.com/droppable/\n//>>demos: http://jqueryui.com/droppable/\n$.widget(\"ui.droppable\",{version:\"1.13.1\",widgetEventPrefix:\"drop\",options:{accept:\"*\",addClasses:true,greedy:false,scope:\"default\",tolerance:\"intersect\",// Callbacks\nactivate:null,deactivate:null,drop:null,out:null,over:null},_create:function _create(){var proportions,o=this.options,accept=o.accept;this.isover=false;this.isout=true;this.accept=typeof accept===\"function\"?accept:function(d){return d.is(accept);};this.proportions=function/* valueToWrite */(){if(arguments.length){// Store the droppable's proportions\nproportions=arguments[0];}else{// Retrieve or derive the droppable's proportions\nreturn proportions?proportions:proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight};}};this._addToManager(o.scope);if(o.addClasses){this._addClass(\"ui-droppable\");}},_addToManager:function _addToManager(scope){// Add the reference and positions to the manager\n$.ui.ddmanager.droppables[scope]=$.ui.ddmanager.droppables[scope]||[];$.ui.ddmanager.droppables[scope].push(this);},_splice:function _splice(drop){var i=0;for(;i<drop.length;i++){if(drop[i]===this){drop.splice(i,1);}}},_destroy:function _destroy(){var drop=$.ui.ddmanager.droppables[this.options.scope];this._splice(drop);},_setOption:function _setOption(key,value){if(key===\"accept\"){this.accept=typeof value===\"function\"?value:function(d){return d.is(value);};}else if(key===\"scope\"){var drop=$.ui.ddmanager.droppables[this.options.scope];this._splice(drop);this._addToManager(value);}this._super(key,value);},_activate:function _activate(event){var draggable=$.ui.ddmanager.current;this._addActiveClass();if(draggable){this._trigger(\"activate\",event,this.ui(draggable));}},_deactivate:function _deactivate(event){var draggable=$.ui.ddmanager.current;this._removeActiveClass();if(draggable){this._trigger(\"deactivate\",event,this.ui(draggable));}},_over:function _over(event){var draggable=$.ui.ddmanager.current;// Bail if draggable and droppable are same element\nif(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return;}if(this.accept.call(this.element[0],draggable.currentItem||draggable.element)){this._addHoverClass();this._trigger(\"over\",event,this.ui(draggable));}},_out:function _out(event){var draggable=$.ui.ddmanager.current;// Bail if draggable and droppable are same element\nif(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return;}if(this.accept.call(this.element[0],draggable.currentItem||draggable.element)){this._removeHoverClass();this._trigger(\"out\",event,this.ui(draggable));}},_drop:function _drop(event,custom){var draggable=custom||$.ui.ddmanager.current,childrenIntersection=false;// Bail if draggable and droppable are same element\nif(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return false;}this.element.find(\":data(ui-droppable)\").not(\".ui-draggable-dragging\").each(function(){var inst=$(this).droppable(\"instance\");if(inst.options.greedy&&!inst.options.disabled&&inst.options.scope===draggable.options.scope&&inst.accept.call(inst.element[0],draggable.currentItem||draggable.element)&&$.ui.intersect(draggable,$.extend(inst,{offset:inst.element.offset()}),inst.options.tolerance,event)){childrenIntersection=true;return false;}});if(childrenIntersection){return false;}if(this.accept.call(this.element[0],draggable.currentItem||draggable.element)){this._removeActiveClass();this._removeHoverClass();this._trigger(\"drop\",event,this.ui(draggable));return this.element;}return false;},ui:function ui(c){return{draggable:c.currentItem||c.element,helper:c.helper,position:c.position,offset:c.positionAbs};},// Extension points just to make backcompat sane and avoid duplicating logic\n// TODO: Remove in 1.14 along with call to it below\n_addHoverClass:function _addHoverClass(){this._addClass(\"ui-droppable-hover\");},_removeHoverClass:function _removeHoverClass(){this._removeClass(\"ui-droppable-hover\");},_addActiveClass:function _addActiveClass(){this._addClass(\"ui-droppable-active\");},_removeActiveClass:function _removeActiveClass(){this._removeClass(\"ui-droppable-active\");}});$.ui.intersect=function(){function isOverAxis(x,reference,size){return x>=reference&&x<reference+size;}return function(draggable,droppable,toleranceMode,event){if(!droppable.offset){return false;}var x1=(draggable.positionAbs||draggable.position.absolute).left+draggable.margins.left,y1=(draggable.positionAbs||draggable.position.absolute).top+draggable.margins.top,x2=x1+draggable.helperProportions.width,y2=y1+draggable.helperProportions.height,l=droppable.offset.left,t=droppable.offset.top,r=l+droppable.proportions().width,b=t+droppable.proportions().height;switch(toleranceMode){case\"fit\":return l<=x1&&x2<=r&&t<=y1&&y2<=b;case\"intersect\":return l<x1+draggable.helperProportions.width/2&&// Right Half\nx2-draggable.helperProportions.width/2<r&&// Left Half\nt<y1+draggable.helperProportions.height/2&&// Bottom Half\ny2-draggable.helperProportions.height/2<b;// Top Half\ncase\"pointer\":return isOverAxis(event.pageY,t,droppable.proportions().height)&&isOverAxis(event.pageX,l,droppable.proportions().width);case\"touch\":return(y1>=t&&y1<=b||// Top edge touching\ny2>=t&&y2<=b||// Bottom edge touching\ny1<t&&y2>b// Surrounded vertically\n)&&(x1>=l&&x1<=r||// Left edge touching\nx2>=l&&x2<=r||// Right edge touching\nx1<l&&x2>r// Surrounded horizontally\n);default:return false;}};}();/*\r\n\tThis manager tracks offsets of draggables and droppables\r\n*/$.ui.ddmanager={current:null,droppables:{\"default\":[]},prepareOffsets:function prepareOffsets(t,event){var i,j,m=$.ui.ddmanager.droppables[t.options.scope]||[],type=event?event.type:null,// workaround for #2317\nlist=(t.currentItem||t.element).find(\":data(ui-droppable)\").addBack();droppablesLoop:for(i=0;i<m.length;i++){// No disabled and non-accepted\nif(m[i].options.disabled||t&&!m[i].accept.call(m[i].element[0],t.currentItem||t.element)){continue;}// Filter out elements in the current dragged item\nfor(j=0;j<list.length;j++){if(list[j]===m[i].element[0]){m[i].proportions().height=0;continue droppablesLoop;}}m[i].visible=m[i].element.css(\"display\")!==\"none\";if(!m[i].visible){continue;}// Activate the droppable if used directly from draggables\nif(type===\"mousedown\"){m[i]._activate.call(m[i],event);}m[i].offset=m[i].element.offset();m[i].proportions({width:m[i].element[0].offsetWidth,height:m[i].element[0].offsetHeight});}},drop:function drop(draggable,event){var dropped=false;// Create a copy of the droppables in case the list changes during the drop (#9116)\n$.each(($.ui.ddmanager.droppables[draggable.options.scope]||[]).slice(),function(){if(!this.options){return;}if(!this.options.disabled&&this.visible&&$.ui.intersect(draggable,this,this.options.tolerance,event)){dropped=this._drop.call(this,event)||dropped;}if(!this.options.disabled&&this.visible&&this.accept.call(this.element[0],draggable.currentItem||draggable.element)){this.isout=true;this.isover=false;this._deactivate.call(this,event);}});return dropped;},dragStart:function dragStart(draggable,event){// Listen for scrolling so that if the dragging causes scrolling the position of the\n// droppables can be recalculated (see #5003)\ndraggable.element.parentsUntil(\"body\").on(\"scroll.droppable\",function(){if(!draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}});},drag:function drag(draggable,event){// If you have a highly dynamic page, you might try this option. It renders positions\n// every time you move the mouse.\nif(draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}// Run through all droppables and check their positions based on specific tolerance options\n$.each($.ui.ddmanager.droppables[draggable.options.scope]||[],function(){if(this.options.disabled||this.greedyChild||!this.visible){return;}var parentInstance,scope,parent,intersects=$.ui.intersect(draggable,this,this.options.tolerance,event),c=!intersects&&this.isover?\"isout\":intersects&&!this.isover?\"isover\":null;if(!c){return;}if(this.options.greedy){// find droppable parents with same scope\nscope=this.options.scope;parent=this.element.parents(\":data(ui-droppable)\").filter(function(){return $(this).droppable(\"instance\").options.scope===scope;});if(parent.length){parentInstance=$(parent[0]).droppable(\"instance\");parentInstance.greedyChild=c===\"isover\";}}// We just moved into a greedy child\nif(parentInstance&&c===\"isover\"){parentInstance.isover=false;parentInstance.isout=true;parentInstance._out.call(parentInstance,event);}this[c]=true;this[c===\"isout\"?\"isover\":\"isout\"]=false;this[c===\"isover\"?\"_over\":\"_out\"].call(this,event);// We just moved out of a greedy child\nif(parentInstance&&c===\"isout\"){parentInstance.isout=false;parentInstance.isover=true;parentInstance._over.call(parentInstance,event);}});},dragStop:function dragStop(draggable,event){draggable.element.parentsUntil(\"body\").off(\"scroll.droppable\");// Call prepareOffsets one final time since IE does not fire return scroll events when\n// overflow was caused by drag (see #5003)\nif(!draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}}};// DEPRECATED\n// TODO: switch return back to widget declaration at top of file when this is removed\nif($.uiBackCompat!==false){// Backcompat for activeClass and hoverClass options\n$.widget(\"ui.droppable\",$.ui.droppable,{options:{hoverClass:false,activeClass:false},_addActiveClass:function _addActiveClass(){this._super();if(this.options.activeClass){this.element.addClass(this.options.activeClass);}},_removeActiveClass:function _removeActiveClass(){this._super();if(this.options.activeClass){this.element.removeClass(this.options.activeClass);}},_addHoverClass:function _addHoverClass(){this._super();if(this.options.hoverClass){this.element.addClass(this.options.hoverClass);}},_removeHoverClass:function _removeHoverClass(){this._super();if(this.options.hoverClass){this.element.removeClass(this.options.hoverClass);}}});}var widgetsDroppable=$.ui.droppable;/*!\r\n * jQuery UI Progressbar 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Progressbar\n//>>group: Widgets\n/* eslint-disable max-len */ //>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.\n/* eslint-enable max-len */ //>>docs: http://api.jqueryui.com/progressbar/\n//>>demos: http://jqueryui.com/progressbar/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/progressbar.css\n//>>css.theme: ../../themes/base/theme.css\nvar widgetsProgressbar=$.widget(\"ui.progressbar\",{version:\"1.13.1\",options:{classes:{\"ui-progressbar\":\"ui-corner-all\",\"ui-progressbar-value\":\"ui-corner-left\",\"ui-progressbar-complete\":\"ui-corner-right\"},max:100,value:0,change:null,complete:null},min:0,_create:function _create(){// Constrain initial value\nthis.oldValue=this.options.value=this._constrainedValue();this.element.attr({// Only set static values; aria-valuenow and aria-valuemax are\n// set inside _refreshValue()\nrole:\"progressbar\",\"aria-valuemin\":this.min});this._addClass(\"ui-progressbar\",\"ui-widget ui-widget-content\");this.valueDiv=$(\"<div>\").appendTo(this.element);this._addClass(this.valueDiv,\"ui-progressbar-value\",\"ui-widget-header\");this._refreshValue();},_destroy:function _destroy(){this.element.removeAttr(\"role aria-valuemin aria-valuemax aria-valuenow\");this.valueDiv.remove();},value:function value(newValue){if(newValue===undefined){return this.options.value;}this.options.value=this._constrainedValue(newValue);this._refreshValue();},_constrainedValue:function _constrainedValue(newValue){if(newValue===undefined){newValue=this.options.value;}this.indeterminate=newValue===false;// Sanitize value\nif(typeof newValue!==\"number\"){newValue=0;}return this.indeterminate?false:Math.min(this.options.max,Math.max(this.min,newValue));},_setOptions:function _setOptions(options){// Ensure \"value\" option is set after other values (like max)\nvar value=options.value;delete options.value;this._super(options);this.options.value=this._constrainedValue(value);this._refreshValue();},_setOption:function _setOption(key,value){if(key===\"max\"){// Don't allow a max less than min\nvalue=Math.max(this.min,value);}this._super(key,value);},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this.element.attr(\"aria-disabled\",value);this._toggleClass(null,\"ui-state-disabled\",!!value);},_percentage:function _percentage(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min);},_refreshValue:function _refreshValue(){var value=this.options.value,percentage=this._percentage();this.valueDiv.toggle(this.indeterminate||value>this.min).width(percentage.toFixed(0)+\"%\");this._toggleClass(this.valueDiv,\"ui-progressbar-complete\",null,value===this.options.max)._toggleClass(\"ui-progressbar-indeterminate\",null,this.indeterminate);if(this.indeterminate){this.element.removeAttr(\"aria-valuenow\");if(!this.overlayDiv){this.overlayDiv=$(\"<div>\").appendTo(this.valueDiv);this._addClass(this.overlayDiv,\"ui-progressbar-overlay\");}}else{this.element.attr({\"aria-valuemax\":this.options.max,\"aria-valuenow\":value});if(this.overlayDiv){this.overlayDiv.remove();this.overlayDiv=null;}}if(this.oldValue!==value){this.oldValue=value;this._trigger(\"change\");}if(value===this.options.max){this._trigger(\"complete\");}}});/*!\r\n * jQuery UI Selectable 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Selectable\n//>>group: Interactions\n//>>description: Allows groups of elements to be selected with the mouse.\n//>>docs: http://api.jqueryui.com/selectable/\n//>>demos: http://jqueryui.com/selectable/\n//>>css.structure: ../../themes/base/selectable.css\nvar widgetsSelectable=$.widget(\"ui.selectable\",$.ui.mouse,{version:\"1.13.1\",options:{appendTo:\"body\",autoRefresh:true,distance:0,filter:\"*\",tolerance:\"touch\",// Callbacks\nselected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function _create(){var that=this;this._addClass(\"ui-selectable\");this.dragged=false;// Cache selectee children based on filter\nthis.refresh=function(){that.elementPos=$(that.element[0]).offset();that.selectees=$(that.options.filter,that.element[0]);that._addClass(that.selectees,\"ui-selectee\");that.selectees.each(function(){var $this=$(this),selecteeOffset=$this.offset(),pos={left:selecteeOffset.left-that.elementPos.left,top:selecteeOffset.top-that.elementPos.top};$.data(this,\"selectable-item\",{element:this,$element:$this,left:pos.left,top:pos.top,right:pos.left+$this.outerWidth(),bottom:pos.top+$this.outerHeight(),startselected:false,selected:$this.hasClass(\"ui-selected\"),selecting:$this.hasClass(\"ui-selecting\"),unselecting:$this.hasClass(\"ui-unselecting\")});});};this.refresh();this._mouseInit();this.helper=$(\"<div>\");this._addClass(this.helper,\"ui-selectable-helper\");},_destroy:function _destroy(){this.selectees.removeData(\"selectable-item\");this._mouseDestroy();},_mouseStart:function _mouseStart(event){var that=this,options=this.options;this.opos=[event.pageX,event.pageY];this.elementPos=$(this.element[0]).offset();if(this.options.disabled){return;}this.selectees=$(options.filter,this.element[0]);this._trigger(\"start\",event);$(options.appendTo).append(this.helper);// position helper (lasso)\nthis.helper.css({\"left\":event.pageX,\"top\":event.pageY,\"width\":0,\"height\":0});if(options.autoRefresh){this.refresh();}this.selectees.filter(\".ui-selected\").each(function(){var selectee=$.data(this,\"selectable-item\");selectee.startselected=true;if(!event.metaKey&&!event.ctrlKey){that._removeClass(selectee.$element,\"ui-selected\");selectee.selected=false;that._addClass(selectee.$element,\"ui-unselecting\");selectee.unselecting=true;// selectable UNSELECTING callback\nthat._trigger(\"unselecting\",event,{unselecting:selectee.element});}});$(event.target).parents().addBack().each(function(){var doSelect,selectee=$.data(this,\"selectable-item\");if(selectee){doSelect=!event.metaKey&&!event.ctrlKey||!selectee.$element.hasClass(\"ui-selected\");that._removeClass(selectee.$element,doSelect?\"ui-unselecting\":\"ui-selected\")._addClass(selectee.$element,doSelect?\"ui-selecting\":\"ui-unselecting\");selectee.unselecting=!doSelect;selectee.selecting=doSelect;selectee.selected=doSelect;// selectable (UN)SELECTING callback\nif(doSelect){that._trigger(\"selecting\",event,{selecting:selectee.element});}else{that._trigger(\"unselecting\",event,{unselecting:selectee.element});}return false;}});},_mouseDrag:function _mouseDrag(event){this.dragged=true;if(this.options.disabled){return;}var tmp,that=this,options=this.options,x1=this.opos[0],y1=this.opos[1],x2=event.pageX,y2=event.pageY;if(x1>x2){tmp=x2;x2=x1;x1=tmp;}if(y1>y2){tmp=y2;y2=y1;y1=tmp;}this.helper.css({left:x1,top:y1,width:x2-x1,height:y2-y1});this.selectees.each(function(){var selectee=$.data(this,\"selectable-item\"),hit=false,offset={};//prevent helper from being selected if appendTo: selectable\nif(!selectee||selectee.element===that.element[0]){return;}offset.left=selectee.left+that.elementPos.left;offset.right=selectee.right+that.elementPos.left;offset.top=selectee.top+that.elementPos.top;offset.bottom=selectee.bottom+that.elementPos.top;if(options.tolerance===\"touch\"){hit=!(offset.left>x2||offset.right<x1||offset.top>y2||offset.bottom<y1);}else if(options.tolerance===\"fit\"){hit=offset.left>x1&&offset.right<x2&&offset.top>y1&&offset.bottom<y2;}if(hit){// SELECT\nif(selectee.selected){that._removeClass(selectee.$element,\"ui-selected\");selectee.selected=false;}if(selectee.unselecting){that._removeClass(selectee.$element,\"ui-unselecting\");selectee.unselecting=false;}if(!selectee.selecting){that._addClass(selectee.$element,\"ui-selecting\");selectee.selecting=true;// selectable SELECTING callback\nthat._trigger(\"selecting\",event,{selecting:selectee.element});}}else{// UNSELECT\nif(selectee.selecting){if((event.metaKey||event.ctrlKey)&&selectee.startselected){that._removeClass(selectee.$element,\"ui-selecting\");selectee.selecting=false;that._addClass(selectee.$element,\"ui-selected\");selectee.selected=true;}else{that._removeClass(selectee.$element,\"ui-selecting\");selectee.selecting=false;if(selectee.startselected){that._addClass(selectee.$element,\"ui-unselecting\");selectee.unselecting=true;}// selectable UNSELECTING callback\nthat._trigger(\"unselecting\",event,{unselecting:selectee.element});}}if(selectee.selected){if(!event.metaKey&&!event.ctrlKey&&!selectee.startselected){that._removeClass(selectee.$element,\"ui-selected\");selectee.selected=false;that._addClass(selectee.$element,\"ui-unselecting\");selectee.unselecting=true;// selectable UNSELECTING callback\nthat._trigger(\"unselecting\",event,{unselecting:selectee.element});}}}});return false;},_mouseStop:function _mouseStop(event){var that=this;this.dragged=false;$(\".ui-unselecting\",this.element[0]).each(function(){var selectee=$.data(this,\"selectable-item\");that._removeClass(selectee.$element,\"ui-unselecting\");selectee.unselecting=false;selectee.startselected=false;that._trigger(\"unselected\",event,{unselected:selectee.element});});$(\".ui-selecting\",this.element[0]).each(function(){var selectee=$.data(this,\"selectable-item\");that._removeClass(selectee.$element,\"ui-selecting\")._addClass(selectee.$element,\"ui-selected\");selectee.selecting=false;selectee.selected=true;selectee.startselected=true;that._trigger(\"selected\",event,{selected:selectee.element});});this._trigger(\"stop\",event);this.helper.remove();return false;}});/*!\r\n * jQuery UI Selectmenu 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Selectmenu\n//>>group: Widgets\n/* eslint-disable max-len */ //>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.\n/* eslint-enable max-len */ //>>docs: http://api.jqueryui.com/selectmenu/\n//>>demos: http://jqueryui.com/selectmenu/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css\n//>>css.theme: ../../themes/base/theme.css\nvar widgetsSelectmenu=$.widget(\"ui.selectmenu\",[$.ui.formResetMixin,{version:\"1.13.1\",defaultElement:\"<select>\",options:{appendTo:null,classes:{\"ui-selectmenu-button-open\":\"ui-corner-top\",\"ui-selectmenu-button-closed\":\"ui-corner-all\"},disabled:null,icons:{button:\"ui-icon-triangle-1-s\"},position:{my:\"left top\",at:\"left bottom\",collision:\"none\"},width:false,// Callbacks\nchange:null,close:null,focus:null,open:null,select:null},_create:function _create(){var selectmenuId=this.element.uniqueId().attr(\"id\");this.ids={element:selectmenuId,button:selectmenuId+\"-button\",menu:selectmenuId+\"-menu\"};this._drawButton();this._drawMenu();this._bindFormResetHandler();this._rendered=false;this.menuItems=$();},_drawButton:function _drawButton(){var icon,that=this,item=this._parseOption(this.element.find(\"option:selected\"),this.element[0].selectedIndex);// Associate existing label with the new button\nthis.labels=this.element.labels().attr(\"for\",this.ids.button);this._on(this.labels,{click:function click(event){this.button.trigger(\"focus\");event.preventDefault();}});// Hide original select element\nthis.element.hide();// Create button\nthis.button=$(\"<span>\",{tabindex:this.options.disabled?-1:0,id:this.ids.button,role:\"combobox\",\"aria-expanded\":\"false\",\"aria-autocomplete\":\"list\",\"aria-owns\":this.ids.menu,\"aria-haspopup\":\"true\",title:this.element.attr(\"title\")}).insertAfter(this.element);this._addClass(this.button,\"ui-selectmenu-button ui-selectmenu-button-closed\",\"ui-button ui-widget\");icon=$(\"<span>\").appendTo(this.button);this._addClass(icon,\"ui-selectmenu-icon\",\"ui-icon \"+this.options.icons.button);this.buttonItem=this._renderButtonItem(item).appendTo(this.button);if(this.options.width!==false){this._resizeButton();}this._on(this.button,this._buttonEvents);this.button.one(\"focusin\",function(){// Delay rendering the menu items until the button receives focus.\n// The menu may have already been rendered via a programmatic open.\nif(!that._rendered){that._refreshMenu();}});},_drawMenu:function _drawMenu(){var that=this;// Create menu\nthis.menu=$(\"<ul>\",{\"aria-hidden\":\"true\",\"aria-labelledby\":this.ids.button,id:this.ids.menu});// Wrap menu\nthis.menuWrap=$(\"<div>\").append(this.menu);this._addClass(this.menuWrap,\"ui-selectmenu-menu\",\"ui-front\");this.menuWrap.appendTo(this._appendTo());// Initialize menu widget\nthis.menuInstance=this.menu.menu({classes:{\"ui-menu\":\"ui-corner-bottom\"},role:\"listbox\",select:function select(event,ui){event.preventDefault();// Support: IE8\n// If the item was selected via a click, the text selection\n// will be destroyed in IE\nthat._setSelection();that._select(ui.item.data(\"ui-selectmenu-item\"),event);},focus:function focus(event,ui){var item=ui.item.data(\"ui-selectmenu-item\");// Prevent inital focus from firing and check if its a newly focused item\nif(that.focusIndex!=null&&item.index!==that.focusIndex){that._trigger(\"focus\",event,{item:item});if(!that.isOpen){that._select(item,event);}}that.focusIndex=item.index;that.button.attr(\"aria-activedescendant\",that.menuItems.eq(item.index).attr(\"id\"));}}).menu(\"instance\");// Don't close the menu on mouseleave\nthis.menuInstance._off(this.menu,\"mouseleave\");// Cancel the menu's collapseAll on document click\nthis.menuInstance._closeOnDocumentClick=function(){return false;};// Selects often contain empty items, but never contain dividers\nthis.menuInstance._isDivider=function(){return false;};},refresh:function refresh(){this._refreshMenu();this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(// Fall back to an empty object in case there are no options\nthis._getSelectedItem().data(\"ui-selectmenu-item\")||{}));if(this.options.width===null){this._resizeButton();}},_refreshMenu:function _refreshMenu(){var item,options=this.element.find(\"option\");this.menu.empty();this._parseOptions(options);this._renderMenu(this.menu,this.items);this.menuInstance.refresh();this.menuItems=this.menu.find(\"li\").not(\".ui-selectmenu-optgroup\").find(\".ui-menu-item-wrapper\");this._rendered=true;if(!options.length){return;}item=this._getSelectedItem();// Update the menu to have the correct item focused\nthis.menuInstance.focus(null,item);this._setAria(item.data(\"ui-selectmenu-item\"));// Set disabled state\nthis._setOption(\"disabled\",this.element.prop(\"disabled\"));},open:function open(event){if(this.options.disabled){return;}// If this is the first time the menu is being opened, render the items\nif(!this._rendered){this._refreshMenu();}else{// Menu clears focus on close, reset focus to selected item\nthis._removeClass(this.menu.find(\".ui-state-active\"),null,\"ui-state-active\");this.menuInstance.focus(null,this._getSelectedItem());}// If there are no options, don't open the menu\nif(!this.menuItems.length){return;}this.isOpen=true;this._toggleAttr();this._resizeMenu();this._position();this._on(this.document,this._documentClick);this._trigger(\"open\",event);},_position:function _position(){this.menuWrap.position($.extend({of:this.button},this.options.position));},close:function close(event){if(!this.isOpen){return;}this.isOpen=false;this._toggleAttr();this.range=null;this._off(this.document);this._trigger(\"close\",event);},widget:function widget(){return this.button;},menuWidget:function menuWidget(){return this.menu;},_renderButtonItem:function _renderButtonItem(item){var buttonItem=$(\"<span>\");this._setText(buttonItem,item.label);this._addClass(buttonItem,\"ui-selectmenu-text\");return buttonItem;},_renderMenu:function _renderMenu(ul,items){var that=this,currentOptgroup=\"\";$.each(items,function(index,item){var li;if(item.optgroup!==currentOptgroup){li=$(\"<li>\",{text:item.optgroup});that._addClass(li,\"ui-selectmenu-optgroup\",\"ui-menu-divider\"+(item.element.parent(\"optgroup\").prop(\"disabled\")?\" ui-state-disabled\":\"\"));li.appendTo(ul);currentOptgroup=item.optgroup;}that._renderItemData(ul,item);});},_renderItemData:function _renderItemData(ul,item){return this._renderItem(ul,item).data(\"ui-selectmenu-item\",item);},_renderItem:function _renderItem(ul,item){var li=$(\"<li>\"),wrapper=$(\"<div>\",{title:item.element.attr(\"title\")});if(item.disabled){this._addClass(li,null,\"ui-state-disabled\");}this._setText(wrapper,item.label);return li.append(wrapper).appendTo(ul);},_setText:function _setText(element,value){if(value){element.text(value);}else{element.html(\"&#160;\");}},_move:function _move(direction,event){var item,next,filter=\".ui-menu-item\";if(this.isOpen){item=this.menuItems.eq(this.focusIndex).parent(\"li\");}else{item=this.menuItems.eq(this.element[0].selectedIndex).parent(\"li\");filter+=\":not(.ui-state-disabled)\";}if(direction===\"first\"||direction===\"last\"){next=item[direction===\"first\"?\"prevAll\":\"nextAll\"](filter).eq(-1);}else{next=item[direction+\"All\"](filter).eq(0);}if(next.length){this.menuInstance.focus(event,next);}},_getSelectedItem:function _getSelectedItem(){return this.menuItems.eq(this.element[0].selectedIndex).parent(\"li\");},_toggle:function _toggle(event){this[this.isOpen?\"close\":\"open\"](event);},_setSelection:function _setSelection(){var selection;if(!this.range){return;}if(window.getSelection){selection=window.getSelection();selection.removeAllRanges();selection.addRange(this.range);// Support: IE8\n}else{this.range.select();}// Support: IE\n// Setting the text selection kills the button focus in IE, but\n// restoring the focus doesn't kill the selection.\nthis.button.focus();},_documentClick:{mousedown:function mousedown(event){if(!this.isOpen){return;}if(!$(event.target).closest(\".ui-selectmenu-menu, #\"+$.escapeSelector(this.ids.button)).length){this.close(event);}}},_buttonEvents:{// Prevent text selection from being reset when interacting with the selectmenu (#10144)\nmousedown:function mousedown(){var selection;if(window.getSelection){selection=window.getSelection();if(selection.rangeCount){this.range=selection.getRangeAt(0);}// Support: IE8\n}else{this.range=document.selection.createRange();}},click:function click(event){this._setSelection();this._toggle(event);},keydown:function keydown(event){var preventDefault=true;switch(event.keyCode){case $.ui.keyCode.TAB:case $.ui.keyCode.ESCAPE:this.close(event);preventDefault=false;break;case $.ui.keyCode.ENTER:if(this.isOpen){this._selectFocusedItem(event);}break;case $.ui.keyCode.UP:if(event.altKey){this._toggle(event);}else{this._move(\"prev\",event);}break;case $.ui.keyCode.DOWN:if(event.altKey){this._toggle(event);}else{this._move(\"next\",event);}break;case $.ui.keyCode.SPACE:if(this.isOpen){this._selectFocusedItem(event);}else{this._toggle(event);}break;case $.ui.keyCode.LEFT:this._move(\"prev\",event);break;case $.ui.keyCode.RIGHT:this._move(\"next\",event);break;case $.ui.keyCode.HOME:case $.ui.keyCode.PAGE_UP:this._move(\"first\",event);break;case $.ui.keyCode.END:case $.ui.keyCode.PAGE_DOWN:this._move(\"last\",event);break;default:this.menu.trigger(event);preventDefault=false;}if(preventDefault){event.preventDefault();}}},_selectFocusedItem:function _selectFocusedItem(event){var item=this.menuItems.eq(this.focusIndex).parent(\"li\");if(!item.hasClass(\"ui-state-disabled\")){this._select(item.data(\"ui-selectmenu-item\"),event);}},_select:function _select(item,event){var oldIndex=this.element[0].selectedIndex;// Change native select element\nthis.element[0].selectedIndex=item.index;this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(item));this._setAria(item);this._trigger(\"select\",event,{item:item});if(item.index!==oldIndex){this._trigger(\"change\",event,{item:item});}this.close(event);},_setAria:function _setAria(item){var id=this.menuItems.eq(item.index).attr(\"id\");this.button.attr({\"aria-labelledby\":id,\"aria-activedescendant\":id});this.menu.attr(\"aria-activedescendant\",id);},_setOption:function _setOption(key,value){if(key===\"icons\"){var icon=this.button.find(\"span.ui-icon\");this._removeClass(icon,null,this.options.icons.button)._addClass(icon,null,value.button);}this._super(key,value);if(key===\"appendTo\"){this.menuWrap.appendTo(this._appendTo());}if(key===\"width\"){this._resizeButton();}},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this.menuInstance.option(\"disabled\",value);this.button.attr(\"aria-disabled\",value);this._toggleClass(this.button,null,\"ui-state-disabled\",value);this.element.prop(\"disabled\",value);if(value){this.button.attr(\"tabindex\",-1);this.close();}else{this.button.attr(\"tabindex\",0);}},_appendTo:function _appendTo(){var element=this.options.appendTo;if(element){element=element.jquery||element.nodeType?$(element):this.document.find(element).eq(0);}if(!element||!element[0]){element=this.element.closest(\".ui-front, dialog\");}if(!element.length){element=this.document[0].body;}return element;},_toggleAttr:function _toggleAttr(){this.button.attr(\"aria-expanded\",this.isOpen);// We can't use two _toggleClass() calls here, because we need to make sure\n// we always remove classes first and add them second, otherwise if both classes have the\n// same theme class, it will be removed after we add it.\nthis._removeClass(this.button,\"ui-selectmenu-button-\"+(this.isOpen?\"closed\":\"open\"))._addClass(this.button,\"ui-selectmenu-button-\"+(this.isOpen?\"open\":\"closed\"))._toggleClass(this.menuWrap,\"ui-selectmenu-open\",null,this.isOpen);this.menu.attr(\"aria-hidden\",!this.isOpen);},_resizeButton:function _resizeButton(){var width=this.options.width;// For `width: false`, just remove inline style and stop\nif(width===false){this.button.css(\"width\",\"\");return;}// For `width: null`, match the width of the original element\nif(width===null){width=this.element.show().outerWidth();this.element.hide();}this.button.outerWidth(width);},_resizeMenu:function _resizeMenu(){this.menu.outerWidth(Math.max(this.button.outerWidth(),// Support: IE10\n// IE10 wraps long text (possibly a rounding bug)\n// so we add 1px to avoid the wrapping\nthis.menu.width(\"\").outerWidth()+1));},_getCreateOptions:function _getCreateOptions(){var options=this._super();options.disabled=this.element.prop(\"disabled\");return options;},_parseOptions:function _parseOptions(options){var that=this,data=[];options.each(function(index,item){if(item.hidden){return;}data.push(that._parseOption($(item),index));});this.items=data;},_parseOption:function _parseOption(option,index){var optgroup=option.parent(\"optgroup\");return{element:option,index:index,value:option.val(),label:option.text(),optgroup:optgroup.attr(\"label\")||\"\",disabled:optgroup.prop(\"disabled\")||option.prop(\"disabled\")};},_destroy:function _destroy(){this._unbindFormResetHandler();this.menuWrap.remove();this.button.remove();this.element.show();this.element.removeUniqueId();this.labels.attr(\"for\",this.ids.element);}}]);/*!\r\n * jQuery UI Slider 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Slider\n//>>group: Widgets\n//>>description: Displays a flexible slider with ranges and accessibility via keyboard.\n//>>docs: http://api.jqueryui.com/slider/\n//>>demos: http://jqueryui.com/slider/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/slider.css\n//>>css.theme: ../../themes/base/theme.css\nvar widgetsSlider=$.widget(\"ui.slider\",$.ui.mouse,{version:\"1.13.1\",widgetEventPrefix:\"slide\",options:{animate:false,classes:{\"ui-slider\":\"ui-corner-all\",\"ui-slider-handle\":\"ui-corner-all\",// Note: ui-widget-header isn't the most fittingly semantic framework class for this\n// element, but worked best visually with a variety of themes\n\"ui-slider-range\":\"ui-corner-all ui-widget-header\"},distance:0,max:100,min:0,orientation:\"horizontal\",range:false,step:1,value:0,values:null,// Callbacks\nchange:null,slide:null,start:null,stop:null},// Number of pages in a slider\n// (how many times can you page up/down to go through the whole range)\nnumPages:5,_create:function _create(){this._keySliding=false;this._mouseSliding=false;this._animateOff=true;this._handleIndex=null;this._detectOrientation();this._mouseInit();this._calculateNewMax();this._addClass(\"ui-slider ui-slider-\"+this.orientation,\"ui-widget ui-widget-content\");this._refresh();this._animateOff=false;},_refresh:function _refresh(){this._createRange();this._createHandles();this._setupEvents();this._refreshValue();},_createHandles:function _createHandles(){var i,handleCount,options=this.options,existingHandles=this.element.find(\".ui-slider-handle\"),handle=\"<span tabindex='0'></span>\",handles=[];handleCount=options.values&&options.values.length||1;if(existingHandles.length>handleCount){existingHandles.slice(handleCount).remove();existingHandles=existingHandles.slice(0,handleCount);}for(i=existingHandles.length;i<handleCount;i++){handles.push(handle);}this.handles=existingHandles.add($(handles.join(\"\")).appendTo(this.element));this._addClass(this.handles,\"ui-slider-handle\",\"ui-state-default\");this.handle=this.handles.eq(0);this.handles.each(function(i){$(this).data(\"ui-slider-handle-index\",i).attr(\"tabIndex\",0);});},_createRange:function _createRange(){var options=this.options;if(options.range){if(options.range===true){if(!options.values){options.values=[this._valueMin(),this._valueMin()];}else if(options.values.length&&options.values.length!==2){options.values=[options.values[0],options.values[0]];}else if(Array.isArray(options.values)){options.values=options.values.slice(0);}}if(!this.range||!this.range.length){this.range=$(\"<div>\").appendTo(this.element);this._addClass(this.range,\"ui-slider-range\");}else{this._removeClass(this.range,\"ui-slider-range-min ui-slider-range-max\");// Handle range switching from true to min/max\nthis.range.css({\"left\":\"\",\"bottom\":\"\"});}if(options.range===\"min\"||options.range===\"max\"){this._addClass(this.range,\"ui-slider-range-\"+options.range);}}else{if(this.range){this.range.remove();}this.range=null;}},_setupEvents:function _setupEvents(){this._off(this.handles);this._on(this.handles,this._handleEvents);this._hoverable(this.handles);this._focusable(this.handles);},_destroy:function _destroy(){this.handles.remove();if(this.range){this.range.remove();}this._mouseDestroy();},_mouseCapture:function _mouseCapture(event){var position,normValue,distance,closestHandle,index,allowed,offset,mouseOverHandle,that=this,o=this.options;if(o.disabled){return false;}this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()};this.elementOffset=this.element.offset();position={x:event.pageX,y:event.pageY};normValue=this._normValueFromMouse(position);distance=this._valueMax()-this._valueMin()+1;this.handles.each(function(i){var thisDistance=Math.abs(normValue-that.values(i));if(distance>thisDistance||distance===thisDistance&&(i===that._lastChangedValue||that.values(i)===o.min)){distance=thisDistance;closestHandle=$(this);index=i;}});allowed=this._start(event,index);if(allowed===false){return false;}this._mouseSliding=true;this._handleIndex=index;this._addClass(closestHandle,null,\"ui-state-active\");closestHandle.trigger(\"focus\");offset=closestHandle.offset();mouseOverHandle=!$(event.target).parents().addBack().is(\".ui-slider-handle\");this._clickOffset=mouseOverHandle?{left:0,top:0}:{left:event.pageX-offset.left-closestHandle.width()/2,top:event.pageY-offset.top-closestHandle.height()/2-(parseInt(closestHandle.css(\"borderTopWidth\"),10)||0)-(parseInt(closestHandle.css(\"borderBottomWidth\"),10)||0)+(parseInt(closestHandle.css(\"marginTop\"),10)||0)};if(!this.handles.hasClass(\"ui-state-hover\")){this._slide(event,index,normValue);}this._animateOff=true;return true;},_mouseStart:function _mouseStart(){return true;},_mouseDrag:function _mouseDrag(event){var position={x:event.pageX,y:event.pageY},normValue=this._normValueFromMouse(position);this._slide(event,this._handleIndex,normValue);return false;},_mouseStop:function _mouseStop(event){this._removeClass(this.handles,null,\"ui-state-active\");this._mouseSliding=false;this._stop(event,this._handleIndex);this._change(event,this._handleIndex);this._handleIndex=null;this._clickOffset=null;this._animateOff=false;return false;},_detectOrientation:function _detectOrientation(){this.orientation=this.options.orientation===\"vertical\"?\"vertical\":\"horizontal\";},_normValueFromMouse:function _normValueFromMouse(position){var pixelTotal,pixelMouse,percentMouse,valueTotal,valueMouse;if(this.orientation===\"horizontal\"){pixelTotal=this.elementSize.width;pixelMouse=position.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0);}else{pixelTotal=this.elementSize.height;pixelMouse=position.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0);}percentMouse=pixelMouse/pixelTotal;if(percentMouse>1){percentMouse=1;}if(percentMouse<0){percentMouse=0;}if(this.orientation===\"vertical\"){percentMouse=1-percentMouse;}valueTotal=this._valueMax()-this._valueMin();valueMouse=this._valueMin()+percentMouse*valueTotal;return this._trimAlignValue(valueMouse);},_uiHash:function _uiHash(index,value,values){var uiHash={handle:this.handles[index],handleIndex:index,value:value!==undefined?value:this.value()};if(this._hasMultipleValues()){uiHash.value=value!==undefined?value:this.values(index);uiHash.values=values||this.values();}return uiHash;},_hasMultipleValues:function _hasMultipleValues(){return this.options.values&&this.options.values.length;},_start:function _start(event,index){return this._trigger(\"start\",event,this._uiHash(index));},_slide:function _slide(event,index,newVal){var allowed,otherVal,currentValue=this.value(),newValues=this.values();if(this._hasMultipleValues()){otherVal=this.values(index?0:1);currentValue=this.values(index);if(this.options.values.length===2&&this.options.range===true){newVal=index===0?Math.min(otherVal,newVal):Math.max(otherVal,newVal);}newValues[index]=newVal;}if(newVal===currentValue){return;}allowed=this._trigger(\"slide\",event,this._uiHash(index,newVal,newValues));// A slide can be canceled by returning false from the slide callback\nif(allowed===false){return;}if(this._hasMultipleValues()){this.values(index,newVal);}else{this.value(newVal);}},_stop:function _stop(event,index){this._trigger(\"stop\",event,this._uiHash(index));},_change:function _change(event,index){if(!this._keySliding&&!this._mouseSliding){//store the last changed value index for reference when handles overlap\nthis._lastChangedValue=index;this._trigger(\"change\",event,this._uiHash(index));}},value:function value(newValue){if(arguments.length){this.options.value=this._trimAlignValue(newValue);this._refreshValue();this._change(null,0);return;}return this._value();},values:function values(index,newValue){var vals,newValues,i;if(arguments.length>1){this.options.values[index]=this._trimAlignValue(newValue);this._refreshValue();this._change(null,index);return;}if(arguments.length){if(Array.isArray(arguments[0])){vals=this.options.values;newValues=arguments[0];for(i=0;i<vals.length;i+=1){vals[i]=this._trimAlignValue(newValues[i]);this._change(null,i);}this._refreshValue();}else{if(this._hasMultipleValues()){return this._values(index);}else{return this.value();}}}else{return this._values();}},_setOption:function _setOption(key,value){var i,valsLength=0;if(key===\"range\"&&this.options.range===true){if(value===\"min\"){this.options.value=this._values(0);this.options.values=null;}else if(value===\"max\"){this.options.value=this._values(this.options.values.length-1);this.options.values=null;}}if(Array.isArray(this.options.values)){valsLength=this.options.values.length;}this._super(key,value);switch(key){case\"orientation\":this._detectOrientation();this._removeClass(\"ui-slider-horizontal ui-slider-vertical\")._addClass(\"ui-slider-\"+this.orientation);this._refreshValue();if(this.options.range){this._refreshRange(value);}// Reset positioning from previous orientation\nthis.handles.css(value===\"horizontal\"?\"bottom\":\"left\",\"\");break;case\"value\":this._animateOff=true;this._refreshValue();this._change(null,0);this._animateOff=false;break;case\"values\":this._animateOff=true;this._refreshValue();// Start from the last handle to prevent unreachable handles (#9046)\nfor(i=valsLength-1;i>=0;i--){this._change(null,i);}this._animateOff=false;break;case\"step\":case\"min\":case\"max\":this._animateOff=true;this._calculateNewMax();this._refreshValue();this._animateOff=false;break;case\"range\":this._animateOff=true;this._refresh();this._animateOff=false;break;}},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this._toggleClass(null,\"ui-state-disabled\",!!value);},//internal value getter\n// _value() returns value trimmed by min and max, aligned by step\n_value:function _value(){var val=this.options.value;val=this._trimAlignValue(val);return val;},//internal values getter\n// _values() returns array of values trimmed by min and max, aligned by step\n// _values( index ) returns single value trimmed by min and max, aligned by step\n_values:function _values(index){var val,vals,i;if(arguments.length){val=this.options.values[index];val=this._trimAlignValue(val);return val;}else if(this._hasMultipleValues()){// .slice() creates a copy of the array\n// this copy gets trimmed by min and max and then returned\nvals=this.options.values.slice();for(i=0;i<vals.length;i+=1){vals[i]=this._trimAlignValue(vals[i]);}return vals;}else{return[];}},// Returns the step-aligned value that val is closest to, between (inclusive) min and max\n_trimAlignValue:function _trimAlignValue(val){if(val<=this._valueMin()){return this._valueMin();}if(val>=this._valueMax()){return this._valueMax();}var step=this.options.step>0?this.options.step:1,valModStep=(val-this._valueMin())%step,alignValue=val-valModStep;if(Math.abs(valModStep)*2>=step){alignValue+=valModStep>0?step:-step;}// Since JavaScript has problems with large floats, round\n// the final value to 5 digits after the decimal point (see #4124)\nreturn parseFloat(alignValue.toFixed(5));},_calculateNewMax:function _calculateNewMax(){var max=this.options.max,min=this._valueMin(),step=this.options.step,aboveMin=Math.round((max-min)/step)*step;max=aboveMin+min;if(max>this.options.max){//If max is not divisible by step, rounding off may increase its value\nmax-=step;}this.max=parseFloat(max.toFixed(this._precision()));},_precision:function _precision(){var precision=this._precisionOf(this.options.step);if(this.options.min!==null){precision=Math.max(precision,this._precisionOf(this.options.min));}return precision;},_precisionOf:function _precisionOf(num){var str=num.toString(),decimal=str.indexOf(\".\");return decimal===-1?0:str.length-decimal-1;},_valueMin:function _valueMin(){return this.options.min;},_valueMax:function _valueMax(){return this.max;},_refreshRange:function _refreshRange(orientation){if(orientation===\"vertical\"){this.range.css({\"width\":\"\",\"left\":\"\"});}if(orientation===\"horizontal\"){this.range.css({\"height\":\"\",\"bottom\":\"\"});}},_refreshValue:function _refreshValue(){var lastValPercent,valPercent,value,valueMin,valueMax,oRange=this.options.range,o=this.options,that=this,animate=!this._animateOff?o.animate:false,_set={};if(this._hasMultipleValues()){this.handles.each(function(i){valPercent=(that.values(i)-that._valueMin())/(that._valueMax()-that._valueMin())*100;_set[that.orientation===\"horizontal\"?\"left\":\"bottom\"]=valPercent+\"%\";$(this).stop(1,1)[animate?\"animate\":\"css\"](_set,o.animate);if(that.options.range===true){if(that.orientation===\"horizontal\"){if(i===0){that.range.stop(1,1)[animate?\"animate\":\"css\"]({left:valPercent+\"%\"},o.animate);}if(i===1){that.range[animate?\"animate\":\"css\"]({width:valPercent-lastValPercent+\"%\"},{queue:false,duration:o.animate});}}else{if(i===0){that.range.stop(1,1)[animate?\"animate\":\"css\"]({bottom:valPercent+\"%\"},o.animate);}if(i===1){that.range[animate?\"animate\":\"css\"]({height:valPercent-lastValPercent+\"%\"},{queue:false,duration:o.animate});}}}lastValPercent=valPercent;});}else{value=this.value();valueMin=this._valueMin();valueMax=this._valueMax();valPercent=valueMax!==valueMin?(value-valueMin)/(valueMax-valueMin)*100:0;_set[this.orientation===\"horizontal\"?\"left\":\"bottom\"]=valPercent+\"%\";this.handle.stop(1,1)[animate?\"animate\":\"css\"](_set,o.animate);if(oRange===\"min\"&&this.orientation===\"horizontal\"){this.range.stop(1,1)[animate?\"animate\":\"css\"]({width:valPercent+\"%\"},o.animate);}if(oRange===\"max\"&&this.orientation===\"horizontal\"){this.range.stop(1,1)[animate?\"animate\":\"css\"]({width:100-valPercent+\"%\"},o.animate);}if(oRange===\"min\"&&this.orientation===\"vertical\"){this.range.stop(1,1)[animate?\"animate\":\"css\"]({height:valPercent+\"%\"},o.animate);}if(oRange===\"max\"&&this.orientation===\"vertical\"){this.range.stop(1,1)[animate?\"animate\":\"css\"]({height:100-valPercent+\"%\"},o.animate);}}},_handleEvents:{keydown:function keydown(event){var allowed,curVal,newVal,step,index=$(event.target).data(\"ui-slider-handle-index\");switch(event.keyCode){case $.ui.keyCode.HOME:case $.ui.keyCode.END:case $.ui.keyCode.PAGE_UP:case $.ui.keyCode.PAGE_DOWN:case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:event.preventDefault();if(!this._keySliding){this._keySliding=true;this._addClass($(event.target),null,\"ui-state-active\");allowed=this._start(event,index);if(allowed===false){return;}}break;}step=this.options.step;if(this._hasMultipleValues()){curVal=newVal=this.values(index);}else{curVal=newVal=this.value();}switch(event.keyCode){case $.ui.keyCode.HOME:newVal=this._valueMin();break;case $.ui.keyCode.END:newVal=this._valueMax();break;case $.ui.keyCode.PAGE_UP:newVal=this._trimAlignValue(curVal+(this._valueMax()-this._valueMin())/this.numPages);break;case $.ui.keyCode.PAGE_DOWN:newVal=this._trimAlignValue(curVal-(this._valueMax()-this._valueMin())/this.numPages);break;case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:if(curVal===this._valueMax()){return;}newVal=this._trimAlignValue(curVal+step);break;case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:if(curVal===this._valueMin()){return;}newVal=this._trimAlignValue(curVal-step);break;}this._slide(event,index,newVal);},keyup:function keyup(event){var index=$(event.target).data(\"ui-slider-handle-index\");if(this._keySliding){this._keySliding=false;this._stop(event,index);this._change(event,index);this._removeClass($(event.target),null,\"ui-state-active\");}}}});/*!\r\n * jQuery UI Sortable 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Sortable\n//>>group: Interactions\n//>>description: Enables items in a list to be sorted using the mouse.\n//>>docs: http://api.jqueryui.com/sortable/\n//>>demos: http://jqueryui.com/sortable/\n//>>css.structure: ../../themes/base/sortable.css\nvar widgetsSortable=$.widget(\"ui.sortable\",$.ui.mouse,{version:\"1.13.1\",widgetEventPrefix:\"sort\",ready:false,options:{appendTo:\"parent\",axis:false,connectWith:false,containment:false,cursor:\"auto\",cursorAt:false,dropOnEmpty:true,forcePlaceholderSize:false,forceHelperSize:false,grid:false,handle:false,helper:\"original\",items:\"> *\",opacity:false,placeholder:false,revert:false,scroll:true,scrollSensitivity:20,scrollSpeed:20,scope:\"default\",tolerance:\"intersect\",zIndex:1000,// Callbacks\nactivate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function _isOverAxis(x,reference,size){return x>=reference&&x<reference+size;},_isFloating:function _isFloating(item){return /left|right/.test(item.css(\"float\"))||/inline|table-cell/.test(item.css(\"display\"));},_create:function _create(){this.containerCache={};this._addClass(\"ui-sortable\");//Get the items\nthis.refresh();//Let's determine the parent's offset\nthis.offset=this.element.offset();//Initialize mouse events for interaction\nthis._mouseInit();this._setHandleClassName();//We're ready to go\nthis.ready=true;},_setOption:function _setOption(key,value){this._super(key,value);if(key===\"handle\"){this._setHandleClassName();}},_setHandleClassName:function _setHandleClassName(){var that=this;this._removeClass(this.element.find(\".ui-sortable-handle\"),\"ui-sortable-handle\");$.each(this.items,function(){that._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,\"ui-sortable-handle\");});},_destroy:function _destroy(){this._mouseDestroy();for(var i=this.items.length-1;i>=0;i--){this.items[i].item.removeData(this.widgetName+\"-item\");}return this;},_mouseCapture:function _mouseCapture(event,overrideHandle){var currentItem=null,validHandle=false,that=this;if(this.reverting){return false;}if(this.options.disabled||this.options.type===\"static\"){return false;}//We have to refresh the items data once first\nthis._refreshItems(event);//Find out if the clicked node (or one of its parents) is a actual item in this.items\n$(event.target).parents().each(function(){if($.data(this,that.widgetName+\"-item\")===that){currentItem=$(this);return false;}});if($.data(event.target,that.widgetName+\"-item\")===that){currentItem=$(event.target);}if(!currentItem){return false;}if(this.options.handle&&!overrideHandle){$(this.options.handle,currentItem).find(\"*\").addBack().each(function(){if(this===event.target){validHandle=true;}});if(!validHandle){return false;}}this.currentItem=currentItem;this._removeCurrentsFromItems();return true;},_mouseStart:function _mouseStart(event,overrideHandle,noActivation){var i,body,o=this.options;this.currentContainer=this;//We only need to call refreshPositions, because the refreshItems call has been moved to\n// mouseCapture\nthis.refreshPositions();//Prepare the dragged items parent\nthis.appendTo=$(o.appendTo!==\"parent\"?o.appendTo:this.currentItem.parent());//Create and append the visible helper\nthis.helper=this._createHelper(event);//Cache the helper size\nthis._cacheHelperProportions();/*\r\n\t\t * - Position generation -\r\n\t\t * This block generates everything position related - it's the core of draggables.\r\n\t\t */ //Cache the margins of the original element\nthis._cacheMargins();//The element's absolute position on the page minus margins\nthis.offset=this.currentItem.offset();this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left};$.extend(this.offset,{click:{//Where the click happened, relative to the element\nleft:event.pageX-this.offset.left,top:event.pageY-this.offset.top},// This is a relative to absolute position minus the actual position calculation -\n// only used for relative positioned helper\nrelative:this._getRelativeOffset()});// After we get the helper offset, but before we get the parent offset we can\n// change the helper's position to absolute\n// TODO: Still need to figure out a way to make relative sorting possible\nthis.helper.css(\"position\",\"absolute\");this.cssPosition=this.helper.css(\"position\");//Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\nif(o.cursorAt){this._adjustOffsetFromHelper(o.cursorAt);}//Cache the former DOM position\nthis.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]};// If the helper is not the original, hide the original so it's not playing any role during\n// the drag, won't cause anything bad this way\nif(this.helper[0]!==this.currentItem[0]){this.currentItem.hide();}//Create the placeholder\nthis._createPlaceholder();//Get the next scrolling parent\nthis.scrollParent=this.placeholder.scrollParent();$.extend(this.offset,{parent:this._getParentOffset()});//Set a containment if given in the options\nif(o.containment){this._setContainment();}if(o.cursor&&o.cursor!==\"auto\"){// cursor option\nbody=this.document.find(\"body\");// Support: IE\nthis.storedCursor=body.css(\"cursor\");body.css(\"cursor\",o.cursor);this.storedStylesheet=$(\"<style>*{ cursor: \"+o.cursor+\" !important; }</style>\").appendTo(body);}// We need to make sure to grab the zIndex before setting the\n// opacity, because setting the opacity to anything lower than 1\n// causes the zIndex to change from \"auto\" to 0.\nif(o.zIndex){// zIndex option\nif(this.helper.css(\"zIndex\")){this._storedZIndex=this.helper.css(\"zIndex\");}this.helper.css(\"zIndex\",o.zIndex);}if(o.opacity){// opacity option\nif(this.helper.css(\"opacity\")){this._storedOpacity=this.helper.css(\"opacity\");}this.helper.css(\"opacity\",o.opacity);}//Prepare scrolling\nif(this.scrollParent[0]!==this.document[0]&&this.scrollParent[0].tagName!==\"HTML\"){this.overflowOffset=this.scrollParent.offset();}//Call callbacks\nthis._trigger(\"start\",event,this._uiHash());//Recache the helper size\nif(!this._preserveHelperProportions){this._cacheHelperProportions();}//Post \"activate\" events to possible containers\nif(!noActivation){for(i=this.containers.length-1;i>=0;i--){this.containers[i]._trigger(\"activate\",event,this._uiHash(this));}}//Prepare possible droppables\nif($.ui.ddmanager){$.ui.ddmanager.current=this;}if($.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}this.dragging=true;this._addClass(this.helper,\"ui-sortable-helper\");//Move the helper, if needed\nif(!this.helper.parent().is(this.appendTo)){this.helper.detach().appendTo(this.appendTo);//Update position\nthis.offset.parent=this._getParentOffset();}//Generate the original position\nthis.position=this.originalPosition=this._generatePosition(event);this.originalPageX=event.pageX;this.originalPageY=event.pageY;this.lastPositionAbs=this.positionAbs=this._convertPositionTo(\"absolute\");this._mouseDrag(event);return true;},_scroll:function _scroll(event){var o=this.options,scrolled=false;if(this.scrollParent[0]!==this.document[0]&&this.scrollParent[0].tagName!==\"HTML\"){if(this.overflowOffset.top+this.scrollParent[0].offsetHeight-event.pageY<o.scrollSensitivity){this.scrollParent[0].scrollTop=scrolled=this.scrollParent[0].scrollTop+o.scrollSpeed;}else if(event.pageY-this.overflowOffset.top<o.scrollSensitivity){this.scrollParent[0].scrollTop=scrolled=this.scrollParent[0].scrollTop-o.scrollSpeed;}if(this.overflowOffset.left+this.scrollParent[0].offsetWidth-event.pageX<o.scrollSensitivity){this.scrollParent[0].scrollLeft=scrolled=this.scrollParent[0].scrollLeft+o.scrollSpeed;}else if(event.pageX-this.overflowOffset.left<o.scrollSensitivity){this.scrollParent[0].scrollLeft=scrolled=this.scrollParent[0].scrollLeft-o.scrollSpeed;}}else{if(event.pageY-this.document.scrollTop()<o.scrollSensitivity){scrolled=this.document.scrollTop(this.document.scrollTop()-o.scrollSpeed);}else if(this.window.height()-(event.pageY-this.document.scrollTop())<o.scrollSensitivity){scrolled=this.document.scrollTop(this.document.scrollTop()+o.scrollSpeed);}if(event.pageX-this.document.scrollLeft()<o.scrollSensitivity){scrolled=this.document.scrollLeft(this.document.scrollLeft()-o.scrollSpeed);}else if(this.window.width()-(event.pageX-this.document.scrollLeft())<o.scrollSensitivity){scrolled=this.document.scrollLeft(this.document.scrollLeft()+o.scrollSpeed);}}return scrolled;},_mouseDrag:function _mouseDrag(event){var i,item,itemElement,intersection,o=this.options;//Compute the helpers position\nthis.position=this._generatePosition(event);this.positionAbs=this._convertPositionTo(\"absolute\");//Set the helper position\nif(!this.options.axis||this.options.axis!==\"y\"){this.helper[0].style.left=this.position.left+\"px\";}if(!this.options.axis||this.options.axis!==\"x\"){this.helper[0].style.top=this.position.top+\"px\";}//Do scrolling\nif(o.scroll){if(this._scroll(event)!==false){//Update item positions used in position checks\nthis._refreshItemPositions(true);if($.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}}}this.dragDirection={vertical:this._getDragVerticalDirection(),horizontal:this._getDragHorizontalDirection()};//Rearrange\nfor(i=this.items.length-1;i>=0;i--){//Cache variables and intersection, continue if no intersection\nitem=this.items[i];itemElement=item.item[0];intersection=this._intersectsWithPointer(item);if(!intersection){continue;}// Only put the placeholder inside the current Container, skip all\n// items from other containers. This works because when moving\n// an item from one container to another the\n// currentContainer is switched before the placeholder is moved.\n//\n// Without this, moving items in \"sub-sortables\" can cause\n// the placeholder to jitter between the outer and inner container.\nif(item.instance!==this.currentContainer){continue;}// Cannot intersect with itself\n// no useless actions that have been done before\n// no action if the item moved is the parent of the item checked\nif(itemElement!==this.currentItem[0]&&this.placeholder[intersection===1?\"next\":\"prev\"]()[0]!==itemElement&&!$.contains(this.placeholder[0],itemElement)&&(this.options.type===\"semi-dynamic\"?!$.contains(this.element[0],itemElement):true)){this.direction=intersection===1?\"down\":\"up\";if(this.options.tolerance===\"pointer\"||this._intersectsWithSides(item)){this._rearrange(event,item);}else{break;}this._trigger(\"change\",event,this._uiHash());break;}}//Post events to containers\nthis._contactContainers(event);//Interconnect with droppables\nif($.ui.ddmanager){$.ui.ddmanager.drag(this,event);}//Call callbacks\nthis._trigger(\"sort\",event,this._uiHash());this.lastPositionAbs=this.positionAbs;return false;},_mouseStop:function _mouseStop(event,noPropagation){if(!event){return;}//If we are using droppables, inform the manager about the drop\nif($.ui.ddmanager&&!this.options.dropBehaviour){$.ui.ddmanager.drop(this,event);}if(this.options.revert){var that=this,cur=this.placeholder.offset(),axis=this.options.axis,animation={};if(!axis||axis===\"x\"){animation.left=cur.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft);}if(!axis||axis===\"y\"){animation.top=cur.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop);}this.reverting=true;$(this.helper).animate(animation,parseInt(this.options.revert,10)||500,function(){that._clear(event);});}else{this._clear(event,noPropagation);}return false;},cancel:function cancel(){if(this.dragging){this._mouseUp(new $.Event(\"mouseup\",{target:null}));if(this.options.helper===\"original\"){this.currentItem.css(this._storedCSS);this._removeClass(this.currentItem,\"ui-sortable-helper\");}else{this.currentItem.show();}//Post deactivating events to containers\nfor(var i=this.containers.length-1;i>=0;i--){this.containers[i]._trigger(\"deactivate\",null,this._uiHash(this));if(this.containers[i].containerCache.over){this.containers[i]._trigger(\"out\",null,this._uiHash(this));this.containers[i].containerCache.over=0;}}}if(this.placeholder){//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,\n// it unbinds ALL events from the original node!\nif(this.placeholder[0].parentNode){this.placeholder[0].parentNode.removeChild(this.placeholder[0]);}if(this.options.helper!==\"original\"&&this.helper&&this.helper[0].parentNode){this.helper.remove();}$.extend(this,{helper:null,dragging:false,reverting:false,_noFinalSort:null});if(this.domPosition.prev){$(this.domPosition.prev).after(this.currentItem);}else{$(this.domPosition.parent).prepend(this.currentItem);}}return this;},serialize:function serialize(o){var items=this._getItemsAsjQuery(o&&o.connected),str=[];o=o||{};$(items).each(function(){var res=($(o.item||this).attr(o.attribute||\"id\")||\"\").match(o.expression||/(.+)[\\-=_](.+)/);if(res){str.push((o.key||res[1]+\"[]\")+\"=\"+(o.key&&o.expression?res[1]:res[2]));}});if(!str.length&&o.key){str.push(o.key+\"=\");}return str.join(\"&\");},toArray:function toArray(o){var items=this._getItemsAsjQuery(o&&o.connected),ret=[];o=o||{};items.each(function(){ret.push($(o.item||this).attr(o.attribute||\"id\")||\"\");});return ret;},/* Be careful with the following core functions */_intersectsWith:function _intersectsWith(item){var x1=this.positionAbs.left,x2=x1+this.helperProportions.width,y1=this.positionAbs.top,y2=y1+this.helperProportions.height,l=item.left,r=l+item.width,t=item.top,b=t+item.height,dyClick=this.offset.click.top,dxClick=this.offset.click.left,isOverElementHeight=this.options.axis===\"x\"||y1+dyClick>t&&y1+dyClick<b,isOverElementWidth=this.options.axis===\"y\"||x1+dxClick>l&&x1+dxClick<r,isOverElement=isOverElementHeight&&isOverElementWidth;if(this.options.tolerance===\"pointer\"||this.options.forcePointerForContainers||this.options.tolerance!==\"pointer\"&&this.helperProportions[this.floating?\"width\":\"height\"]>item[this.floating?\"width\":\"height\"]){return isOverElement;}else{return l<x1+this.helperProportions.width/2&&// Right Half\nx2-this.helperProportions.width/2<r&&// Left Half\nt<y1+this.helperProportions.height/2&&// Bottom Half\ny2-this.helperProportions.height/2<b;// Top Half\n}},_intersectsWithPointer:function _intersectsWithPointer(item){var verticalDirection,horizontalDirection,isOverElementHeight=this.options.axis===\"x\"||this._isOverAxis(this.positionAbs.top+this.offset.click.top,item.top,item.height),isOverElementWidth=this.options.axis===\"y\"||this._isOverAxis(this.positionAbs.left+this.offset.click.left,item.left,item.width),isOverElement=isOverElementHeight&&isOverElementWidth;if(!isOverElement){return false;}verticalDirection=this.dragDirection.vertical;horizontalDirection=this.dragDirection.horizontal;return this.floating?horizontalDirection===\"right\"||verticalDirection===\"down\"?2:1:verticalDirection&&(verticalDirection===\"down\"?2:1);},_intersectsWithSides:function _intersectsWithSides(item){var isOverBottomHalf=this._isOverAxis(this.positionAbs.top+this.offset.click.top,item.top+item.height/2,item.height),isOverRightHalf=this._isOverAxis(this.positionAbs.left+this.offset.click.left,item.left+item.width/2,item.width),verticalDirection=this.dragDirection.vertical,horizontalDirection=this.dragDirection.horizontal;if(this.floating&&horizontalDirection){return horizontalDirection===\"right\"&&isOverRightHalf||horizontalDirection===\"left\"&&!isOverRightHalf;}else{return verticalDirection&&(verticalDirection===\"down\"&&isOverBottomHalf||verticalDirection===\"up\"&&!isOverBottomHalf);}},_getDragVerticalDirection:function _getDragVerticalDirection(){var delta=this.positionAbs.top-this.lastPositionAbs.top;return delta!==0&&(delta>0?\"down\":\"up\");},_getDragHorizontalDirection:function _getDragHorizontalDirection(){var delta=this.positionAbs.left-this.lastPositionAbs.left;return delta!==0&&(delta>0?\"right\":\"left\");},refresh:function refresh(event){this._refreshItems(event);this._setHandleClassName();this.refreshPositions();return this;},_connectWith:function _connectWith(){var options=this.options;return options.connectWith.constructor===String?[options.connectWith]:options.connectWith;},_getItemsAsjQuery:function _getItemsAsjQuery(connected){var i,j,cur,inst,items=[],queries=[],connectWith=this._connectWith();if(connectWith&&connected){for(i=connectWith.length-1;i>=0;i--){cur=$(connectWith[i],this.document[0]);for(j=cur.length-1;j>=0;j--){inst=$.data(cur[j],this.widgetFullName);if(inst&&inst!==this&&!inst.options.disabled){queries.push([typeof inst.options.items===\"function\"?inst.options.items.call(inst.element):$(inst.options.items,inst.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"),inst]);}}}}queries.push([typeof this.options.items===\"function\"?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):$(this.options.items,this.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"),this]);function addItems(){items.push(this);}for(i=queries.length-1;i>=0;i--){queries[i][0].each(addItems);}return $(items);},_removeCurrentsFromItems:function _removeCurrentsFromItems(){var list=this.currentItem.find(\":data(\"+this.widgetName+\"-item)\");this.items=$.grep(this.items,function(item){for(var j=0;j<list.length;j++){if(list[j]===item.item[0]){return false;}}return true;});},_refreshItems:function _refreshItems(event){this.items=[];this.containers=[this];var i,j,cur,inst,targetData,_queries,item,queriesLength,items=this.items,queries=[[typeof this.options.items===\"function\"?this.options.items.call(this.element[0],event,{item:this.currentItem}):$(this.options.items,this.element),this]],connectWith=this._connectWith();//Shouldn't be run the first time through due to massive slow-down\nif(connectWith&&this.ready){for(i=connectWith.length-1;i>=0;i--){cur=$(connectWith[i],this.document[0]);for(j=cur.length-1;j>=0;j--){inst=$.data(cur[j],this.widgetFullName);if(inst&&inst!==this&&!inst.options.disabled){queries.push([typeof inst.options.items===\"function\"?inst.options.items.call(inst.element[0],event,{item:this.currentItem}):$(inst.options.items,inst.element),inst]);this.containers.push(inst);}}}}for(i=queries.length-1;i>=0;i--){targetData=queries[i][1];_queries=queries[i][0];for(j=0,queriesLength=_queries.length;j<queriesLength;j++){item=$(_queries[j]);// Data for target checking (mouse manager)\nitem.data(this.widgetName+\"-item\",targetData);items.push({item:item,instance:targetData,width:0,height:0,left:0,top:0});}}},_refreshItemPositions:function _refreshItemPositions(fast){var i,item,t,p;for(i=this.items.length-1;i>=0;i--){item=this.items[i];//We ignore calculating positions of all connected containers when we're not over them\nif(this.currentContainer&&item.instance!==this.currentContainer&&item.item[0]!==this.currentItem[0]){continue;}t=this.options.toleranceElement?$(this.options.toleranceElement,item.item):item.item;if(!fast){item.width=t.outerWidth();item.height=t.outerHeight();}p=t.offset();item.left=p.left;item.top=p.top;}},refreshPositions:function refreshPositions(fast){// Determine whether items are being displayed horizontally\nthis.floating=this.items.length?this.options.axis===\"x\"||this._isFloating(this.items[0].item):false;// This has to be redone because due to the item being moved out/into the offsetParent,\n// the offsetParent's position will change\nif(this.offsetParent&&this.helper){this.offset.parent=this._getParentOffset();}this._refreshItemPositions(fast);var i,p;if(this.options.custom&&this.options.custom.refreshContainers){this.options.custom.refreshContainers.call(this);}else{for(i=this.containers.length-1;i>=0;i--){p=this.containers[i].element.offset();this.containers[i].containerCache.left=p.left;this.containers[i].containerCache.top=p.top;this.containers[i].containerCache.width=this.containers[i].element.outerWidth();this.containers[i].containerCache.height=this.containers[i].element.outerHeight();}}return this;},_createPlaceholder:function _createPlaceholder(that){that=that||this;var className,nodeName,o=that.options;if(!o.placeholder||o.placeholder.constructor===String){className=o.placeholder;nodeName=that.currentItem[0].nodeName.toLowerCase();o.placeholder={element:function element(){var element=$(\"<\"+nodeName+\">\",that.document[0]);that._addClass(element,\"ui-sortable-placeholder\",className||that.currentItem[0].className)._removeClass(element,\"ui-sortable-helper\");if(nodeName===\"tbody\"){that._createTrPlaceholder(that.currentItem.find(\"tr\").eq(0),$(\"<tr>\",that.document[0]).appendTo(element));}else if(nodeName===\"tr\"){that._createTrPlaceholder(that.currentItem,element);}else if(nodeName===\"img\"){element.attr(\"src\",that.currentItem.attr(\"src\"));}if(!className){element.css(\"visibility\",\"hidden\");}return element;},update:function update(container,p){// 1. If a className is set as 'placeholder option, we don't force sizes -\n// the class is responsible for that\n// 2. The option 'forcePlaceholderSize can be enabled to force it even if a\n// class name is specified\nif(className&&!o.forcePlaceholderSize){return;}// If the element doesn't have a actual height or width by itself (without\n// styles coming from a stylesheet), it receives the inline height and width\n// from the dragged item. Or, if it's a tbody or tr, it's going to have a height\n// anyway since we're populating them with <td>s above, but they're unlikely to\n// be the correct height on their own if the row heights are dynamic, so we'll\n// always assign the height of the dragged item given forcePlaceholderSize\n// is true.\nif(!p.height()||o.forcePlaceholderSize&&(nodeName===\"tbody\"||nodeName===\"tr\")){p.height(that.currentItem.innerHeight()-parseInt(that.currentItem.css(\"paddingTop\")||0,10)-parseInt(that.currentItem.css(\"paddingBottom\")||0,10));}if(!p.width()){p.width(that.currentItem.innerWidth()-parseInt(that.currentItem.css(\"paddingLeft\")||0,10)-parseInt(that.currentItem.css(\"paddingRight\")||0,10));}}};}//Create the placeholder\nthat.placeholder=$(o.placeholder.element.call(that.element,that.currentItem));//Append it after the actual current item\nthat.currentItem.after(that.placeholder);//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)\no.placeholder.update(that,that.placeholder);},_createTrPlaceholder:function _createTrPlaceholder(sourceTr,targetTr){var that=this;sourceTr.children().each(function(){$(\"<td>&#160;</td>\",that.document[0]).attr(\"colspan\",$(this).attr(\"colspan\")||1).appendTo(targetTr);});},_contactContainers:function _contactContainers(event){var i,j,dist,itemWithLeastDistance,posProperty,sizeProperty,cur,nearBottom,floating,axis,innermostContainer=null,innermostIndex=null;// Get innermost container that intersects with item\nfor(i=this.containers.length-1;i>=0;i--){// Never consider a container that's located within the item itself\nif($.contains(this.currentItem[0],this.containers[i].element[0])){continue;}if(this._intersectsWith(this.containers[i].containerCache)){// If we've already found a container and it's more \"inner\" than this, then continue\nif(innermostContainer&&$.contains(this.containers[i].element[0],innermostContainer.element[0])){continue;}innermostContainer=this.containers[i];innermostIndex=i;}else{// container doesn't intersect. trigger \"out\" event if necessary\nif(this.containers[i].containerCache.over){this.containers[i]._trigger(\"out\",event,this._uiHash(this));this.containers[i].containerCache.over=0;}}}// If no intersecting containers found, return\nif(!innermostContainer){return;}// Move the item into the container if it's not there already\nif(this.containers.length===1){if(!this.containers[innermostIndex].containerCache.over){this.containers[innermostIndex]._trigger(\"over\",event,this._uiHash(this));this.containers[innermostIndex].containerCache.over=1;}}else{// When entering a new container, we will find the item with the least distance and\n// append our item near it\ndist=10000;itemWithLeastDistance=null;floating=innermostContainer.floating||this._isFloating(this.currentItem);posProperty=floating?\"left\":\"top\";sizeProperty=floating?\"width\":\"height\";axis=floating?\"pageX\":\"pageY\";for(j=this.items.length-1;j>=0;j--){if(!$.contains(this.containers[innermostIndex].element[0],this.items[j].item[0])){continue;}if(this.items[j].item[0]===this.currentItem[0]){continue;}cur=this.items[j].item.offset()[posProperty];nearBottom=false;if(event[axis]-cur>this.items[j][sizeProperty]/2){nearBottom=true;}if(Math.abs(event[axis]-cur)<dist){dist=Math.abs(event[axis]-cur);itemWithLeastDistance=this.items[j];this.direction=nearBottom?\"up\":\"down\";}}//Check if dropOnEmpty is enabled\nif(!itemWithLeastDistance&&!this.options.dropOnEmpty){return;}if(this.currentContainer===this.containers[innermostIndex]){if(!this.currentContainer.containerCache.over){this.containers[innermostIndex]._trigger(\"over\",event,this._uiHash());this.currentContainer.containerCache.over=1;}return;}if(itemWithLeastDistance){this._rearrange(event,itemWithLeastDistance,null,true);}else{this._rearrange(event,null,this.containers[innermostIndex].element,true);}this._trigger(\"change\",event,this._uiHash());this.containers[innermostIndex]._trigger(\"change\",event,this._uiHash(this));this.currentContainer=this.containers[innermostIndex];//Update the placeholder\nthis.options.placeholder.update(this.currentContainer,this.placeholder);//Update scrollParent\nthis.scrollParent=this.placeholder.scrollParent();//Update overflowOffset\nif(this.scrollParent[0]!==this.document[0]&&this.scrollParent[0].tagName!==\"HTML\"){this.overflowOffset=this.scrollParent.offset();}this.containers[innermostIndex]._trigger(\"over\",event,this._uiHash(this));this.containers[innermostIndex].containerCache.over=1;}},_createHelper:function _createHelper(event){var o=this.options,helper=typeof o.helper===\"function\"?$(o.helper.apply(this.element[0],[event,this.currentItem])):o.helper===\"clone\"?this.currentItem.clone():this.currentItem;//Add the helper to the DOM if that didn't happen already\nif(!helper.parents(\"body\").length){this.appendTo[0].appendChild(helper[0]);}if(helper[0]===this.currentItem[0]){this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css(\"position\"),top:this.currentItem.css(\"top\"),left:this.currentItem.css(\"left\")};}if(!helper[0].style.width||o.forceHelperSize){helper.width(this.currentItem.width());}if(!helper[0].style.height||o.forceHelperSize){helper.height(this.currentItem.height());}return helper;},_adjustOffsetFromHelper:function _adjustOffsetFromHelper(obj){if(typeof obj===\"string\"){obj=obj.split(\" \");}if(Array.isArray(obj)){obj={left:+obj[0],top:+obj[1]||0};}if(\"left\"in obj){this.offset.click.left=obj.left+this.margins.left;}if(\"right\"in obj){this.offset.click.left=this.helperProportions.width-obj.right+this.margins.left;}if(\"top\"in obj){this.offset.click.top=obj.top+this.margins.top;}if(\"bottom\"in obj){this.offset.click.top=this.helperProportions.height-obj.bottom+this.margins.top;}},_getParentOffset:function _getParentOffset(){//Get the offsetParent and cache its position\nthis.offsetParent=this.helper.offsetParent();var po=this.offsetParent.offset();// This is a special case where we need to modify a offset calculated on start, since the\n// following happened:\n// 1. The position of the helper is absolute, so it's position is calculated based on the\n// next positioned parent\n// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't\n// the document, which means that the scroll is included in the initial calculation of the\n// offset of the parent, and never recalculated upon drag\nif(this.cssPosition===\"absolute\"&&this.scrollParent[0]!==this.document[0]&&$.contains(this.scrollParent[0],this.offsetParent[0])){po.left+=this.scrollParent.scrollLeft();po.top+=this.scrollParent.scrollTop();}// This needs to be actually done for all browsers, since pageX/pageY includes this\n// information with an ugly IE fix\nif(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()===\"html\"&&$.ui.ie){po={top:0,left:0};}return{top:po.top+(parseInt(this.offsetParent.css(\"borderTopWidth\"),10)||0),left:po.left+(parseInt(this.offsetParent.css(\"borderLeftWidth\"),10)||0)};},_getRelativeOffset:function _getRelativeOffset(){if(this.cssPosition===\"relative\"){var p=this.currentItem.position();return{top:p.top-(parseInt(this.helper.css(\"top\"),10)||0)+this.scrollParent.scrollTop(),left:p.left-(parseInt(this.helper.css(\"left\"),10)||0)+this.scrollParent.scrollLeft()};}else{return{top:0,left:0};}},_cacheMargins:function _cacheMargins(){this.margins={left:parseInt(this.currentItem.css(\"marginLeft\"),10)||0,top:parseInt(this.currentItem.css(\"marginTop\"),10)||0};},_cacheHelperProportions:function _cacheHelperProportions(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()};},_setContainment:function _setContainment(){var ce,co,over,o=this.options;if(o.containment===\"parent\"){o.containment=this.helper[0].parentNode;}if(o.containment===\"document\"||o.containment===\"window\"){this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,o.containment===\"document\"?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,(o.containment===\"document\"?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];}if(!/^(document|window|parent)$/.test(o.containment)){ce=$(o.containment)[0];co=$(o.containment).offset();over=$(ce).css(\"overflow\")!==\"hidden\";this.containment=[co.left+(parseInt($(ce).css(\"borderLeftWidth\"),10)||0)+(parseInt($(ce).css(\"paddingLeft\"),10)||0)-this.margins.left,co.top+(parseInt($(ce).css(\"borderTopWidth\"),10)||0)+(parseInt($(ce).css(\"paddingTop\"),10)||0)-this.margins.top,co.left+(over?Math.max(ce.scrollWidth,ce.offsetWidth):ce.offsetWidth)-(parseInt($(ce).css(\"borderLeftWidth\"),10)||0)-(parseInt($(ce).css(\"paddingRight\"),10)||0)-this.helperProportions.width-this.margins.left,co.top+(over?Math.max(ce.scrollHeight,ce.offsetHeight):ce.offsetHeight)-(parseInt($(ce).css(\"borderTopWidth\"),10)||0)-(parseInt($(ce).css(\"paddingBottom\"),10)||0)-this.helperProportions.height-this.margins.top];}},_convertPositionTo:function _convertPositionTo(d,pos){if(!pos){pos=this.position;}var mod=d===\"absolute\"?1:-1,scroll=this.cssPosition===\"absolute\"&&!(this.scrollParent[0]!==this.document[0]&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=/(html|body)/i.test(scroll[0].tagName);return{top:// The absolute mouse position\npos.top+// Only for relative positioned nodes: Relative offset from element to offset parent\nthis.offset.relative.top*mod+// The offsetParent's offset without borders (offset + border)\nthis.offset.parent.top*mod-(this.cssPosition===\"fixed\"?-this.scrollParent.scrollTop():scrollIsRootNode?0:scroll.scrollTop())*mod,left:// The absolute mouse position\npos.left+// Only for relative positioned nodes: Relative offset from element to offset parent\nthis.offset.relative.left*mod+// The offsetParent's offset without borders (offset + border)\nthis.offset.parent.left*mod-(this.cssPosition===\"fixed\"?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())*mod};},_generatePosition:function _generatePosition(event){var top,left,o=this.options,pageX=event.pageX,pageY=event.pageY,scroll=this.cssPosition===\"absolute\"&&!(this.scrollParent[0]!==this.document[0]&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=/(html|body)/i.test(scroll[0].tagName);// This is another very weird special case that only happens for relative elements:\n// 1. If the css position is relative\n// 2. and the scroll parent is the document or similar to the offset parent\n// we have to refresh the relative offset during the scroll so there are no jumps\nif(this.cssPosition===\"relative\"&&!(this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0])){this.offset.relative=this._getRelativeOffset();}/*\r\n\t\t * - Position constraining -\r\n\t\t * Constrain the position to a mix of grid, containment.\r\n\t\t */if(this.originalPosition){//If we are not dragging yet, we won't check for options\nif(this.containment){if(event.pageX-this.offset.click.left<this.containment[0]){pageX=this.containment[0]+this.offset.click.left;}if(event.pageY-this.offset.click.top<this.containment[1]){pageY=this.containment[1]+this.offset.click.top;}if(event.pageX-this.offset.click.left>this.containment[2]){pageX=this.containment[2]+this.offset.click.left;}if(event.pageY-this.offset.click.top>this.containment[3]){pageY=this.containment[3]+this.offset.click.top;}}if(o.grid){top=this.originalPageY+Math.round((pageY-this.originalPageY)/o.grid[1])*o.grid[1];pageY=this.containment?top-this.offset.click.top>=this.containment[1]&&top-this.offset.click.top<=this.containment[3]?top:top-this.offset.click.top>=this.containment[1]?top-o.grid[1]:top+o.grid[1]:top;left=this.originalPageX+Math.round((pageX-this.originalPageX)/o.grid[0])*o.grid[0];pageX=this.containment?left-this.offset.click.left>=this.containment[0]&&left-this.offset.click.left<=this.containment[2]?left:left-this.offset.click.left>=this.containment[0]?left-o.grid[0]:left+o.grid[0]:left;}}return{top:// The absolute mouse position\npageY-// Click offset (relative to the element)\nthis.offset.click.top-// Only for relative positioned nodes: Relative offset from element to offset parent\nthis.offset.relative.top-// The offsetParent's offset without borders (offset + border)\nthis.offset.parent.top+(this.cssPosition===\"fixed\"?-this.scrollParent.scrollTop():scrollIsRootNode?0:scroll.scrollTop()),left:// The absolute mouse position\npageX-// Click offset (relative to the element)\nthis.offset.click.left-// Only for relative positioned nodes: Relative offset from element to offset parent\nthis.offset.relative.left-// The offsetParent's offset without borders (offset + border)\nthis.offset.parent.left+(this.cssPosition===\"fixed\"?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())};},_rearrange:function _rearrange(event,i,a,hardRefresh){if(a){a[0].appendChild(this.placeholder[0]);}else{i.item[0].parentNode.insertBefore(this.placeholder[0],this.direction===\"down\"?i.item[0]:i.item[0].nextSibling);}//Various things done here to improve the performance:\n// 1. we create a setTimeout, that calls refreshPositions\n// 2. on the instance, we have a counter variable, that get's higher after every append\n// 3. on the local scope, we copy the counter variable, and check in the timeout,\n// if it's still the same\n// 4. this lets only the last addition to the timeout stack through\nthis.counter=this.counter?++this.counter:1;var counter=this.counter;this._delay(function(){if(counter===this.counter){//Precompute after each DOM insertion, NOT on mousemove\nthis.refreshPositions(!hardRefresh);}});},_clear:function _clear(event,noPropagation){this.reverting=false;// We delay all events that have to be triggered to after the point where the placeholder\n// has been removed and everything else normalized again\nvar i,delayedTriggers=[];// We first have to update the dom position of the actual currentItem\n// Note: don't do it if the current item is already removed (by a user), or it gets\n// reappended (see #4088)\nif(!this._noFinalSort&&this.currentItem.parent().length){this.placeholder.before(this.currentItem);}this._noFinalSort=null;if(this.helper[0]===this.currentItem[0]){for(i in this._storedCSS){if(this._storedCSS[i]===\"auto\"||this._storedCSS[i]===\"static\"){this._storedCSS[i]=\"\";}}this.currentItem.css(this._storedCSS);this._removeClass(this.currentItem,\"ui-sortable-helper\");}else{this.currentItem.show();}if(this.fromOutside&&!noPropagation){delayedTriggers.push(function(event){this._trigger(\"receive\",event,this._uiHash(this.fromOutside));});}if((this.fromOutside||this.domPosition.prev!==this.currentItem.prev().not(\".ui-sortable-helper\")[0]||this.domPosition.parent!==this.currentItem.parent()[0])&&!noPropagation){// Trigger update callback if the DOM position has changed\ndelayedTriggers.push(function(event){this._trigger(\"update\",event,this._uiHash());});}// Check if the items Container has Changed and trigger appropriate\n// events.\nif(this!==this.currentContainer){if(!noPropagation){delayedTriggers.push(function(event){this._trigger(\"remove\",event,this._uiHash());});delayedTriggers.push(function(c){return function(event){c._trigger(\"receive\",event,this._uiHash(this));};}.call(this,this.currentContainer));delayedTriggers.push(function(c){return function(event){c._trigger(\"update\",event,this._uiHash(this));};}.call(this,this.currentContainer));}}//Post events to containers\nfunction delayEvent(type,instance,container){return function(event){container._trigger(type,event,instance._uiHash(instance));};}for(i=this.containers.length-1;i>=0;i--){if(!noPropagation){delayedTriggers.push(delayEvent(\"deactivate\",this,this.containers[i]));}if(this.containers[i].containerCache.over){delayedTriggers.push(delayEvent(\"out\",this,this.containers[i]));this.containers[i].containerCache.over=0;}}//Do what was originally in plugins\nif(this.storedCursor){this.document.find(\"body\").css(\"cursor\",this.storedCursor);this.storedStylesheet.remove();}if(this._storedOpacity){this.helper.css(\"opacity\",this._storedOpacity);}if(this._storedZIndex){this.helper.css(\"zIndex\",this._storedZIndex===\"auto\"?\"\":this._storedZIndex);}this.dragging=false;if(!noPropagation){this._trigger(\"beforeStop\",event,this._uiHash());}//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,\n// it unbinds ALL events from the original node!\nthis.placeholder[0].parentNode.removeChild(this.placeholder[0]);if(!this.cancelHelperRemoval){if(this.helper[0]!==this.currentItem[0]){this.helper.remove();}this.helper=null;}if(!noPropagation){for(i=0;i<delayedTriggers.length;i++){// Trigger all delayed events\ndelayedTriggers[i].call(this,event);}this._trigger(\"stop\",event,this._uiHash());}this.fromOutside=false;return!this.cancelHelperRemoval;},_trigger:function _trigger(){if($.Widget.prototype._trigger.apply(this,arguments)===false){this.cancel();}},_uiHash:function _uiHash(_inst){var inst=_inst||this;return{helper:inst.helper,placeholder:inst.placeholder||$([]),position:inst.position,originalPosition:inst.originalPosition,offset:inst.positionAbs,item:inst.currentItem,sender:_inst?_inst.element:null};}});/*!\r\n * jQuery UI Spinner 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Spinner\n//>>group: Widgets\n//>>description: Displays buttons to easily input numbers via the keyboard or mouse.\n//>>docs: http://api.jqueryui.com/spinner/\n//>>demos: http://jqueryui.com/spinner/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/spinner.css\n//>>css.theme: ../../themes/base/theme.css\nfunction spinnerModifier(fn){return function(){var previous=this.element.val();fn.apply(this,arguments);this._refresh();if(previous!==this.element.val()){this._trigger(\"change\");}};}$.widget(\"ui.spinner\",{version:\"1.13.1\",defaultElement:\"<input>\",widgetEventPrefix:\"spin\",options:{classes:{\"ui-spinner\":\"ui-corner-all\",\"ui-spinner-down\":\"ui-corner-br\",\"ui-spinner-up\":\"ui-corner-tr\"},culture:null,icons:{down:\"ui-icon-triangle-1-s\",up:\"ui-icon-triangle-1-n\"},incremental:true,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function _create(){// handle string values that need to be parsed\nthis._setOption(\"max\",this.options.max);this._setOption(\"min\",this.options.min);this._setOption(\"step\",this.options.step);// Only format if there is a value, prevents the field from being marked\n// as invalid in Firefox, see #9573.\nif(this.value()!==\"\"){// Format the value, but don't constrain.\nthis._value(this.element.val(),true);}this._draw();this._on(this._events);this._refresh();// Turning off autocomplete prevents the browser from remembering the\n// value when navigating through history, so we re-enable autocomplete\n// if the page is unloaded before the widget is destroyed. #7790\nthis._on(this.window,{beforeunload:function beforeunload(){this.element.removeAttr(\"autocomplete\");}});},_getCreateOptions:function _getCreateOptions(){var options=this._super();var element=this.element;$.each([\"min\",\"max\",\"step\"],function(i,option){var value=element.attr(option);if(value!=null&&value.length){options[option]=value;}});return options;},_events:{keydown:function keydown(event){if(this._start(event)&&this._keydown(event)){event.preventDefault();}},keyup:\"_stop\",focus:function focus(){this.previous=this.element.val();},blur:function blur(event){if(this.cancelBlur){delete this.cancelBlur;return;}this._stop();this._refresh();if(this.previous!==this.element.val()){this._trigger(\"change\",event);}},mousewheel:function mousewheel(event,delta){var activeElement=$.ui.safeActiveElement(this.document[0]);var isActive=this.element[0]===activeElement;if(!isActive||!delta){return;}if(!this.spinning&&!this._start(event)){return false;}this._spin((delta>0?1:-1)*this.options.step,event);clearTimeout(this.mousewheelTimer);this.mousewheelTimer=this._delay(function(){if(this.spinning){this._stop(event);}},100);event.preventDefault();},\"mousedown .ui-spinner-button\":function mousedownUiSpinnerButton(event){var previous;// We never want the buttons to have focus; whenever the user is\n// interacting with the spinner, the focus should be on the input.\n// If the input is focused then this.previous is properly set from\n// when the input first received focus. If the input is not focused\n// then we need to set this.previous based on the value before spinning.\nprevious=this.element[0]===$.ui.safeActiveElement(this.document[0])?this.previous:this.element.val();function checkFocus(){var isActive=this.element[0]===$.ui.safeActiveElement(this.document[0]);if(!isActive){this.element.trigger(\"focus\");this.previous=previous;// support: IE\n// IE sets focus asynchronously, so we need to check if focus\n// moved off of the input because the user clicked on the button.\nthis._delay(function(){this.previous=previous;});}}// Ensure focus is on (or stays on) the text field\nevent.preventDefault();checkFocus.call(this);// Support: IE\n// IE doesn't prevent moving focus even with event.preventDefault()\n// so we set a flag to know when we should ignore the blur event\n// and check (again) if focus moved off of the input.\nthis.cancelBlur=true;this._delay(function(){delete this.cancelBlur;checkFocus.call(this);});if(this._start(event)===false){return;}this._repeat(null,$(event.currentTarget).hasClass(\"ui-spinner-up\")?1:-1,event);},\"mouseup .ui-spinner-button\":\"_stop\",\"mouseenter .ui-spinner-button\":function mouseenterUiSpinnerButton(event){// button will add ui-state-active if mouse was down while mouseleave and kept down\nif(!$(event.currentTarget).hasClass(\"ui-state-active\")){return;}if(this._start(event)===false){return false;}this._repeat(null,$(event.currentTarget).hasClass(\"ui-spinner-up\")?1:-1,event);},// TODO: do we really want to consider this a stop?\n// shouldn't we just stop the repeater and wait until mouseup before\n// we trigger the stop event?\n\"mouseleave .ui-spinner-button\":\"_stop\"},// Support mobile enhanced option and make backcompat more sane\n_enhance:function _enhance(){this.uiSpinner=this.element.attr(\"autocomplete\",\"off\").wrap(\"<span>\").parent()// Add buttons\n.append(\"<a></a><a></a>\");},_draw:function _draw(){this._enhance();this._addClass(this.uiSpinner,\"ui-spinner\",\"ui-widget ui-widget-content\");this._addClass(\"ui-spinner-input\");this.element.attr(\"role\",\"spinbutton\");// Button bindings\nthis.buttons=this.uiSpinner.children(\"a\").attr(\"tabIndex\",-1).attr(\"aria-hidden\",true).button({classes:{\"ui-button\":\"\"}});// TODO: Right now button does not support classes this is already updated in button PR\nthis._removeClass(this.buttons,\"ui-corner-all\");this._addClass(this.buttons.first(),\"ui-spinner-button ui-spinner-up\");this._addClass(this.buttons.last(),\"ui-spinner-button ui-spinner-down\");this.buttons.first().button({\"icon\":this.options.icons.up,\"showLabel\":false});this.buttons.last().button({\"icon\":this.options.icons.down,\"showLabel\":false});// IE 6 doesn't understand height: 50% for the buttons\n// unless the wrapper has an explicit height\nif(this.buttons.height()>Math.ceil(this.uiSpinner.height()*0.5)&&this.uiSpinner.height()>0){this.uiSpinner.height(this.uiSpinner.height());}},_keydown:function _keydown(event){var options=this.options,keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.UP:this._repeat(null,1,event);return true;case keyCode.DOWN:this._repeat(null,-1,event);return true;case keyCode.PAGE_UP:this._repeat(null,options.page,event);return true;case keyCode.PAGE_DOWN:this._repeat(null,-options.page,event);return true;}return false;},_start:function _start(event){if(!this.spinning&&this._trigger(\"start\",event)===false){return false;}if(!this.counter){this.counter=1;}this.spinning=true;return true;},_repeat:function _repeat(i,steps,event){i=i||500;clearTimeout(this.timer);this.timer=this._delay(function(){this._repeat(40,steps,event);},i);this._spin(steps*this.options.step,event);},_spin:function _spin(step,event){var value=this.value()||0;if(!this.counter){this.counter=1;}value=this._adjustValue(value+step*this._increment(this.counter));if(!this.spinning||this._trigger(\"spin\",event,{value:value})!==false){this._value(value);this.counter++;}},_increment:function _increment(i){var incremental=this.options.incremental;if(incremental){return typeof incremental===\"function\"?incremental(i):Math.floor(i*i*i/50000-i*i/500+17*i/200+1);}return 1;},_precision:function _precision(){var precision=this._precisionOf(this.options.step);if(this.options.min!==null){precision=Math.max(precision,this._precisionOf(this.options.min));}return precision;},_precisionOf:function _precisionOf(num){var str=num.toString(),decimal=str.indexOf(\".\");return decimal===-1?0:str.length-decimal-1;},_adjustValue:function _adjustValue(value){var base,aboveMin,options=this.options;// Make sure we're at a valid step\n// - find out where we are relative to the base (min or 0)\nbase=options.min!==null?options.min:0;aboveMin=value-base;// - round to the nearest step\naboveMin=Math.round(aboveMin/options.step)*options.step;// - rounding is based on 0, so adjust back to our base\nvalue=base+aboveMin;// Fix precision from bad JS floating point math\nvalue=parseFloat(value.toFixed(this._precision()));// Clamp the value\nif(options.max!==null&&value>options.max){return options.max;}if(options.min!==null&&value<options.min){return options.min;}return value;},_stop:function _stop(event){if(!this.spinning){return;}clearTimeout(this.timer);clearTimeout(this.mousewheelTimer);this.counter=0;this.spinning=false;this._trigger(\"stop\",event);},_setOption:function _setOption(key,value){var prevValue,first,last;if(key===\"culture\"||key===\"numberFormat\"){prevValue=this._parse(this.element.val());this.options[key]=value;this.element.val(this._format(prevValue));return;}if(key===\"max\"||key===\"min\"||key===\"step\"){if(typeof value===\"string\"){value=this._parse(value);}}if(key===\"icons\"){first=this.buttons.first().find(\".ui-icon\");this._removeClass(first,null,this.options.icons.up);this._addClass(first,null,value.up);last=this.buttons.last().find(\".ui-icon\");this._removeClass(last,null,this.options.icons.down);this._addClass(last,null,value.down);}this._super(key,value);},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this._toggleClass(this.uiSpinner,null,\"ui-state-disabled\",!!value);this.element.prop(\"disabled\",!!value);this.buttons.button(value?\"disable\":\"enable\");},_setOptions:spinnerModifier(function(options){this._super(options);}),_parse:function _parse(val){if(typeof val===\"string\"&&val!==\"\"){val=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(val,10,this.options.culture):+val;}return val===\"\"||isNaN(val)?null:val;},_format:function _format(value){if(value===\"\"){return\"\";}return window.Globalize&&this.options.numberFormat?Globalize.format(value,this.options.numberFormat,this.options.culture):value;},_refresh:function _refresh(){this.element.attr({\"aria-valuemin\":this.options.min,\"aria-valuemax\":this.options.max,// TODO: what should we do with values that can't be parsed?\n\"aria-valuenow\":this._parse(this.element.val())});},isValid:function isValid(){var value=this.value();// Null is invalid\nif(value===null){return false;}// If value gets adjusted, it's invalid\nreturn value===this._adjustValue(value);},// Update the value without triggering change\n_value:function _value(value,allowAny){var parsed;if(value!==\"\"){parsed=this._parse(value);if(parsed!==null){if(!allowAny){parsed=this._adjustValue(parsed);}value=this._format(parsed);}}this.element.val(value);this._refresh();},_destroy:function _destroy(){this.element.prop(\"disabled\",false).removeAttr(\"autocomplete role aria-valuemin aria-valuemax aria-valuenow\");this.uiSpinner.replaceWith(this.element);},stepUp:spinnerModifier(function(steps){this._stepUp(steps);}),_stepUp:function _stepUp(steps){if(this._start()){this._spin((steps||1)*this.options.step);this._stop();}},stepDown:spinnerModifier(function(steps){this._stepDown(steps);}),_stepDown:function _stepDown(steps){if(this._start()){this._spin((steps||1)*-this.options.step);this._stop();}},pageUp:spinnerModifier(function(pages){this._stepUp((pages||1)*this.options.page);}),pageDown:spinnerModifier(function(pages){this._stepDown((pages||1)*this.options.page);}),value:function value(newVal){if(!arguments.length){return this._parse(this.element.val());}spinnerModifier(this._value).call(this,newVal);},widget:function widget(){return this.uiSpinner;}});// DEPRECATED\n// TODO: switch return back to widget declaration at top of file when this is removed\nif($.uiBackCompat!==false){// Backcompat for spinner html extension points\n$.widget(\"ui.spinner\",$.ui.spinner,{_enhance:function _enhance(){this.uiSpinner=this.element.attr(\"autocomplete\",\"off\").wrap(this._uiSpinnerHtml()).parent()// Add buttons\n.append(this._buttonHtml());},_uiSpinnerHtml:function _uiSpinnerHtml(){return\"<span>\";},_buttonHtml:function _buttonHtml(){return\"<a></a><a></a>\";}});}var widgetsSpinner=$.ui.spinner;/*!\r\n * jQuery UI Tabs 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Tabs\n//>>group: Widgets\n//>>description: Transforms a set of container elements into a tab structure.\n//>>docs: http://api.jqueryui.com/tabs/\n//>>demos: http://jqueryui.com/tabs/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/tabs.css\n//>>css.theme: ../../themes/base/theme.css\n$.widget(\"ui.tabs\",{version:\"1.13.1\",delay:300,options:{active:null,classes:{\"ui-tabs\":\"ui-corner-all\",\"ui-tabs-nav\":\"ui-corner-all\",\"ui-tabs-panel\":\"ui-corner-bottom\",\"ui-tabs-tab\":\"ui-corner-top\"},collapsible:false,event:\"click\",heightStyle:\"content\",hide:null,show:null,// Callbacks\nactivate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:function(){var rhash=/#.*$/;return function(anchor){var anchorUrl,locationUrl;anchorUrl=anchor.href.replace(rhash,\"\");locationUrl=location.href.replace(rhash,\"\");// Decoding may throw an error if the URL isn't UTF-8 (#9518)\ntry{anchorUrl=decodeURIComponent(anchorUrl);}catch(error){}try{locationUrl=decodeURIComponent(locationUrl);}catch(error){}return anchor.hash.length>1&&anchorUrl===locationUrl;};}(),_create:function _create(){var that=this,options=this.options;this.running=false;this._addClass(\"ui-tabs\",\"ui-widget ui-widget-content\");this._toggleClass(\"ui-tabs-collapsible\",null,options.collapsible);this._processTabs();options.active=this._initialActive();// Take disabling tabs via class attribute from HTML\n// into account and update option properly.\nif(Array.isArray(options.disabled)){options.disabled=$.uniqueSort(options.disabled.concat($.map(this.tabs.filter(\".ui-state-disabled\"),function(li){return that.tabs.index(li);}))).sort();}// Check for length avoids error when initializing empty list\nif(this.options.active!==false&&this.anchors.length){this.active=this._findActive(options.active);}else{this.active=$();}this._refresh();if(this.active.length){this.load(options.active);}},_initialActive:function _initialActive(){var active=this.options.active,collapsible=this.options.collapsible,locationHash=location.hash.substring(1);if(active===null){// check the fragment identifier in the URL\nif(locationHash){this.tabs.each(function(i,tab){if($(tab).attr(\"aria-controls\")===locationHash){active=i;return false;}});}// Check for a tab marked active via a class\nif(active===null){active=this.tabs.index(this.tabs.filter(\".ui-tabs-active\"));}// No active tab, set to false\nif(active===null||active===-1){active=this.tabs.length?0:false;}}// Handle numbers: negative, out of range\nif(active!==false){active=this.tabs.index(this.tabs.eq(active));if(active===-1){active=collapsible?false:0;}}// Don't allow collapsible: false and active: false\nif(!collapsible&&active===false&&this.anchors.length){active=0;}return active;},_getCreateEventData:function _getCreateEventData(){return{tab:this.active,panel:!this.active.length?$():this._getPanelForTab(this.active)};},_tabKeydown:function _tabKeydown(event){var focusedTab=$($.ui.safeActiveElement(this.document[0])).closest(\"li\"),selectedIndex=this.tabs.index(focusedTab),goingForward=true;if(this._handlePageNav(event)){return;}switch(event.keyCode){case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:selectedIndex++;break;case $.ui.keyCode.UP:case $.ui.keyCode.LEFT:goingForward=false;selectedIndex--;break;case $.ui.keyCode.END:selectedIndex=this.anchors.length-1;break;case $.ui.keyCode.HOME:selectedIndex=0;break;case $.ui.keyCode.SPACE:// Activate only, no collapsing\nevent.preventDefault();clearTimeout(this.activating);this._activate(selectedIndex);return;case $.ui.keyCode.ENTER:// Toggle (cancel delayed activation, allow collapsing)\nevent.preventDefault();clearTimeout(this.activating);// Determine if we should collapse or activate\nthis._activate(selectedIndex===this.options.active?false:selectedIndex);return;default:return;}// Focus the appropriate tab, based on which key was pressed\nevent.preventDefault();clearTimeout(this.activating);selectedIndex=this._focusNextTab(selectedIndex,goingForward);// Navigating with control/command key will prevent automatic activation\nif(!event.ctrlKey&&!event.metaKey){// Update aria-selected immediately so that AT think the tab is already selected.\n// Otherwise AT may confuse the user by stating that they need to activate the tab,\n// but the tab will already be activated by the time the announcement finishes.\nfocusedTab.attr(\"aria-selected\",\"false\");this.tabs.eq(selectedIndex).attr(\"aria-selected\",\"true\");this.activating=this._delay(function(){this.option(\"active\",selectedIndex);},this.delay);}},_panelKeydown:function _panelKeydown(event){if(this._handlePageNav(event)){return;}// Ctrl+up moves focus to the current tab\nif(event.ctrlKey&&event.keyCode===$.ui.keyCode.UP){event.preventDefault();this.active.trigger(\"focus\");}},// Alt+page up/down moves focus to the previous/next tab (and activates)\n_handlePageNav:function _handlePageNav(event){if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_UP){this._activate(this._focusNextTab(this.options.active-1,false));return true;}if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_DOWN){this._activate(this._focusNextTab(this.options.active+1,true));return true;}},_findNextTab:function _findNextTab(index,goingForward){var lastTabIndex=this.tabs.length-1;function constrain(){if(index>lastTabIndex){index=0;}if(index<0){index=lastTabIndex;}return index;}while($.inArray(constrain(),this.options.disabled)!==-1){index=goingForward?index+1:index-1;}return index;},_focusNextTab:function _focusNextTab(index,goingForward){index=this._findNextTab(index,goingForward);this.tabs.eq(index).trigger(\"focus\");return index;},_setOption:function _setOption(key,value){if(key===\"active\"){// _activate() will handle invalid values and update this.options\nthis._activate(value);return;}this._super(key,value);if(key===\"collapsible\"){this._toggleClass(\"ui-tabs-collapsible\",null,value);// Setting collapsible: false while collapsed; open first panel\nif(!value&&this.options.active===false){this._activate(0);}}if(key===\"event\"){this._setupEvents(value);}if(key===\"heightStyle\"){this._setupHeightStyle(value);}},_sanitizeSelector:function _sanitizeSelector(hash){return hash?hash.replace(/[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g,\"\\\\$&\"):\"\";},refresh:function refresh(){var options=this.options,lis=this.tablist.children(\":has(a[href])\");// Get disabled tabs from class attribute from HTML\n// this will get converted to a boolean if needed in _refresh()\noptions.disabled=$.map(lis.filter(\".ui-state-disabled\"),function(tab){return lis.index(tab);});this._processTabs();// Was collapsed or no tabs\nif(options.active===false||!this.anchors.length){options.active=false;this.active=$();// was active, but active tab is gone\n}else if(this.active.length&&!$.contains(this.tablist[0],this.active[0])){// all remaining tabs are disabled\nif(this.tabs.length===options.disabled.length){options.active=false;this.active=$();// activate previous tab\n}else{this._activate(this._findNextTab(Math.max(0,options.active-1),false));}// was active, active tab still exists\n}else{// make sure active index is correct\noptions.active=this.tabs.index(this.active);}this._refresh();},_refresh:function _refresh(){this._setOptionDisabled(this.options.disabled);this._setupEvents(this.options.event);this._setupHeightStyle(this.options.heightStyle);this.tabs.not(this.active).attr({\"aria-selected\":\"false\",\"aria-expanded\":\"false\",tabIndex:-1});this.panels.not(this._getPanelForTab(this.active)).hide().attr({\"aria-hidden\":\"true\"});// Make sure one tab is in the tab order\nif(!this.active.length){this.tabs.eq(0).attr(\"tabIndex\",0);}else{this.active.attr({\"aria-selected\":\"true\",\"aria-expanded\":\"true\",tabIndex:0});this._addClass(this.active,\"ui-tabs-active\",\"ui-state-active\");this._getPanelForTab(this.active).show().attr({\"aria-hidden\":\"false\"});}},_processTabs:function _processTabs(){var that=this,prevTabs=this.tabs,prevAnchors=this.anchors,prevPanels=this.panels;this.tablist=this._getList().attr(\"role\",\"tablist\");this._addClass(this.tablist,\"ui-tabs-nav\",\"ui-helper-reset ui-helper-clearfix ui-widget-header\");// Prevent users from focusing disabled tabs via click\nthis.tablist.on(\"mousedown\"+this.eventNamespace,\"> li\",function(event){if($(this).is(\".ui-state-disabled\")){event.preventDefault();}})// Support: IE <9\n// Preventing the default action in mousedown doesn't prevent IE\n// from focusing the element, so if the anchor gets focused, blur.\n// We don't have to worry about focusing the previously focused\n// element since clicking on a non-focusable element should focus\n// the body anyway.\n.on(\"focus\"+this.eventNamespace,\".ui-tabs-anchor\",function(){if($(this).closest(\"li\").is(\".ui-state-disabled\")){this.blur();}});this.tabs=this.tablist.find(\"> li:has(a[href])\").attr({role:\"tab\",tabIndex:-1});this._addClass(this.tabs,\"ui-tabs-tab\",\"ui-state-default\");this.anchors=this.tabs.map(function(){return $(\"a\",this)[0];}).attr({tabIndex:-1});this._addClass(this.anchors,\"ui-tabs-anchor\");this.panels=$();this.anchors.each(function(i,anchor){var selector,panel,panelId,anchorId=$(anchor).uniqueId().attr(\"id\"),tab=$(anchor).closest(\"li\"),originalAriaControls=tab.attr(\"aria-controls\");// Inline tab\nif(that._isLocal(anchor)){selector=anchor.hash;panelId=selector.substring(1);panel=that.element.find(that._sanitizeSelector(selector));// remote tab\n}else{// If the tab doesn't already have aria-controls,\n// generate an id by using a throw-away element\npanelId=tab.attr(\"aria-controls\")||$({}).uniqueId()[0].id;selector=\"#\"+panelId;panel=that.element.find(selector);if(!panel.length){panel=that._createPanel(panelId);panel.insertAfter(that.panels[i-1]||that.tablist);}panel.attr(\"aria-live\",\"polite\");}if(panel.length){that.panels=that.panels.add(panel);}if(originalAriaControls){tab.data(\"ui-tabs-aria-controls\",originalAriaControls);}tab.attr({\"aria-controls\":panelId,\"aria-labelledby\":anchorId});panel.attr(\"aria-labelledby\",anchorId);});this.panels.attr(\"role\",\"tabpanel\");this._addClass(this.panels,\"ui-tabs-panel\",\"ui-widget-content\");// Avoid memory leaks (#10056)\nif(prevTabs){this._off(prevTabs.not(this.tabs));this._off(prevAnchors.not(this.anchors));this._off(prevPanels.not(this.panels));}},// Allow overriding how to find the list for rare usage scenarios (#7715)\n_getList:function _getList(){return this.tablist||this.element.find(\"ol, ul\").eq(0);},_createPanel:function _createPanel(id){return $(\"<div>\").attr(\"id\",id).data(\"ui-tabs-destroy\",true);},_setOptionDisabled:function _setOptionDisabled(disabled){var currentItem,li,i;if(Array.isArray(disabled)){if(!disabled.length){disabled=false;}else if(disabled.length===this.anchors.length){disabled=true;}}// Disable tabs\nfor(i=0;li=this.tabs[i];i++){currentItem=$(li);if(disabled===true||$.inArray(i,disabled)!==-1){currentItem.attr(\"aria-disabled\",\"true\");this._addClass(currentItem,null,\"ui-state-disabled\");}else{currentItem.removeAttr(\"aria-disabled\");this._removeClass(currentItem,null,\"ui-state-disabled\");}}this.options.disabled=disabled;this._toggleClass(this.widget(),this.widgetFullName+\"-disabled\",null,disabled===true);},_setupEvents:function _setupEvents(event){var events={};if(event){$.each(event.split(\" \"),function(index,eventName){events[eventName]=\"_eventHandler\";});}this._off(this.anchors.add(this.tabs).add(this.panels));// Always prevent the default action, even when disabled\nthis._on(true,this.anchors,{click:function click(event){event.preventDefault();}});this._on(this.anchors,events);this._on(this.tabs,{keydown:\"_tabKeydown\"});this._on(this.panels,{keydown:\"_panelKeydown\"});this._focusable(this.tabs);this._hoverable(this.tabs);},_setupHeightStyle:function _setupHeightStyle(heightStyle){var maxHeight,parent=this.element.parent();if(heightStyle===\"fill\"){maxHeight=parent.height();maxHeight-=this.element.outerHeight()-this.element.height();this.element.siblings(\":visible\").each(function(){var elem=$(this),position=elem.css(\"position\");if(position===\"absolute\"||position===\"fixed\"){return;}maxHeight-=elem.outerHeight(true);});this.element.children().not(this.panels).each(function(){maxHeight-=$(this).outerHeight(true);});this.panels.each(function(){$(this).height(Math.max(0,maxHeight-$(this).innerHeight()+$(this).height()));}).css(\"overflow\",\"auto\");}else if(heightStyle===\"auto\"){maxHeight=0;this.panels.each(function(){maxHeight=Math.max(maxHeight,$(this).height(\"\").height());}).height(maxHeight);}},_eventHandler:function _eventHandler(event){var options=this.options,active=this.active,anchor=$(event.currentTarget),tab=anchor.closest(\"li\"),clickedIsActive=tab[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():this._getPanelForTab(tab),toHide=!active.length?$():this._getPanelForTab(active),eventData={oldTab:active,oldPanel:toHide,newTab:collapsing?$():tab,newPanel:toShow};event.preventDefault();if(tab.hasClass(\"ui-state-disabled\")||// tab is already loading\ntab.hasClass(\"ui-tabs-loading\")||// can't switch durning an animation\nthis.running||// click on active header, but not collapsible\nclickedIsActive&&!options.collapsible||// allow canceling activation\nthis._trigger(\"beforeActivate\",event,eventData)===false){return;}options.active=collapsing?false:this.tabs.index(tab);this.active=clickedIsActive?$():tab;if(this.xhr){this.xhr.abort();}if(!toHide.length&&!toShow.length){$.error(\"jQuery UI Tabs: Mismatching fragment identifier.\");}if(toShow.length){this.load(this.tabs.index(tab),event);}this._toggle(event,eventData);},// Handles show/hide for selecting tabs\n_toggle:function _toggle(event,eventData){var that=this,toShow=eventData.newPanel,toHide=eventData.oldPanel;this.running=true;function complete(){that.running=false;that._trigger(\"activate\",event,eventData);}function show(){that._addClass(eventData.newTab.closest(\"li\"),\"ui-tabs-active\",\"ui-state-active\");if(toShow.length&&that.options.show){that._show(toShow,that.options.show,complete);}else{toShow.show();complete();}}// Start out by hiding, then showing, then completing\nif(toHide.length&&this.options.hide){this._hide(toHide,this.options.hide,function(){that._removeClass(eventData.oldTab.closest(\"li\"),\"ui-tabs-active\",\"ui-state-active\");show();});}else{this._removeClass(eventData.oldTab.closest(\"li\"),\"ui-tabs-active\",\"ui-state-active\");toHide.hide();show();}toHide.attr(\"aria-hidden\",\"true\");eventData.oldTab.attr({\"aria-selected\":\"false\",\"aria-expanded\":\"false\"});// If we're switching tabs, remove the old tab from the tab order.\n// If we're opening from collapsed state, remove the previous tab from the tab order.\n// If we're collapsing, then keep the collapsing tab in the tab order.\nif(toShow.length&&toHide.length){eventData.oldTab.attr(\"tabIndex\",-1);}else if(toShow.length){this.tabs.filter(function(){return $(this).attr(\"tabIndex\")===0;}).attr(\"tabIndex\",-1);}toShow.attr(\"aria-hidden\",\"false\");eventData.newTab.attr({\"aria-selected\":\"true\",\"aria-expanded\":\"true\",tabIndex:0});},_activate:function _activate(index){var anchor,active=this._findActive(index);// Trying to activate the already active panel\nif(active[0]===this.active[0]){return;}// Trying to collapse, simulate a click on the current active header\nif(!active.length){active=this.active;}anchor=active.find(\".ui-tabs-anchor\")[0];this._eventHandler({target:anchor,currentTarget:anchor,preventDefault:$.noop});},_findActive:function _findActive(index){return index===false?$():this.tabs.eq(index);},_getIndex:function _getIndex(index){// meta-function to give users option to provide a href string instead of a numerical index.\nif(typeof index===\"string\"){index=this.anchors.index(this.anchors.filter(\"[href$='\"+$.escapeSelector(index)+\"']\"));}return index;},_destroy:function _destroy(){if(this.xhr){this.xhr.abort();}this.tablist.removeAttr(\"role\").off(this.eventNamespace);this.anchors.removeAttr(\"role tabIndex\").removeUniqueId();this.tabs.add(this.panels).each(function(){if($.data(this,\"ui-tabs-destroy\")){$(this).remove();}else{$(this).removeAttr(\"role tabIndex \"+\"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded\");}});this.tabs.each(function(){var li=$(this),prev=li.data(\"ui-tabs-aria-controls\");if(prev){li.attr(\"aria-controls\",prev).removeData(\"ui-tabs-aria-controls\");}else{li.removeAttr(\"aria-controls\");}});this.panels.show();if(this.options.heightStyle!==\"content\"){this.panels.css(\"height\",\"\");}},enable:function enable(index){var disabled=this.options.disabled;if(disabled===false){return;}if(index===undefined){disabled=false;}else{index=this._getIndex(index);if(Array.isArray(disabled)){disabled=$.map(disabled,function(num){return num!==index?num:null;});}else{disabled=$.map(this.tabs,function(li,num){return num!==index?num:null;});}}this._setOptionDisabled(disabled);},disable:function disable(index){var disabled=this.options.disabled;if(disabled===true){return;}if(index===undefined){disabled=true;}else{index=this._getIndex(index);if($.inArray(index,disabled)!==-1){return;}if(Array.isArray(disabled)){disabled=$.merge([index],disabled).sort();}else{disabled=[index];}}this._setOptionDisabled(disabled);},load:function load(index,event){index=this._getIndex(index);var that=this,tab=this.tabs.eq(index),anchor=tab.find(\".ui-tabs-anchor\"),panel=this._getPanelForTab(tab),eventData={tab:tab,panel:panel},complete=function complete(jqXHR,status){if(status===\"abort\"){that.panels.stop(false,true);}that._removeClass(tab,\"ui-tabs-loading\");panel.removeAttr(\"aria-busy\");if(jqXHR===that.xhr){delete that.xhr;}};// Not remote\nif(this._isLocal(anchor[0])){return;}this.xhr=$.ajax(this._ajaxSettings(anchor,event,eventData));// Support: jQuery <1.8\n// jQuery <1.8 returns false if the request is canceled in beforeSend,\n// but as of 1.8, $.ajax() always returns a jqXHR object.\nif(this.xhr&&this.xhr.statusText!==\"canceled\"){this._addClass(tab,\"ui-tabs-loading\");panel.attr(\"aria-busy\",\"true\");this.xhr.done(function(response,status,jqXHR){// support: jQuery <1.8\n// http://bugs.jquery.com/ticket/11778\nsetTimeout(function(){panel.html(response);that._trigger(\"load\",event,eventData);complete(jqXHR,status);},1);}).fail(function(jqXHR,status){// support: jQuery <1.8\n// http://bugs.jquery.com/ticket/11778\nsetTimeout(function(){complete(jqXHR,status);},1);});}},_ajaxSettings:function _ajaxSettings(anchor,event,eventData){var that=this;return{// Support: IE <11 only\n// Strip any hash that exists to prevent errors with the Ajax request\nurl:anchor.attr(\"href\").replace(/#.*$/,\"\"),beforeSend:function beforeSend(jqXHR,settings){return that._trigger(\"beforeLoad\",event,$.extend({jqXHR:jqXHR,ajaxSettings:settings},eventData));}};},_getPanelForTab:function _getPanelForTab(tab){var id=$(tab).attr(\"aria-controls\");return this.element.find(this._sanitizeSelector(\"#\"+id));}});// DEPRECATED\n// TODO: Switch return back to widget declaration at top of file when this is removed\nif($.uiBackCompat!==false){// Backcompat for ui-tab class (now ui-tabs-tab)\n$.widget(\"ui.tabs\",$.ui.tabs,{_processTabs:function _processTabs(){this._superApply(arguments);this._addClass(this.tabs,\"ui-tab\");}});}var widgetsTabs=$.ui.tabs;/*!\r\n * jQuery UI Tooltip 1.13.1\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */ //>>label: Tooltip\n//>>group: Widgets\n//>>description: Shows additional information for any element on hover or focus.\n//>>docs: http://api.jqueryui.com/tooltip/\n//>>demos: http://jqueryui.com/tooltip/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/tooltip.css\n//>>css.theme: ../../themes/base/theme.css\n$.widget(\"ui.tooltip\",{version:\"1.13.1\",options:{classes:{\"ui-tooltip\":\"ui-corner-all ui-widget-shadow\"},content:function content(){var title=$(this).attr(\"title\");// Escape title, since we're going from an attribute to raw HTML\nreturn $(\"<a>\").text(title).html();},hide:true,// Disabled elements have inconsistent behavior across browsers (#8661)\nitems:\"[title]:not([disabled])\",position:{my:\"left top+15\",at:\"left bottom\",collision:\"flipfit flip\"},show:true,track:false,// Callbacks\nclose:null,open:null},_addDescribedBy:function _addDescribedBy(elem,id){var describedby=(elem.attr(\"aria-describedby\")||\"\").split(/\\s+/);describedby.push(id);elem.data(\"ui-tooltip-id\",id).attr(\"aria-describedby\",String.prototype.trim.call(describedby.join(\" \")));},_removeDescribedBy:function _removeDescribedBy(elem){var id=elem.data(\"ui-tooltip-id\"),describedby=(elem.attr(\"aria-describedby\")||\"\").split(/\\s+/),index=$.inArray(id,describedby);if(index!==-1){describedby.splice(index,1);}elem.removeData(\"ui-tooltip-id\");describedby=String.prototype.trim.call(describedby.join(\" \"));if(describedby){elem.attr(\"aria-describedby\",describedby);}else{elem.removeAttr(\"aria-describedby\");}},_create:function _create(){this._on({mouseover:\"open\",focusin:\"open\"});// IDs of generated tooltips, needed for destroy\nthis.tooltips={};// IDs of parent tooltips where we removed the title attribute\nthis.parents={};// Append the aria-live region so tooltips announce correctly\nthis.liveRegion=$(\"<div>\").attr({role:\"log\",\"aria-live\":\"assertive\",\"aria-relevant\":\"additions\"}).appendTo(this.document[0].body);this._addClass(this.liveRegion,null,\"ui-helper-hidden-accessible\");this.disabledTitles=$([]);},_setOption:function _setOption(key,value){var that=this;this._super(key,value);if(key===\"content\"){$.each(this.tooltips,function(id,tooltipData){that._updateContent(tooltipData.element);});}},_setOptionDisabled:function _setOptionDisabled(value){this[value?\"_disable\":\"_enable\"]();},_disable:function _disable(){var that=this;// Close open tooltips\n$.each(this.tooltips,function(id,tooltipData){var event=$.Event(\"blur\");event.target=event.currentTarget=tooltipData.element[0];that.close(event,true);});// Remove title attributes to prevent native tooltips\nthis.disabledTitles=this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function(){var element=$(this);if(element.is(\"[title]\")){return element.data(\"ui-tooltip-title\",element.attr(\"title\")).removeAttr(\"title\");}}));},_enable:function _enable(){// restore title attributes\nthis.disabledTitles.each(function(){var element=$(this);if(element.data(\"ui-tooltip-title\")){element.attr(\"title\",element.data(\"ui-tooltip-title\"));}});this.disabledTitles=$([]);},open:function open(event){var that=this,target=$(event?event.target:this.element)// we need closest here due to mouseover bubbling,\n// but always pointing at the same event target\n.closest(this.options.items);// No element to show a tooltip for or the tooltip is already open\nif(!target.length||target.data(\"ui-tooltip-id\")){return;}if(target.attr(\"title\")){target.data(\"ui-tooltip-title\",target.attr(\"title\"));}target.data(\"ui-tooltip-open\",true);// Kill parent tooltips, custom or native, for hover\nif(event&&event.type===\"mouseover\"){target.parents().each(function(){var parent=$(this),blurEvent;if(parent.data(\"ui-tooltip-open\")){blurEvent=$.Event(\"blur\");blurEvent.target=blurEvent.currentTarget=this;that.close(blurEvent,true);}if(parent.attr(\"title\")){parent.uniqueId();that.parents[this.id]={element:this,title:parent.attr(\"title\")};parent.attr(\"title\",\"\");}});}this._registerCloseHandlers(event,target);this._updateContent(target,event);},_updateContent:function _updateContent(target,event){var content,contentOption=this.options.content,that=this,eventType=event?event.type:null;if(typeof contentOption===\"string\"||contentOption.nodeType||contentOption.jquery){return this._open(event,target,contentOption);}content=contentOption.call(target[0],function(response){// IE may instantly serve a cached response for ajax requests\n// delay this call to _open so the other call to _open runs first\nthat._delay(function(){// Ignore async response if tooltip was closed already\nif(!target.data(\"ui-tooltip-open\")){return;}// JQuery creates a special event for focusin when it doesn't\n// exist natively. To improve performance, the native event\n// object is reused and the type is changed. Therefore, we can't\n// rely on the type being correct after the event finished\n// bubbling, so we set it back to the previous value. (#8740)\nif(event){event.type=eventType;}this._open(event,target,response);});});if(content){this._open(event,target,content);}},_open:function _open(event,target,content){var tooltipData,tooltip,delayedShow,a11yContent,positionOption=$.extend({},this.options.position);if(!content){return;}// Content can be updated multiple times. If the tooltip already\n// exists, then just update the content and bail.\ntooltipData=this._find(target);if(tooltipData){tooltipData.tooltip.find(\".ui-tooltip-content\").html(content);return;}// If we have a title, clear it to prevent the native tooltip\n// we have to check first to avoid defining a title if none exists\n// (we don't want to cause an element to start matching [title])\n//\n// We use removeAttr only for key events, to allow IE to export the correct\n// accessible attributes. For mouse events, set to empty string to avoid\n// native tooltip showing up (happens only when removing inside mouseover).\nif(target.is(\"[title]\")){if(event&&event.type===\"mouseover\"){target.attr(\"title\",\"\");}else{target.removeAttr(\"title\");}}tooltipData=this._tooltip(target);tooltip=tooltipData.tooltip;this._addDescribedBy(target,tooltip.attr(\"id\"));tooltip.find(\".ui-tooltip-content\").html(content);// Support: Voiceover on OS X, JAWS on IE <= 9\n// JAWS announces deletions even when aria-relevant=\"additions\"\n// Voiceover will sometimes re-read the entire log region's contents from the beginning\nthis.liveRegion.children().hide();a11yContent=$(\"<div>\").html(tooltip.find(\".ui-tooltip-content\").html());a11yContent.removeAttr(\"name\").find(\"[name]\").removeAttr(\"name\");a11yContent.removeAttr(\"id\").find(\"[id]\").removeAttr(\"id\");a11yContent.appendTo(this.liveRegion);function position(event){positionOption.of=event;if(tooltip.is(\":hidden\")){return;}tooltip.position(positionOption);}if(this.options.track&&event&&/^mouse/.test(event.type)){this._on(this.document,{mousemove:position});// trigger once to override element-relative positioning\nposition(event);}else{tooltip.position($.extend({of:target},this.options.position));}tooltip.hide();this._show(tooltip,this.options.show);// Handle tracking tooltips that are shown with a delay (#8644). As soon\n// as the tooltip is visible, position the tooltip using the most recent\n// event.\n// Adds the check to add the timers only when both delay and track options are set (#14682)\nif(this.options.track&&this.options.show&&this.options.show.delay){delayedShow=this.delayedShow=setInterval(function(){if(tooltip.is(\":visible\")){position(positionOption.of);clearInterval(delayedShow);}},13);}this._trigger(\"open\",event,{tooltip:tooltip});},_registerCloseHandlers:function _registerCloseHandlers(event,target){var events={keyup:function keyup(event){if(event.keyCode===$.ui.keyCode.ESCAPE){var fakeEvent=$.Event(event);fakeEvent.currentTarget=target[0];this.close(fakeEvent,true);}}};// Only bind remove handler for delegated targets. Non-delegated\n// tooltips will handle this in destroy.\nif(target[0]!==this.element[0]){events.remove=function(){var targetElement=this._find(target);if(targetElement){this._removeTooltip(targetElement.tooltip);}};}if(!event||event.type===\"mouseover\"){events.mouseleave=\"close\";}if(!event||event.type===\"focusin\"){events.focusout=\"close\";}this._on(true,target,events);},close:function close(event){var tooltip,that=this,target=$(event?event.currentTarget:this.element),tooltipData=this._find(target);// The tooltip may already be closed\nif(!tooltipData){// We set ui-tooltip-open immediately upon open (in open()), but only set the\n// additional data once there's actually content to show (in _open()). So even if the\n// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in\n// the period between open() and _open().\ntarget.removeData(\"ui-tooltip-open\");return;}tooltip=tooltipData.tooltip;// Disabling closes the tooltip, so we need to track when we're closing\n// to avoid an infinite loop in case the tooltip becomes disabled on close\nif(tooltipData.closing){return;}// Clear the interval for delayed tracking tooltips\nclearInterval(this.delayedShow);// Only set title if we had one before (see comment in _open())\n// If the title attribute has changed since open(), don't restore\nif(target.data(\"ui-tooltip-title\")&&!target.attr(\"title\")){target.attr(\"title\",target.data(\"ui-tooltip-title\"));}this._removeDescribedBy(target);tooltipData.hiding=true;tooltip.stop(true);this._hide(tooltip,this.options.hide,function(){that._removeTooltip($(this));});target.removeData(\"ui-tooltip-open\");this._off(target,\"mouseleave focusout keyup\");// Remove 'remove' binding only on delegated targets\nif(target[0]!==this.element[0]){this._off(target,\"remove\");}this._off(this.document,\"mousemove\");if(event&&event.type===\"mouseleave\"){$.each(this.parents,function(id,parent){$(parent.element).attr(\"title\",parent.title);delete that.parents[id];});}tooltipData.closing=true;this._trigger(\"close\",event,{tooltip:tooltip});if(!tooltipData.hiding){tooltipData.closing=false;}},_tooltip:function _tooltip(element){var tooltip=$(\"<div>\").attr(\"role\",\"tooltip\"),content=$(\"<div>\").appendTo(tooltip),id=tooltip.uniqueId().attr(\"id\");this._addClass(content,\"ui-tooltip-content\");this._addClass(tooltip,\"ui-tooltip\",\"ui-widget ui-widget-content\");tooltip.appendTo(this._appendTo(element));return this.tooltips[id]={element:element,tooltip:tooltip};},_find:function _find(target){var id=target.data(\"ui-tooltip-id\");return id?this.tooltips[id]:null;},_removeTooltip:function _removeTooltip(tooltip){// Clear the interval for delayed tracking tooltips\nclearInterval(this.delayedShow);tooltip.remove();delete this.tooltips[tooltip.attr(\"id\")];},_appendTo:function _appendTo(target){var element=target.closest(\".ui-front, dialog\");if(!element.length){element=this.document[0].body;}return element;},_destroy:function _destroy(){var that=this;// Close open tooltips\n$.each(this.tooltips,function(id,tooltipData){// Delegate to close method to handle common cleanup\nvar event=$.Event(\"blur\"),element=tooltipData.element;event.target=event.currentTarget=element[0];that.close(event,true);// Remove immediately; destroying an open tooltip doesn't use the\n// hide animation\n$(\"#\"+id).remove();// Restore the title\nif(element.data(\"ui-tooltip-title\")){// If the title attribute has changed since open(), don't restore\nif(!element.attr(\"title\")){element.attr(\"title\",element.data(\"ui-tooltip-title\"));}element.removeData(\"ui-tooltip-title\");}});this.liveRegion.remove();}});// DEPRECATED\n// TODO: Switch return back to widget declaration at top of file when this is removed\nif($.uiBackCompat!==false){// Backcompat for tooltipClass option\n$.widget(\"ui.tooltip\",$.ui.tooltip,{options:{tooltipClass:null},_tooltip:function _tooltip(){var tooltipData=this._superApply(arguments);if(this.options.tooltipClass){tooltipData.tooltip.addClass(this.options.tooltipClass);}return tooltipData;}});}var widgetsTooltip=$.ui.tooltip;});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/jquery-ui.js\n");

/***/ }),

/***/ "./public/plugins/bootstrap/js/bootstrap.bundle.min.js":
/*!*************************************************************!*\
  !*** ./public/plugins/bootstrap/js/bootstrap.bundle.min.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\r\n  * Bootstrap v4.6.1 (https://getbootstrap.com/)\r\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\r\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n  */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? e(exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (t, e) {\n  \"use strict\";\n\n  function n(t) {\n    return t && \"object\" == _typeof(t) && \"default\" in t ? t : {\n      \"default\": t\n    };\n  }\n\n  var i = n(e);\n\n  function o(t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var i = e[n];\n      i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n    }\n  }\n\n  function r(t, e, n) {\n    return e && o(t.prototype, e), n && o(t, n), t;\n  }\n\n  function a() {\n    return a = Object.assign || function (t) {\n      for (var e = 1; e < arguments.length; e++) {\n        var n = arguments[e];\n\n        for (var i in n) {\n          Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n        }\n      }\n\n      return t;\n    }, a.apply(this, arguments);\n  }\n\n  function s(t, e) {\n    return s = Object.setPrototypeOf || function (t, e) {\n      return t.__proto__ = e, t;\n    }, s(t, e);\n  }\n\n  var l = \"transitionend\";\n  var u = {\n    TRANSITION_END: \"bsTransitionEnd\",\n    getUID: function getUID(t) {\n      do {\n        t += ~~(1e6 * Math.random());\n      } while (document.getElementById(t));\n\n      return t;\n    },\n    getSelectorFromElement: function getSelectorFromElement(t) {\n      var e = t.getAttribute(\"data-target\");\n\n      if (!e || \"#\" === e) {\n        var n = t.getAttribute(\"href\");\n        e = n && \"#\" !== n ? n.trim() : \"\";\n      }\n\n      try {\n        return document.querySelector(e) ? e : null;\n      } catch (t) {\n        return null;\n      }\n    },\n    getTransitionDurationFromElement: function getTransitionDurationFromElement(t) {\n      if (!t) return 0;\n      var e = i[\"default\"](t).css(\"transition-duration\"),\n          n = i[\"default\"](t).css(\"transition-delay\"),\n          o = parseFloat(e),\n          r = parseFloat(n);\n      return o || r ? (e = e.split(\",\")[0], n = n.split(\",\")[0], 1e3 * (parseFloat(e) + parseFloat(n))) : 0;\n    },\n    reflow: function reflow(t) {\n      return t.offsetHeight;\n    },\n    triggerTransitionEnd: function triggerTransitionEnd(t) {\n      i[\"default\"](t).trigger(l);\n    },\n    supportsTransitionEnd: function supportsTransitionEnd() {\n      return Boolean(l);\n    },\n    isElement: function isElement(t) {\n      return (t[0] || t).nodeType;\n    },\n    typeCheckConfig: function typeCheckConfig(t, e, n) {\n      for (var i in n) {\n        if (Object.prototype.hasOwnProperty.call(n, i)) {\n          var o = n[i],\n              r = e[i],\n              a = r && u.isElement(r) ? \"element\" : null === (s = r) || \"undefined\" == typeof s ? \"\" + s : {}.toString.call(s).match(/\\s([a-z]+)/i)[1].toLowerCase();\n          if (!new RegExp(o).test(a)) throw new Error(t.toUpperCase() + ': Option \"' + i + '\" provided type \"' + a + '\" but expected type \"' + o + '\".');\n        }\n      }\n\n      var s;\n    },\n    findShadowRoot: function findShadowRoot(t) {\n      if (!document.documentElement.attachShadow) return null;\n\n      if (\"function\" == typeof t.getRootNode) {\n        var e = t.getRootNode();\n        return e instanceof ShadowRoot ? e : null;\n      }\n\n      return t instanceof ShadowRoot ? t : t.parentNode ? u.findShadowRoot(t.parentNode) : null;\n    },\n    jQueryDetection: function jQueryDetection() {\n      if (\"undefined\" == typeof i[\"default\"]) throw new TypeError(\"Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.\");\n      var t = i[\"default\"].fn.jquery.split(\" \")[0].split(\".\");\n      if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || t[0] >= 4) throw new Error(\"Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0\");\n    }\n  };\n  u.jQueryDetection(), i[\"default\"].fn.emulateTransitionEnd = function (t) {\n    var e = this,\n        n = !1;\n    return i[\"default\"](this).one(u.TRANSITION_END, function () {\n      n = !0;\n    }), setTimeout(function () {\n      n || u.triggerTransitionEnd(e);\n    }, t), this;\n  }, i[\"default\"].event.special[u.TRANSITION_END] = {\n    bindType: l,\n    delegateType: l,\n    handle: function handle(t) {\n      if (i[\"default\"](t.target).is(this)) return t.handleObj.handler.apply(this, arguments);\n    }\n  };\n\n  var f = \"bs.alert\",\n      d = i[\"default\"].fn.alert,\n      c = function () {\n    function t(t) {\n      this._element = t;\n    }\n\n    var e = t.prototype;\n    return e.close = function (t) {\n      var e = this._element;\n      t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);\n    }, e.dispose = function () {\n      i[\"default\"].removeData(this._element, f), this._element = null;\n    }, e._getRootElement = function (t) {\n      var e = u.getSelectorFromElement(t),\n          n = !1;\n      return e && (n = document.querySelector(e)), n || (n = i[\"default\"](t).closest(\".alert\")[0]), n;\n    }, e._triggerCloseEvent = function (t) {\n      var e = i[\"default\"].Event(\"close.bs.alert\");\n      return i[\"default\"](t).trigger(e), e;\n    }, e._removeElement = function (t) {\n      var e = this;\n\n      if (i[\"default\"](t).removeClass(\"show\"), i[\"default\"](t).hasClass(\"fade\")) {\n        var n = u.getTransitionDurationFromElement(t);\n        i[\"default\"](t).one(u.TRANSITION_END, function (n) {\n          return e._destroyElement(t, n);\n        }).emulateTransitionEnd(n);\n      } else this._destroyElement(t);\n    }, e._destroyElement = function (t) {\n      i[\"default\"](t).detach().trigger(\"closed.bs.alert\").remove();\n    }, t._jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = i[\"default\"](this),\n            o = n.data(f);\n        o || (o = new t(this), n.data(f, o)), \"close\" === e && o[e](this);\n      });\n    }, t._handleDismiss = function (t) {\n      return function (e) {\n        e && e.preventDefault(), t.close(this);\n      };\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }]), t;\n  }();\n\n  i[\"default\"](document).on(\"click.bs.alert.data-api\", '[data-dismiss=\"alert\"]', c._handleDismiss(new c())), i[\"default\"].fn.alert = c._jQueryInterface, i[\"default\"].fn.alert.Constructor = c, i[\"default\"].fn.alert.noConflict = function () {\n    return i[\"default\"].fn.alert = d, c._jQueryInterface;\n  };\n\n  var h = \"bs.button\",\n      p = i[\"default\"].fn.button,\n      m = \"active\",\n      g = '[data-toggle^=\"button\"]',\n      _ = 'input:not([type=\"hidden\"])',\n      v = \".btn\",\n      b = function () {\n    function t(t) {\n      this._element = t, this.shouldAvoidTriggerChange = !1;\n    }\n\n    var e = t.prototype;\n    return e.toggle = function () {\n      var t = !0,\n          e = !0,\n          n = i[\"default\"](this._element).closest('[data-toggle=\"buttons\"]')[0];\n\n      if (n) {\n        var o = this._element.querySelector(_);\n\n        if (o) {\n          if (\"radio\" === o.type) if (o.checked && this._element.classList.contains(m)) t = !1;else {\n            var r = n.querySelector(\".active\");\n            r && i[\"default\"](r).removeClass(m);\n          }\n          t && (\"checkbox\" !== o.type && \"radio\" !== o.type || (o.checked = !this._element.classList.contains(m)), this.shouldAvoidTriggerChange || i[\"default\"](o).trigger(\"change\")), o.focus(), e = !1;\n        }\n      }\n\n      this._element.hasAttribute(\"disabled\") || this._element.classList.contains(\"disabled\") || (e && this._element.setAttribute(\"aria-pressed\", !this._element.classList.contains(m)), t && i[\"default\"](this._element).toggleClass(m));\n    }, e.dispose = function () {\n      i[\"default\"].removeData(this._element, h), this._element = null;\n    }, t._jQueryInterface = function (e, n) {\n      return this.each(function () {\n        var o = i[\"default\"](this),\n            r = o.data(h);\n        r || (r = new t(this), o.data(h, r)), r.shouldAvoidTriggerChange = n, \"toggle\" === e && r[e]();\n      });\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }]), t;\n  }();\n\n  i[\"default\"](document).on(\"click.bs.button.data-api\", g, function (t) {\n    var e = t.target,\n        n = e;\n    if (i[\"default\"](e).hasClass(\"btn\") || (e = i[\"default\"](e).closest(v)[0]), !e || e.hasAttribute(\"disabled\") || e.classList.contains(\"disabled\")) t.preventDefault();else {\n      var o = e.querySelector(_);\n      if (o && (o.hasAttribute(\"disabled\") || o.classList.contains(\"disabled\"))) return void t.preventDefault();\n      \"INPUT\" !== n.tagName && \"LABEL\" === e.tagName || b._jQueryInterface.call(i[\"default\"](e), \"toggle\", \"INPUT\" === n.tagName);\n    }\n  }).on(\"focus.bs.button.data-api blur.bs.button.data-api\", g, function (t) {\n    var e = i[\"default\"](t.target).closest(v)[0];\n    i[\"default\"](e).toggleClass(\"focus\", /^focus(in)?$/.test(t.type));\n  }), i[\"default\"](window).on(\"load.bs.button.data-api\", function () {\n    for (var t = [].slice.call(document.querySelectorAll('[data-toggle=\"buttons\"] .btn')), e = 0, n = t.length; e < n; e++) {\n      var i = t[e],\n          o = i.querySelector(_);\n      o.checked || o.hasAttribute(\"checked\") ? i.classList.add(m) : i.classList.remove(m);\n    }\n\n    for (var r = 0, a = (t = [].slice.call(document.querySelectorAll('[data-toggle=\"button\"]'))).length; r < a; r++) {\n      var s = t[r];\n      \"true\" === s.getAttribute(\"aria-pressed\") ? s.classList.add(m) : s.classList.remove(m);\n    }\n  }), i[\"default\"].fn.button = b._jQueryInterface, i[\"default\"].fn.button.Constructor = b, i[\"default\"].fn.button.noConflict = function () {\n    return i[\"default\"].fn.button = p, b._jQueryInterface;\n  };\n\n  var y = \"carousel\",\n      E = \"bs.carousel\",\n      w = i[\"default\"].fn[y],\n      T = \"active\",\n      C = \"next\",\n      S = \"prev\",\n      N = \"slid.bs.carousel\",\n      D = \".active.carousel-item\",\n      A = {\n    interval: 5e3,\n    keyboard: !0,\n    slide: !1,\n    pause: \"hover\",\n    wrap: !0,\n    touch: !0\n  },\n      k = {\n    interval: \"(number|boolean)\",\n    keyboard: \"boolean\",\n    slide: \"(boolean|string)\",\n    pause: \"(string|boolean)\",\n    wrap: \"boolean\",\n    touch: \"boolean\"\n  },\n      I = {\n    TOUCH: \"touch\",\n    PEN: \"pen\"\n  },\n      O = function () {\n    function t(t, e) {\n      this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._element = t, this._indicatorsElement = this._element.querySelector(\".carousel-indicators\"), this._touchSupported = \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent), this._addEventListeners();\n    }\n\n    var e = t.prototype;\n    return e.next = function () {\n      this._isSliding || this._slide(C);\n    }, e.nextWhenVisible = function () {\n      var t = i[\"default\"](this._element);\n      !document.hidden && t.is(\":visible\") && \"hidden\" !== t.css(\"visibility\") && this.next();\n    }, e.prev = function () {\n      this._isSliding || this._slide(S);\n    }, e.pause = function (t) {\n      t || (this._isPaused = !0), this._element.querySelector(\".carousel-item-next, .carousel-item-prev\") && (u.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }, e.cycle = function (t) {\n      t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }, e.to = function (t) {\n      var e = this;\n      this._activeElement = this._element.querySelector(D);\n\n      var n = this._getItemIndex(this._activeElement);\n\n      if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) i[\"default\"](this._element).one(N, function () {\n        return e.to(t);\n      });else {\n        if (n === t) return this.pause(), void this.cycle();\n        var o = t > n ? C : S;\n\n        this._slide(o, this._items[t]);\n      }\n    }, e.dispose = function () {\n      i[\"default\"](this._element).off(\".bs.carousel\"), i[\"default\"].removeData(this._element, E), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;\n    }, e._getConfig = function (t) {\n      return t = a({}, A, t), u.typeCheckConfig(y, t, k), t;\n    }, e._handleSwipe = function () {\n      var t = Math.abs(this.touchDeltaX);\n\n      if (!(t <= 40)) {\n        var e = t / this.touchDeltaX;\n        this.touchDeltaX = 0, e > 0 && this.prev(), e < 0 && this.next();\n      }\n    }, e._addEventListeners = function () {\n      var t = this;\n      this._config.keyboard && i[\"default\"](this._element).on(\"keydown.bs.carousel\", function (e) {\n        return t._keydown(e);\n      }), \"hover\" === this._config.pause && i[\"default\"](this._element).on(\"mouseenter.bs.carousel\", function (e) {\n        return t.pause(e);\n      }).on(\"mouseleave.bs.carousel\", function (e) {\n        return t.cycle(e);\n      }), this._config.touch && this._addTouchEventListeners();\n    }, e._addTouchEventListeners = function () {\n      var t = this;\n\n      if (this._touchSupported) {\n        var e = function e(_e2) {\n          t._pointerEvent && I[_e2.originalEvent.pointerType.toUpperCase()] ? t.touchStartX = _e2.originalEvent.clientX : t._pointerEvent || (t.touchStartX = _e2.originalEvent.touches[0].clientX);\n        },\n            n = function n(e) {\n          t._pointerEvent && I[e.originalEvent.pointerType.toUpperCase()] && (t.touchDeltaX = e.originalEvent.clientX - t.touchStartX), t._handleSwipe(), \"hover\" === t._config.pause && (t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function (e) {\n            return t.cycle(e);\n          }, 500 + t._config.interval));\n        };\n\n        i[\"default\"](this._element.querySelectorAll(\".carousel-item img\")).on(\"dragstart.bs.carousel\", function (t) {\n          return t.preventDefault();\n        }), this._pointerEvent ? (i[\"default\"](this._element).on(\"pointerdown.bs.carousel\", function (t) {\n          return e(t);\n        }), i[\"default\"](this._element).on(\"pointerup.bs.carousel\", function (t) {\n          return n(t);\n        }), this._element.classList.add(\"pointer-event\")) : (i[\"default\"](this._element).on(\"touchstart.bs.carousel\", function (t) {\n          return e(t);\n        }), i[\"default\"](this._element).on(\"touchmove.bs.carousel\", function (e) {\n          return function (e) {\n            t.touchDeltaX = e.originalEvent.touches && e.originalEvent.touches.length > 1 ? 0 : e.originalEvent.touches[0].clientX - t.touchStartX;\n          }(e);\n        }), i[\"default\"](this._element).on(\"touchend.bs.carousel\", function (t) {\n          return n(t);\n        }));\n      }\n    }, e._keydown = function (t) {\n      if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {\n        case 37:\n          t.preventDefault(), this.prev();\n          break;\n\n        case 39:\n          t.preventDefault(), this.next();\n      }\n    }, e._getItemIndex = function (t) {\n      return this._items = t && t.parentNode ? [].slice.call(t.parentNode.querySelectorAll(\".carousel-item\")) : [], this._items.indexOf(t);\n    }, e._getItemByDirection = function (t, e) {\n      var n = t === C,\n          i = t === S,\n          o = this._getItemIndex(e),\n          r = this._items.length - 1;\n\n      if ((i && 0 === o || n && o === r) && !this._config.wrap) return e;\n      var a = (o + (t === S ? -1 : 1)) % this._items.length;\n      return -1 === a ? this._items[this._items.length - 1] : this._items[a];\n    }, e._triggerSlideEvent = function (t, e) {\n      var n = this._getItemIndex(t),\n          o = this._getItemIndex(this._element.querySelector(D)),\n          r = i[\"default\"].Event(\"slide.bs.carousel\", {\n        relatedTarget: t,\n        direction: e,\n        from: o,\n        to: n\n      });\n\n      return i[\"default\"](this._element).trigger(r), r;\n    }, e._setActiveIndicatorElement = function (t) {\n      if (this._indicatorsElement) {\n        var e = [].slice.call(this._indicatorsElement.querySelectorAll(\".active\"));\n        i[\"default\"](e).removeClass(T);\n\n        var n = this._indicatorsElement.children[this._getItemIndex(t)];\n\n        n && i[\"default\"](n).addClass(T);\n      }\n    }, e._updateInterval = function () {\n      var t = this._activeElement || this._element.querySelector(D);\n\n      if (t) {\n        var e = parseInt(t.getAttribute(\"data-interval\"), 10);\n        e ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e) : this._config.interval = this._config.defaultInterval || this._config.interval;\n      }\n    }, e._slide = function (t, e) {\n      var n,\n          o,\n          r,\n          a = this,\n          s = this._element.querySelector(D),\n          l = this._getItemIndex(s),\n          f = e || s && this._getItemByDirection(t, s),\n          d = this._getItemIndex(f),\n          c = Boolean(this._interval);\n\n      if (t === C ? (n = \"carousel-item-left\", o = \"carousel-item-next\", r = \"left\") : (n = \"carousel-item-right\", o = \"carousel-item-prev\", r = \"right\"), f && i[\"default\"](f).hasClass(T)) this._isSliding = !1;else if (!this._triggerSlideEvent(f, r).isDefaultPrevented() && s && f) {\n        this._isSliding = !0, c && this.pause(), this._setActiveIndicatorElement(f), this._activeElement = f;\n        var h = i[\"default\"].Event(N, {\n          relatedTarget: f,\n          direction: r,\n          from: l,\n          to: d\n        });\n\n        if (i[\"default\"](this._element).hasClass(\"slide\")) {\n          i[\"default\"](f).addClass(o), u.reflow(f), i[\"default\"](s).addClass(n), i[\"default\"](f).addClass(n);\n          var p = u.getTransitionDurationFromElement(s);\n          i[\"default\"](s).one(u.TRANSITION_END, function () {\n            i[\"default\"](f).removeClass(n + \" \" + o).addClass(T), i[\"default\"](s).removeClass(\"active \" + o + \" \" + n), a._isSliding = !1, setTimeout(function () {\n              return i[\"default\"](a._element).trigger(h);\n            }, 0);\n          }).emulateTransitionEnd(p);\n        } else i[\"default\"](s).removeClass(T), i[\"default\"](f).addClass(T), this._isSliding = !1, i[\"default\"](this._element).trigger(h);\n\n        c && this.cycle();\n      }\n    }, t._jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = i[\"default\"](this).data(E),\n            o = a({}, A, i[\"default\"](this).data());\n        \"object\" == _typeof(e) && (o = a({}, o, e));\n        var r = \"string\" == typeof e ? e : o.slide;\n        if (n || (n = new t(this, o), i[\"default\"](this).data(E, n)), \"number\" == typeof e) n.to(e);else if (\"string\" == typeof r) {\n          if (\"undefined\" == typeof n[r]) throw new TypeError('No method named \"' + r + '\"');\n          n[r]();\n        } else o.interval && o.ride && (n.pause(), n.cycle());\n      });\n    }, t._dataApiClickHandler = function (e) {\n      var n = u.getSelectorFromElement(this);\n\n      if (n) {\n        var o = i[\"default\"](n)[0];\n\n        if (o && i[\"default\"](o).hasClass(\"carousel\")) {\n          var r = a({}, i[\"default\"](o).data(), i[\"default\"](this).data()),\n              s = this.getAttribute(\"data-slide-to\");\n          s && (r.interval = !1), t._jQueryInterface.call(i[\"default\"](o), r), s && i[\"default\"](o).data(E).to(s), e.preventDefault();\n        }\n      }\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return A;\n      }\n    }]), t;\n  }();\n\n  i[\"default\"](document).on(\"click.bs.carousel.data-api\", \"[data-slide], [data-slide-to]\", O._dataApiClickHandler), i[\"default\"](window).on(\"load.bs.carousel.data-api\", function () {\n    for (var t = [].slice.call(document.querySelectorAll('[data-ride=\"carousel\"]')), e = 0, n = t.length; e < n; e++) {\n      var o = i[\"default\"](t[e]);\n\n      O._jQueryInterface.call(o, o.data());\n    }\n  }), i[\"default\"].fn[y] = O._jQueryInterface, i[\"default\"].fn[y].Constructor = O, i[\"default\"].fn[y].noConflict = function () {\n    return i[\"default\"].fn[y] = w, O._jQueryInterface;\n  };\n\n  var x = \"collapse\",\n      j = \"bs.collapse\",\n      L = i[\"default\"].fn[x],\n      P = \"show\",\n      F = \"collapse\",\n      R = \"collapsing\",\n      H = \"collapsed\",\n      M = \"width\",\n      q = '[data-toggle=\"collapse\"]',\n      B = {\n    toggle: !0,\n    parent: \"\"\n  },\n      Q = {\n    toggle: \"boolean\",\n    parent: \"(string|element)\"\n  },\n      W = function () {\n    function t(t, e) {\n      this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle=\"collapse\"][href=\"#' + t.id + '\"],[data-toggle=\"collapse\"][data-target=\"#' + t.id + '\"]'));\n\n      for (var n = [].slice.call(document.querySelectorAll(q)), i = 0, o = n.length; i < o; i++) {\n        var r = n[i],\n            a = u.getSelectorFromElement(r),\n            s = [].slice.call(document.querySelectorAll(a)).filter(function (e) {\n          return e === t;\n        });\n        null !== a && s.length > 0 && (this._selector = a, this._triggerArray.push(r));\n      }\n\n      this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();\n    }\n\n    var e = t.prototype;\n    return e.toggle = function () {\n      i[\"default\"](this._element).hasClass(P) ? this.hide() : this.show();\n    }, e.show = function () {\n      var e,\n          n,\n          o = this;\n\n      if (!(this._isTransitioning || i[\"default\"](this._element).hasClass(P) || (this._parent && 0 === (e = [].slice.call(this._parent.querySelectorAll(\".show, .collapsing\")).filter(function (t) {\n        return \"string\" == typeof o._config.parent ? t.getAttribute(\"data-parent\") === o._config.parent : t.classList.contains(F);\n      })).length && (e = null), e && (n = i[\"default\"](e).not(this._selector).data(j)) && n._isTransitioning))) {\n        var r = i[\"default\"].Event(\"show.bs.collapse\");\n\n        if (i[\"default\"](this._element).trigger(r), !r.isDefaultPrevented()) {\n          e && (t._jQueryInterface.call(i[\"default\"](e).not(this._selector), \"hide\"), n || i[\"default\"](e).data(j, null));\n\n          var a = this._getDimension();\n\n          i[\"default\"](this._element).removeClass(F).addClass(R), this._element.style[a] = 0, this._triggerArray.length && i[\"default\"](this._triggerArray).removeClass(H).attr(\"aria-expanded\", !0), this.setTransitioning(!0);\n          var s = \"scroll\" + (a[0].toUpperCase() + a.slice(1)),\n              l = u.getTransitionDurationFromElement(this._element);\n          i[\"default\"](this._element).one(u.TRANSITION_END, function () {\n            i[\"default\"](o._element).removeClass(R).addClass(\"collapse show\"), o._element.style[a] = \"\", o.setTransitioning(!1), i[\"default\"](o._element).trigger(\"shown.bs.collapse\");\n          }).emulateTransitionEnd(l), this._element.style[a] = this._element[s] + \"px\";\n        }\n      }\n    }, e.hide = function () {\n      var t = this;\n\n      if (!this._isTransitioning && i[\"default\"](this._element).hasClass(P)) {\n        var e = i[\"default\"].Event(\"hide.bs.collapse\");\n\n        if (i[\"default\"](this._element).trigger(e), !e.isDefaultPrevented()) {\n          var n = this._getDimension();\n\n          this._element.style[n] = this._element.getBoundingClientRect()[n] + \"px\", u.reflow(this._element), i[\"default\"](this._element).addClass(R).removeClass(\"collapse show\");\n          var o = this._triggerArray.length;\n          if (o > 0) for (var r = 0; r < o; r++) {\n            var a = this._triggerArray[r],\n                s = u.getSelectorFromElement(a);\n            null !== s && (i[\"default\"]([].slice.call(document.querySelectorAll(s))).hasClass(P) || i[\"default\"](a).addClass(H).attr(\"aria-expanded\", !1));\n          }\n          this.setTransitioning(!0), this._element.style[n] = \"\";\n          var l = u.getTransitionDurationFromElement(this._element);\n          i[\"default\"](this._element).one(u.TRANSITION_END, function () {\n            t.setTransitioning(!1), i[\"default\"](t._element).removeClass(R).addClass(F).trigger(\"hidden.bs.collapse\");\n          }).emulateTransitionEnd(l);\n        }\n      }\n    }, e.setTransitioning = function (t) {\n      this._isTransitioning = t;\n    }, e.dispose = function () {\n      i[\"default\"].removeData(this._element, j), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;\n    }, e._getConfig = function (t) {\n      return (t = a({}, B, t)).toggle = Boolean(t.toggle), u.typeCheckConfig(x, t, Q), t;\n    }, e._getDimension = function () {\n      return i[\"default\"](this._element).hasClass(M) ? M : \"height\";\n    }, e._getParent = function () {\n      var e,\n          n = this;\n      u.isElement(this._config.parent) ? (e = this._config.parent, \"undefined\" != typeof this._config.parent.jquery && (e = this._config.parent[0])) : e = document.querySelector(this._config.parent);\n      var o = '[data-toggle=\"collapse\"][data-parent=\"' + this._config.parent + '\"]',\n          r = [].slice.call(e.querySelectorAll(o));\n      return i[\"default\"](r).each(function (e, i) {\n        n._addAriaAndCollapsedClass(t._getTargetFromElement(i), [i]);\n      }), e;\n    }, e._addAriaAndCollapsedClass = function (t, e) {\n      var n = i[\"default\"](t).hasClass(P);\n      e.length && i[\"default\"](e).toggleClass(H, !n).attr(\"aria-expanded\", n);\n    }, t._getTargetFromElement = function (t) {\n      var e = u.getSelectorFromElement(t);\n      return e ? document.querySelector(e) : null;\n    }, t._jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = i[\"default\"](this),\n            o = n.data(j),\n            r = a({}, B, n.data(), \"object\" == _typeof(e) && e ? e : {});\n\n        if (!o && r.toggle && \"string\" == typeof e && /show|hide/.test(e) && (r.toggle = !1), o || (o = new t(this, r), n.data(j, o)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof o[e]) throw new TypeError('No method named \"' + e + '\"');\n          o[e]();\n        }\n      });\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return B;\n      }\n    }]), t;\n  }();\n\n  i[\"default\"](document).on(\"click.bs.collapse.data-api\", q, function (t) {\n    \"A\" === t.currentTarget.tagName && t.preventDefault();\n    var e = i[\"default\"](this),\n        n = u.getSelectorFromElement(this),\n        o = [].slice.call(document.querySelectorAll(n));\n    i[\"default\"](o).each(function () {\n      var t = i[\"default\"](this),\n          n = t.data(j) ? \"toggle\" : e.data();\n\n      W._jQueryInterface.call(t, n);\n    });\n  }), i[\"default\"].fn[x] = W._jQueryInterface, i[\"default\"].fn[x].Constructor = W, i[\"default\"].fn[x].noConflict = function () {\n    return i[\"default\"].fn[x] = L, W._jQueryInterface;\n  };\n\n  var U = \"undefined\" != typeof window && \"undefined\" != typeof document && \"undefined\" != typeof navigator,\n      V = function () {\n    for (var t = [\"Edge\", \"Trident\", \"Firefox\"], e = 0; e < t.length; e += 1) {\n      if (U && navigator.userAgent.indexOf(t[e]) >= 0) return 1;\n    }\n\n    return 0;\n  }(),\n      Y = U && window.Promise ? function (t) {\n    var e = !1;\n    return function () {\n      e || (e = !0, window.Promise.resolve().then(function () {\n        e = !1, t();\n      }));\n    };\n  } : function (t) {\n    var e = !1;\n    return function () {\n      e || (e = !0, setTimeout(function () {\n        e = !1, t();\n      }, V));\n    };\n  };\n\n  function z(t) {\n    return t && \"[object Function]\" === {}.toString.call(t);\n  }\n\n  function K(t, e) {\n    if (1 !== t.nodeType) return [];\n    var n = t.ownerDocument.defaultView.getComputedStyle(t, null);\n    return e ? n[e] : n;\n  }\n\n  function X(t) {\n    return \"HTML\" === t.nodeName ? t : t.parentNode || t.host;\n  }\n\n  function G(t) {\n    if (!t) return document.body;\n\n    switch (t.nodeName) {\n      case \"HTML\":\n      case \"BODY\":\n        return t.ownerDocument.body;\n\n      case \"#document\":\n        return t.body;\n    }\n\n    var e = K(t),\n        n = e.overflow,\n        i = e.overflowX,\n        o = e.overflowY;\n    return /(auto|scroll|overlay)/.test(n + o + i) ? t : G(X(t));\n  }\n\n  function $(t) {\n    return t && t.referenceNode ? t.referenceNode : t;\n  }\n\n  var J = U && !(!window.MSInputMethodContext || !document.documentMode),\n      Z = U && /MSIE 10/.test(navigator.userAgent);\n\n  function tt(t) {\n    return 11 === t ? J : 10 === t ? Z : J || Z;\n  }\n\n  function et(t) {\n    if (!t) return document.documentElement;\n\n    for (var e = tt(10) ? document.body : null, n = t.offsetParent || null; n === e && t.nextElementSibling;) {\n      n = (t = t.nextElementSibling).offsetParent;\n    }\n\n    var i = n && n.nodeName;\n    return i && \"BODY\" !== i && \"HTML\" !== i ? -1 !== [\"TH\", \"TD\", \"TABLE\"].indexOf(n.nodeName) && \"static\" === K(n, \"position\") ? et(n) : n : t ? t.ownerDocument.documentElement : document.documentElement;\n  }\n\n  function nt(t) {\n    return null !== t.parentNode ? nt(t.parentNode) : t;\n  }\n\n  function it(t, e) {\n    if (!(t && t.nodeType && e && e.nodeType)) return document.documentElement;\n    var n = t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,\n        i = n ? t : e,\n        o = n ? e : t,\n        r = document.createRange();\n    r.setStart(i, 0), r.setEnd(o, 0);\n    var a,\n        s,\n        l = r.commonAncestorContainer;\n    if (t !== l && e !== l || i.contains(o)) return \"BODY\" === (s = (a = l).nodeName) || \"HTML\" !== s && et(a.firstElementChild) !== a ? et(l) : l;\n    var u = nt(t);\n    return u.host ? it(u.host, e) : it(t, nt(e).host);\n  }\n\n  function ot(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"top\",\n        n = \"top\" === e ? \"scrollTop\" : \"scrollLeft\",\n        i = t.nodeName;\n\n    if (\"BODY\" === i || \"HTML\" === i) {\n      var o = t.ownerDocument.documentElement,\n          r = t.ownerDocument.scrollingElement || o;\n      return r[n];\n    }\n\n    return t[n];\n  }\n\n  function rt(t, e) {\n    var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n        i = ot(e, \"top\"),\n        o = ot(e, \"left\"),\n        r = n ? -1 : 1;\n    return t.top += i * r, t.bottom += i * r, t.left += o * r, t.right += o * r, t;\n  }\n\n  function at(t, e) {\n    var n = \"x\" === e ? \"Left\" : \"Top\",\n        i = \"Left\" === n ? \"Right\" : \"Bottom\";\n    return parseFloat(t[\"border\" + n + \"Width\"]) + parseFloat(t[\"border\" + i + \"Width\"]);\n  }\n\n  function st(t, e, n, i) {\n    return Math.max(e[\"offset\" + t], e[\"scroll\" + t], n[\"client\" + t], n[\"offset\" + t], n[\"scroll\" + t], tt(10) ? parseInt(n[\"offset\" + t]) + parseInt(i[\"margin\" + (\"Height\" === t ? \"Top\" : \"Left\")]) + parseInt(i[\"margin\" + (\"Height\" === t ? \"Bottom\" : \"Right\")]) : 0);\n  }\n\n  function lt(t) {\n    var e = t.body,\n        n = t.documentElement,\n        i = tt(10) && getComputedStyle(n);\n    return {\n      height: st(\"Height\", e, n, i),\n      width: st(\"Width\", e, n, i)\n    };\n  }\n\n  var ut = function ut(t, e) {\n    if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n  },\n      ft = function () {\n    function t(t, e) {\n      for (var n = 0; n < e.length; n++) {\n        var i = e[n];\n        i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n      }\n    }\n\n    return function (e, n, i) {\n      return n && t(e.prototype, n), i && t(e, i), e;\n    };\n  }(),\n      dt = function dt(t, e, n) {\n    return e in t ? Object.defineProperty(t, e, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = n, t;\n  },\n      ct = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var i in n) {\n        Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n      }\n    }\n\n    return t;\n  };\n\n  function ht(t) {\n    return ct({}, t, {\n      right: t.left + t.width,\n      bottom: t.top + t.height\n    });\n  }\n\n  function pt(t) {\n    var e = {};\n\n    try {\n      if (tt(10)) {\n        e = t.getBoundingClientRect();\n        var n = ot(t, \"top\"),\n            i = ot(t, \"left\");\n        e.top += n, e.left += i, e.bottom += n, e.right += i;\n      } else e = t.getBoundingClientRect();\n    } catch (t) {}\n\n    var o = {\n      left: e.left,\n      top: e.top,\n      width: e.right - e.left,\n      height: e.bottom - e.top\n    },\n        r = \"HTML\" === t.nodeName ? lt(t.ownerDocument) : {},\n        a = r.width || t.clientWidth || o.width,\n        s = r.height || t.clientHeight || o.height,\n        l = t.offsetWidth - a,\n        u = t.offsetHeight - s;\n\n    if (l || u) {\n      var f = K(t);\n      l -= at(f, \"x\"), u -= at(f, \"y\"), o.width -= l, o.height -= u;\n    }\n\n    return ht(o);\n  }\n\n  function mt(t, e) {\n    var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n        i = tt(10),\n        o = \"HTML\" === e.nodeName,\n        r = pt(t),\n        a = pt(e),\n        s = G(t),\n        l = K(e),\n        u = parseFloat(l.borderTopWidth),\n        f = parseFloat(l.borderLeftWidth);\n    n && o && (a.top = Math.max(a.top, 0), a.left = Math.max(a.left, 0));\n    var d = ht({\n      top: r.top - a.top - u,\n      left: r.left - a.left - f,\n      width: r.width,\n      height: r.height\n    });\n\n    if (d.marginTop = 0, d.marginLeft = 0, !i && o) {\n      var c = parseFloat(l.marginTop),\n          h = parseFloat(l.marginLeft);\n      d.top -= u - c, d.bottom -= u - c, d.left -= f - h, d.right -= f - h, d.marginTop = c, d.marginLeft = h;\n    }\n\n    return (i && !n ? e.contains(s) : e === s && \"BODY\" !== s.nodeName) && (d = rt(d, e)), d;\n  }\n\n  function gt(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n        n = t.ownerDocument.documentElement,\n        i = mt(t, n),\n        o = Math.max(n.clientWidth, window.innerWidth || 0),\n        r = Math.max(n.clientHeight, window.innerHeight || 0),\n        a = e ? 0 : ot(n),\n        s = e ? 0 : ot(n, \"left\"),\n        l = {\n      top: a - i.top + i.marginTop,\n      left: s - i.left + i.marginLeft,\n      width: o,\n      height: r\n    };\n    return ht(l);\n  }\n\n  function _t(t) {\n    var e = t.nodeName;\n    if (\"BODY\" === e || \"HTML\" === e) return !1;\n    if (\"fixed\" === K(t, \"position\")) return !0;\n    var n = X(t);\n    return !!n && _t(n);\n  }\n\n  function vt(t) {\n    if (!t || !t.parentElement || tt()) return document.documentElement;\n\n    for (var e = t.parentElement; e && \"none\" === K(e, \"transform\");) {\n      e = e.parentElement;\n    }\n\n    return e || document.documentElement;\n  }\n\n  function bt(t, e, n, i) {\n    var o = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],\n        r = {\n      top: 0,\n      left: 0\n    },\n        a = o ? vt(t) : it(t, $(e));\n    if (\"viewport\" === i) r = gt(a, o);else {\n      var s = void 0;\n      \"scrollParent\" === i ? \"BODY\" === (s = G(X(e))).nodeName && (s = t.ownerDocument.documentElement) : s = \"window\" === i ? t.ownerDocument.documentElement : i;\n      var l = mt(s, a, o);\n      if (\"HTML\" !== s.nodeName || _t(a)) r = l;else {\n        var u = lt(t.ownerDocument),\n            f = u.height,\n            d = u.width;\n        r.top += l.top - l.marginTop, r.bottom = f + l.top, r.left += l.left - l.marginLeft, r.right = d + l.left;\n      }\n    }\n    var c = \"number\" == typeof (n = n || 0);\n    return r.left += c ? n : n.left || 0, r.top += c ? n : n.top || 0, r.right -= c ? n : n.right || 0, r.bottom -= c ? n : n.bottom || 0, r;\n  }\n\n  function yt(t) {\n    return t.width * t.height;\n  }\n\n  function Et(t, e, n, i, o) {\n    var r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === t.indexOf(\"auto\")) return t;\n    var a = bt(n, i, r, o),\n        s = {\n      top: {\n        width: a.width,\n        height: e.top - a.top\n      },\n      right: {\n        width: a.right - e.right,\n        height: a.height\n      },\n      bottom: {\n        width: a.width,\n        height: a.bottom - e.bottom\n      },\n      left: {\n        width: e.left - a.left,\n        height: a.height\n      }\n    },\n        l = Object.keys(s).map(function (t) {\n      return ct({\n        key: t\n      }, s[t], {\n        area: yt(s[t])\n      });\n    }).sort(function (t, e) {\n      return e.area - t.area;\n    }),\n        u = l.filter(function (t) {\n      var e = t.width,\n          i = t.height;\n      return e >= n.clientWidth && i >= n.clientHeight;\n    }),\n        f = u.length > 0 ? u[0].key : l[0].key,\n        d = t.split(\"-\")[1];\n    return f + (d ? \"-\" + d : \"\");\n  }\n\n  function wt(t, e, n) {\n    var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n        o = i ? vt(e) : it(e, $(n));\n    return mt(n, o, i);\n  }\n\n  function Tt(t) {\n    var e = t.ownerDocument.defaultView.getComputedStyle(t),\n        n = parseFloat(e.marginTop || 0) + parseFloat(e.marginBottom || 0),\n        i = parseFloat(e.marginLeft || 0) + parseFloat(e.marginRight || 0);\n    return {\n      width: t.offsetWidth + i,\n      height: t.offsetHeight + n\n    };\n  }\n\n  function Ct(t) {\n    var e = {\n      left: \"right\",\n      right: \"left\",\n      bottom: \"top\",\n      top: \"bottom\"\n    };\n    return t.replace(/left|right|bottom|top/g, function (t) {\n      return e[t];\n    });\n  }\n\n  function St(t, e, n) {\n    n = n.split(\"-\")[0];\n    var i = Tt(t),\n        o = {\n      width: i.width,\n      height: i.height\n    },\n        r = -1 !== [\"right\", \"left\"].indexOf(n),\n        a = r ? \"top\" : \"left\",\n        s = r ? \"left\" : \"top\",\n        l = r ? \"height\" : \"width\",\n        u = r ? \"width\" : \"height\";\n    return o[a] = e[a] + e[l] / 2 - i[l] / 2, o[s] = n === s ? e[s] - i[u] : e[Ct(s)], o;\n  }\n\n  function Nt(t, e) {\n    return Array.prototype.find ? t.find(e) : t.filter(e)[0];\n  }\n\n  function Dt(t, e, n) {\n    return (void 0 === n ? t : t.slice(0, function (t, e, n) {\n      if (Array.prototype.findIndex) return t.findIndex(function (t) {\n        return t.name === n;\n      });\n      var i = Nt(t, function (t) {\n        return t.name === n;\n      });\n      return t.indexOf(i);\n    }(t, 0, n))).forEach(function (t) {\n      t[\"function\"] && console.warn(\"`modifier.function` is deprecated, use `modifier.fn`!\");\n      var n = t[\"function\"] || t.fn;\n      t.enabled && z(n) && (e.offsets.popper = ht(e.offsets.popper), e.offsets.reference = ht(e.offsets.reference), e = n(e, t));\n    }), e;\n  }\n\n  function At() {\n    if (!this.state.isDestroyed) {\n      var t = {\n        instance: this,\n        styles: {},\n        arrowStyles: {},\n        attributes: {},\n        flipped: !1,\n        offsets: {}\n      };\n      t.offsets.reference = wt(this.state, this.popper, this.reference, this.options.positionFixed), t.placement = Et(this.options.placement, t.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), t.originalPlacement = t.placement, t.positionFixed = this.options.positionFixed, t.offsets.popper = St(this.popper, t.offsets.reference, t.placement), t.offsets.popper.position = this.options.positionFixed ? \"fixed\" : \"absolute\", t = Dt(this.modifiers, t), this.state.isCreated ? this.options.onUpdate(t) : (this.state.isCreated = !0, this.options.onCreate(t));\n    }\n  }\n\n  function kt(t, e) {\n    return t.some(function (t) {\n      var n = t.name;\n      return t.enabled && n === e;\n    });\n  }\n\n  function It(t) {\n    for (var e = [!1, \"ms\", \"Webkit\", \"Moz\", \"O\"], n = t.charAt(0).toUpperCase() + t.slice(1), i = 0; i < e.length; i++) {\n      var o = e[i],\n          r = o ? \"\" + o + n : t;\n      if (\"undefined\" != typeof document.body.style[r]) return r;\n    }\n\n    return null;\n  }\n\n  function Ot() {\n    return this.state.isDestroyed = !0, kt(this.modifiers, \"applyStyle\") && (this.popper.removeAttribute(\"x-placement\"), this.popper.style.position = \"\", this.popper.style.top = \"\", this.popper.style.left = \"\", this.popper.style.right = \"\", this.popper.style.bottom = \"\", this.popper.style.willChange = \"\", this.popper.style[It(\"transform\")] = \"\"), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n  }\n\n  function xt(t) {\n    var e = t.ownerDocument;\n    return e ? e.defaultView : window;\n  }\n\n  function jt(t, e, n, i) {\n    var o = \"BODY\" === t.nodeName,\n        r = o ? t.ownerDocument.defaultView : t;\n    r.addEventListener(e, n, {\n      passive: !0\n    }), o || jt(G(r.parentNode), e, n, i), i.push(r);\n  }\n\n  function Lt(t, e, n, i) {\n    n.updateBound = i, xt(t).addEventListener(\"resize\", n.updateBound, {\n      passive: !0\n    });\n    var o = G(t);\n    return jt(o, \"scroll\", n.updateBound, n.scrollParents), n.scrollElement = o, n.eventsEnabled = !0, n;\n  }\n\n  function Pt() {\n    this.state.eventsEnabled || (this.state = Lt(this.reference, this.options, this.state, this.scheduleUpdate));\n  }\n\n  function Ft() {\n    var t, e;\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (t = this.reference, e = this.state, xt(t).removeEventListener(\"resize\", e.updateBound), e.scrollParents.forEach(function (t) {\n      t.removeEventListener(\"scroll\", e.updateBound);\n    }), e.updateBound = null, e.scrollParents = [], e.scrollElement = null, e.eventsEnabled = !1, e));\n  }\n\n  function Rt(t) {\n    return \"\" !== t && !isNaN(parseFloat(t)) && isFinite(t);\n  }\n\n  function Ht(t, e) {\n    Object.keys(e).forEach(function (n) {\n      var i = \"\";\n      -1 !== [\"width\", \"height\", \"top\", \"right\", \"bottom\", \"left\"].indexOf(n) && Rt(e[n]) && (i = \"px\"), t.style[n] = e[n] + i;\n    });\n  }\n\n  var Mt = U && /Firefox/i.test(navigator.userAgent);\n\n  function qt(t, e, n) {\n    var i = Nt(t, function (t) {\n      return t.name === e;\n    }),\n        o = !!i && t.some(function (t) {\n      return t.name === n && t.enabled && t.order < i.order;\n    });\n\n    if (!o) {\n      var r = \"`\" + e + \"`\",\n          a = \"`\" + n + \"`\";\n      console.warn(a + \" modifier is required by \" + r + \" modifier in order to work, be sure to include it before \" + r + \"!\");\n    }\n\n    return o;\n  }\n\n  var Bt = [\"auto-start\", \"auto\", \"auto-end\", \"top-start\", \"top\", \"top-end\", \"right-start\", \"right\", \"right-end\", \"bottom-end\", \"bottom\", \"bottom-start\", \"left-end\", \"left\", \"left-start\"],\n      Qt = Bt.slice(3);\n\n  function Wt(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n        n = Qt.indexOf(t),\n        i = Qt.slice(n + 1).concat(Qt.slice(0, n));\n    return e ? i.reverse() : i;\n  }\n\n  var Ut = {\n    placement: \"bottom\",\n    positionFixed: !1,\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(t) {\n          var e = t.placement,\n              n = e.split(\"-\")[0],\n              i = e.split(\"-\")[1];\n\n          if (i) {\n            var o = t.offsets,\n                r = o.reference,\n                a = o.popper,\n                s = -1 !== [\"bottom\", \"top\"].indexOf(n),\n                l = s ? \"left\" : \"top\",\n                u = s ? \"width\" : \"height\",\n                f = {\n              start: dt({}, l, r[l]),\n              end: dt({}, l, r[l] + r[u] - a[u])\n            };\n            t.offsets.popper = ct({}, a, f[i]);\n          }\n\n          return t;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n,\n              i = e.offset,\n              o = t.placement,\n              r = t.offsets,\n              a = r.popper,\n              s = r.reference,\n              l = o.split(\"-\")[0];\n          return n = Rt(+i) ? [+i, 0] : function (t, e, n, i) {\n            var o = [0, 0],\n                r = -1 !== [\"right\", \"left\"].indexOf(i),\n                a = t.split(/(\\+|\\-)/).map(function (t) {\n              return t.trim();\n            }),\n                s = a.indexOf(Nt(a, function (t) {\n              return -1 !== t.search(/,|\\s/);\n            }));\n            a[s] && -1 === a[s].indexOf(\",\") && console.warn(\"Offsets separated by white space(s) are deprecated, use a comma (,) instead.\");\n            var l = /\\s*,\\s*|\\s+/,\n                u = -1 !== s ? [a.slice(0, s).concat([a[s].split(l)[0]]), [a[s].split(l)[1]].concat(a.slice(s + 1))] : [a];\n            return u = u.map(function (t, i) {\n              var o = (1 === i ? !r : r) ? \"height\" : \"width\",\n                  a = !1;\n              return t.reduce(function (t, e) {\n                return \"\" === t[t.length - 1] && -1 !== [\"+\", \"-\"].indexOf(e) ? (t[t.length - 1] = e, a = !0, t) : a ? (t[t.length - 1] += e, a = !1, t) : t.concat(e);\n              }, []).map(function (t) {\n                return function (t, e, n, i) {\n                  var o = t.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n                      r = +o[1],\n                      a = o[2];\n                  return r ? 0 === a.indexOf(\"%\") ? ht(\"%p\" === a ? n : i)[e] / 100 * r : \"vh\" === a || \"vw\" === a ? (\"vh\" === a ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * r : r : t;\n                }(t, o, e, n);\n              });\n            }), u.forEach(function (t, e) {\n              t.forEach(function (n, i) {\n                Rt(n) && (o[e] += n * (\"-\" === t[i - 1] ? -1 : 1));\n              });\n            }), o;\n          }(i, a, s, l), \"left\" === l ? (a.top += n[0], a.left -= n[1]) : \"right\" === l ? (a.top += n[0], a.left += n[1]) : \"top\" === l ? (a.left += n[0], a.top -= n[1]) : \"bottom\" === l && (a.left += n[0], a.top += n[1]), t.popper = a, t;\n        },\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n = e.boundariesElement || et(t.instance.popper);\n          t.instance.reference === n && (n = et(n));\n          var i = It(\"transform\"),\n              o = t.instance.popper.style,\n              r = o.top,\n              a = o.left,\n              s = o[i];\n          o.top = \"\", o.left = \"\", o[i] = \"\";\n          var l = bt(t.instance.popper, t.instance.reference, e.padding, n, t.positionFixed);\n          o.top = r, o.left = a, o[i] = s, e.boundaries = l;\n          var u = e.priority,\n              f = t.offsets.popper,\n              d = {\n            primary: function primary(t) {\n              var n = f[t];\n              return f[t] < l[t] && !e.escapeWithReference && (n = Math.max(f[t], l[t])), dt({}, t, n);\n            },\n            secondary: function secondary(t) {\n              var n = \"right\" === t ? \"left\" : \"top\",\n                  i = f[n];\n              return f[t] > l[t] && !e.escapeWithReference && (i = Math.min(f[n], l[t] - (\"right\" === t ? f.width : f.height))), dt({}, n, i);\n            }\n          };\n          return u.forEach(function (t) {\n            var e = -1 !== [\"left\", \"top\"].indexOf(t) ? \"primary\" : \"secondary\";\n            f = ct({}, f, d[e](t));\n          }), t.offsets.popper = f, t;\n        },\n        priority: [\"left\", \"right\", \"top\", \"bottom\"],\n        padding: 5,\n        boundariesElement: \"scrollParent\"\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(t) {\n          var e = t.offsets,\n              n = e.popper,\n              i = e.reference,\n              o = t.placement.split(\"-\")[0],\n              r = Math.floor,\n              a = -1 !== [\"top\", \"bottom\"].indexOf(o),\n              s = a ? \"right\" : \"bottom\",\n              l = a ? \"left\" : \"top\",\n              u = a ? \"width\" : \"height\";\n          return n[s] < r(i[l]) && (t.offsets.popper[l] = r(i[l]) - n[u]), n[l] > r(i[s]) && (t.offsets.popper[l] = r(i[s])), t;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n;\n          if (!qt(t.instance.modifiers, \"arrow\", \"keepTogether\")) return t;\n          var i = e.element;\n\n          if (\"string\" == typeof i) {\n            if (!(i = t.instance.popper.querySelector(i))) return t;\n          } else if (!t.instance.popper.contains(i)) return console.warn(\"WARNING: `arrow.element` must be child of its popper element!\"), t;\n\n          var o = t.placement.split(\"-\")[0],\n              r = t.offsets,\n              a = r.popper,\n              s = r.reference,\n              l = -1 !== [\"left\", \"right\"].indexOf(o),\n              u = l ? \"height\" : \"width\",\n              f = l ? \"Top\" : \"Left\",\n              d = f.toLowerCase(),\n              c = l ? \"left\" : \"top\",\n              h = l ? \"bottom\" : \"right\",\n              p = Tt(i)[u];\n          s[h] - p < a[d] && (t.offsets.popper[d] -= a[d] - (s[h] - p)), s[d] + p > a[h] && (t.offsets.popper[d] += s[d] + p - a[h]), t.offsets.popper = ht(t.offsets.popper);\n\n          var m = s[d] + s[u] / 2 - p / 2,\n              g = K(t.instance.popper),\n              _ = parseFloat(g[\"margin\" + f]),\n              v = parseFloat(g[\"border\" + f + \"Width\"]),\n              b = m - t.offsets.popper[d] - _ - v;\n\n          return b = Math.max(Math.min(a[u] - p, b), 0), t.arrowElement = i, t.offsets.arrow = (dt(n = {}, d, Math.round(b)), dt(n, c, \"\"), n), t;\n        },\n        element: \"[x-arrow]\"\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(t, e) {\n          if (kt(t.instance.modifiers, \"inner\")) return t;\n          if (t.flipped && t.placement === t.originalPlacement) return t;\n          var n = bt(t.instance.popper, t.instance.reference, e.padding, e.boundariesElement, t.positionFixed),\n              i = t.placement.split(\"-\")[0],\n              o = Ct(i),\n              r = t.placement.split(\"-\")[1] || \"\",\n              a = [];\n\n          switch (e.behavior) {\n            case \"flip\":\n              a = [i, o];\n              break;\n\n            case \"clockwise\":\n              a = Wt(i);\n              break;\n\n            case \"counterclockwise\":\n              a = Wt(i, !0);\n              break;\n\n            default:\n              a = e.behavior;\n          }\n\n          return a.forEach(function (s, l) {\n            if (i !== s || a.length === l + 1) return t;\n            i = t.placement.split(\"-\")[0], o = Ct(i);\n\n            var u = t.offsets.popper,\n                f = t.offsets.reference,\n                d = Math.floor,\n                c = \"left\" === i && d(u.right) > d(f.left) || \"right\" === i && d(u.left) < d(f.right) || \"top\" === i && d(u.bottom) > d(f.top) || \"bottom\" === i && d(u.top) < d(f.bottom),\n                h = d(u.left) < d(n.left),\n                p = d(u.right) > d(n.right),\n                m = d(u.top) < d(n.top),\n                g = d(u.bottom) > d(n.bottom),\n                _ = \"left\" === i && h || \"right\" === i && p || \"top\" === i && m || \"bottom\" === i && g,\n                v = -1 !== [\"top\", \"bottom\"].indexOf(i),\n                b = !!e.flipVariations && (v && \"start\" === r && h || v && \"end\" === r && p || !v && \"start\" === r && m || !v && \"end\" === r && g),\n                y = !!e.flipVariationsByContent && (v && \"start\" === r && p || v && \"end\" === r && h || !v && \"start\" === r && g || !v && \"end\" === r && m),\n                E = b || y;\n\n            (c || _ || E) && (t.flipped = !0, (c || _) && (i = a[l + 1]), E && (r = function (t) {\n              return \"end\" === t ? \"start\" : \"start\" === t ? \"end\" : t;\n            }(r)), t.placement = i + (r ? \"-\" + r : \"\"), t.offsets.popper = ct({}, t.offsets.popper, St(t.instance.popper, t.offsets.reference, t.placement)), t = Dt(t.instance.modifiers, t, \"flip\"));\n          }), t;\n        },\n        behavior: \"flip\",\n        padding: 5,\n        boundariesElement: \"viewport\",\n        flipVariations: !1,\n        flipVariationsByContent: !1\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(t) {\n          var e = t.placement,\n              n = e.split(\"-\")[0],\n              i = t.offsets,\n              o = i.popper,\n              r = i.reference,\n              a = -1 !== [\"left\", \"right\"].indexOf(n),\n              s = -1 === [\"top\", \"left\"].indexOf(n);\n          return o[a ? \"left\" : \"top\"] = r[n] - (s ? o[a ? \"width\" : \"height\"] : 0), t.placement = Ct(e), t.offsets.popper = ht(o), t;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(t) {\n          if (!qt(t.instance.modifiers, \"hide\", \"preventOverflow\")) return t;\n          var e = t.offsets.reference,\n              n = Nt(t.instance.modifiers, function (t) {\n            return \"preventOverflow\" === t.name;\n          }).boundaries;\n\n          if (e.bottom < n.top || e.left > n.right || e.top > n.bottom || e.right < n.left) {\n            if (!0 === t.hide) return t;\n            t.hide = !0, t.attributes[\"x-out-of-boundaries\"] = \"\";\n          } else {\n            if (!1 === t.hide) return t;\n            t.hide = !1, t.attributes[\"x-out-of-boundaries\"] = !1;\n          }\n\n          return t;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n = e.x,\n              i = e.y,\n              o = t.offsets.popper,\n              r = Nt(t.instance.modifiers, function (t) {\n            return \"applyStyle\" === t.name;\n          }).gpuAcceleration;\n          void 0 !== r && console.warn(\"WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!\");\n\n          var a,\n              s,\n              l = void 0 !== r ? r : e.gpuAcceleration,\n              u = et(t.instance.popper),\n              f = pt(u),\n              d = {\n            position: o.position\n          },\n              c = function (t, e) {\n            var n = t.offsets,\n                i = n.popper,\n                o = n.reference,\n                r = Math.round,\n                a = Math.floor,\n                s = function s(t) {\n              return t;\n            },\n                l = r(o.width),\n                u = r(i.width),\n                f = -1 !== [\"left\", \"right\"].indexOf(t.placement),\n                d = -1 !== t.placement.indexOf(\"-\"),\n                c = e ? f || d || l % 2 == u % 2 ? r : a : s,\n                h = e ? r : s;\n\n            return {\n              left: c(l % 2 == 1 && u % 2 == 1 && !d && e ? i.left - 1 : i.left),\n              top: h(i.top),\n              bottom: h(i.bottom),\n              right: c(i.right)\n            };\n          }(t, window.devicePixelRatio < 2 || !Mt),\n              h = \"bottom\" === n ? \"top\" : \"bottom\",\n              p = \"right\" === i ? \"left\" : \"right\",\n              m = It(\"transform\");\n\n          if (s = \"bottom\" === h ? \"HTML\" === u.nodeName ? -u.clientHeight + c.bottom : -f.height + c.bottom : c.top, a = \"right\" === p ? \"HTML\" === u.nodeName ? -u.clientWidth + c.right : -f.width + c.right : c.left, l && m) d[m] = \"translate3d(\" + a + \"px, \" + s + \"px, 0)\", d[h] = 0, d[p] = 0, d.willChange = \"transform\";else {\n            var g = \"bottom\" === h ? -1 : 1,\n                _ = \"right\" === p ? -1 : 1;\n\n            d[h] = s * g, d[p] = a * _, d.willChange = h + \", \" + p;\n          }\n          var v = {\n            \"x-placement\": t.placement\n          };\n          return t.attributes = ct({}, v, t.attributes), t.styles = ct({}, d, t.styles), t.arrowStyles = ct({}, t.offsets.arrow, t.arrowStyles), t;\n        },\n        gpuAcceleration: !0,\n        x: \"bottom\",\n        y: \"right\"\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(t) {\n          var e, n;\n          return Ht(t.instance.popper, t.styles), e = t.instance.popper, n = t.attributes, Object.keys(n).forEach(function (t) {\n            !1 !== n[t] ? e.setAttribute(t, n[t]) : e.removeAttribute(t);\n          }), t.arrowElement && Object.keys(t.arrowStyles).length && Ht(t.arrowElement, t.arrowStyles), t;\n        },\n        onLoad: function onLoad(t, e, n, i, o) {\n          var r = wt(o, e, t, n.positionFixed),\n              a = Et(n.placement, r, e, t, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);\n          return e.setAttribute(\"x-placement\", a), Ht(e, {\n            position: n.positionFixed ? \"fixed\" : \"absolute\"\n          }), n;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  },\n      Vt = function () {\n    function t(e, n) {\n      var i = this,\n          o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n      ut(this, t), this.scheduleUpdate = function () {\n        return requestAnimationFrame(i.update);\n      }, this.update = Y(this.update.bind(this)), this.options = ct({}, t.Defaults, o), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = e && e.jquery ? e[0] : e, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(ct({}, t.Defaults.modifiers, o.modifiers)).forEach(function (e) {\n        i.options.modifiers[e] = ct({}, t.Defaults.modifiers[e] || {}, o.modifiers ? o.modifiers[e] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (t) {\n        return ct({\n          name: t\n        }, i.options.modifiers[t]);\n      }).sort(function (t, e) {\n        return t.order - e.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && z(t.onLoad) && t.onLoad(i.reference, i.popper, i.options, t, i.state);\n      }), this.update();\n      var r = this.options.eventsEnabled;\n      r && this.enableEventListeners(), this.state.eventsEnabled = r;\n    }\n\n    return ft(t, [{\n      key: \"update\",\n      value: function value() {\n        return At.call(this);\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        return Ot.call(this);\n      }\n    }, {\n      key: \"enableEventListeners\",\n      value: function value() {\n        return Pt.call(this);\n      }\n    }, {\n      key: \"disableEventListeners\",\n      value: function value() {\n        return Ft.call(this);\n      }\n    }]), t;\n  }();\n\n  Vt.Utils = (\"undefined\" != typeof window ? window : __webpack_require__.g).PopperUtils, Vt.placements = Bt, Vt.Defaults = Ut;\n\n  var Yt = Vt,\n      zt = \"dropdown\",\n      Kt = \"bs.dropdown\",\n      Xt = i[\"default\"].fn[zt],\n      Gt = new RegExp(\"38|40|27\"),\n      $t = \"disabled\",\n      Jt = \"show\",\n      Zt = \"dropdown-menu-right\",\n      te = \"hide.bs.dropdown\",\n      ee = \"hidden.bs.dropdown\",\n      ne = \"click.bs.dropdown.data-api\",\n      ie = \"keydown.bs.dropdown.data-api\",\n      oe = '[data-toggle=\"dropdown\"]',\n      re = \".dropdown-menu\",\n      ae = {\n    offset: 0,\n    flip: !0,\n    boundary: \"scrollParent\",\n    reference: \"toggle\",\n    display: \"dynamic\",\n    popperConfig: null\n  },\n      se = {\n    offset: \"(number|string|function)\",\n    flip: \"boolean\",\n    boundary: \"(string|element)\",\n    reference: \"(string|element)\",\n    display: \"string\",\n    popperConfig: \"(null|object)\"\n  },\n      le = function () {\n    function t(t, e) {\n      this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();\n    }\n\n    var e = t.prototype;\n    return e.toggle = function () {\n      if (!this._element.disabled && !i[\"default\"](this._element).hasClass($t)) {\n        var e = i[\"default\"](this._menu).hasClass(Jt);\n        t._clearMenus(), e || this.show(!0);\n      }\n    }, e.show = function (e) {\n      if (void 0 === e && (e = !1), !(this._element.disabled || i[\"default\"](this._element).hasClass($t) || i[\"default\"](this._menu).hasClass(Jt))) {\n        var n = {\n          relatedTarget: this._element\n        },\n            o = i[\"default\"].Event(\"show.bs.dropdown\", n),\n            r = t._getParentFromElement(this._element);\n\n        if (i[\"default\"](r).trigger(o), !o.isDefaultPrevented()) {\n          if (!this._inNavbar && e) {\n            if (\"undefined\" == typeof Yt) throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n            var a = this._element;\n            \"parent\" === this._config.reference ? a = r : u.isElement(this._config.reference) && (a = this._config.reference, \"undefined\" != typeof this._config.reference.jquery && (a = this._config.reference[0])), \"scrollParent\" !== this._config.boundary && i[\"default\"](r).addClass(\"position-static\"), this._popper = new Yt(a, this._menu, this._getPopperConfig());\n          }\n\n          \"ontouchstart\" in document.documentElement && 0 === i[\"default\"](r).closest(\".navbar-nav\").length && i[\"default\"](document.body).children().on(\"mouseover\", null, i[\"default\"].noop), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), i[\"default\"](this._menu).toggleClass(Jt), i[\"default\"](r).toggleClass(Jt).trigger(i[\"default\"].Event(\"shown.bs.dropdown\", n));\n        }\n      }\n    }, e.hide = function () {\n      if (!this._element.disabled && !i[\"default\"](this._element).hasClass($t) && i[\"default\"](this._menu).hasClass(Jt)) {\n        var e = {\n          relatedTarget: this._element\n        },\n            n = i[\"default\"].Event(te, e),\n            o = t._getParentFromElement(this._element);\n\n        i[\"default\"](o).trigger(n), n.isDefaultPrevented() || (this._popper && this._popper.destroy(), i[\"default\"](this._menu).toggleClass(Jt), i[\"default\"](o).toggleClass(Jt).trigger(i[\"default\"].Event(ee, e)));\n      }\n    }, e.dispose = function () {\n      i[\"default\"].removeData(this._element, Kt), i[\"default\"](this._element).off(\".bs.dropdown\"), this._element = null, this._menu = null, null !== this._popper && (this._popper.destroy(), this._popper = null);\n    }, e.update = function () {\n      this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();\n    }, e._addEventListeners = function () {\n      var t = this;\n      i[\"default\"](this._element).on(\"click.bs.dropdown\", function (e) {\n        e.preventDefault(), e.stopPropagation(), t.toggle();\n      });\n    }, e._getConfig = function (t) {\n      return t = a({}, this.constructor.Default, i[\"default\"](this._element).data(), t), u.typeCheckConfig(zt, t, this.constructor.DefaultType), t;\n    }, e._getMenuElement = function () {\n      if (!this._menu) {\n        var e = t._getParentFromElement(this._element);\n\n        e && (this._menu = e.querySelector(re));\n      }\n\n      return this._menu;\n    }, e._getPlacement = function () {\n      var t = i[\"default\"](this._element.parentNode),\n          e = \"bottom-start\";\n      return t.hasClass(\"dropup\") ? e = i[\"default\"](this._menu).hasClass(Zt) ? \"top-end\" : \"top-start\" : t.hasClass(\"dropright\") ? e = \"right-start\" : t.hasClass(\"dropleft\") ? e = \"left-start\" : i[\"default\"](this._menu).hasClass(Zt) && (e = \"bottom-end\"), e;\n    }, e._detectNavbar = function () {\n      return i[\"default\"](this._element).closest(\".navbar\").length > 0;\n    }, e._getOffset = function () {\n      var t = this,\n          e = {};\n      return \"function\" == typeof this._config.offset ? e.fn = function (e) {\n        return e.offsets = a({}, e.offsets, t._config.offset(e.offsets, t._element)), e;\n      } : e.offset = this._config.offset, e;\n    }, e._getPopperConfig = function () {\n      var t = {\n        placement: this._getPlacement(),\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            enabled: this._config.flip\n          },\n          preventOverflow: {\n            boundariesElement: this._config.boundary\n          }\n        }\n      };\n      return \"static\" === this._config.display && (t.modifiers.applyStyle = {\n        enabled: !1\n      }), a({}, t, this._config.popperConfig);\n    }, t._jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = i[\"default\"](this).data(Kt);\n\n        if (n || (n = new t(this, \"object\" == _typeof(e) ? e : null), i[\"default\"](this).data(Kt, n)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof n[e]) throw new TypeError('No method named \"' + e + '\"');\n          n[e]();\n        }\n      });\n    }, t._clearMenus = function (e) {\n      if (!e || 3 !== e.which && (\"keyup\" !== e.type || 9 === e.which)) for (var n = [].slice.call(document.querySelectorAll(oe)), o = 0, r = n.length; o < r; o++) {\n        var a = t._getParentFromElement(n[o]),\n            s = i[\"default\"](n[o]).data(Kt),\n            l = {\n          relatedTarget: n[o]\n        };\n\n        if (e && \"click\" === e.type && (l.clickEvent = e), s) {\n          var u = s._menu;\n\n          if (i[\"default\"](a).hasClass(Jt) && !(e && (\"click\" === e.type && /input|textarea/i.test(e.target.tagName) || \"keyup\" === e.type && 9 === e.which) && i[\"default\"].contains(a, e.target))) {\n            var f = i[\"default\"].Event(te, l);\n            i[\"default\"](a).trigger(f), f.isDefaultPrevented() || (\"ontouchstart\" in document.documentElement && i[\"default\"](document.body).children().off(\"mouseover\", null, i[\"default\"].noop), n[o].setAttribute(\"aria-expanded\", \"false\"), s._popper && s._popper.destroy(), i[\"default\"](u).removeClass(Jt), i[\"default\"](a).removeClass(Jt).trigger(i[\"default\"].Event(ee, l)));\n          }\n        }\n      }\n    }, t._getParentFromElement = function (t) {\n      var e,\n          n = u.getSelectorFromElement(t);\n      return n && (e = document.querySelector(n)), e || t.parentNode;\n    }, t._dataApiKeydownHandler = function (e) {\n      if (!(/input|textarea/i.test(e.target.tagName) ? 32 === e.which || 27 !== e.which && (40 !== e.which && 38 !== e.which || i[\"default\"](e.target).closest(re).length) : !Gt.test(e.which)) && !this.disabled && !i[\"default\"](this).hasClass($t)) {\n        var n = t._getParentFromElement(this),\n            o = i[\"default\"](n).hasClass(Jt);\n\n        if (o || 27 !== e.which) {\n          if (e.preventDefault(), e.stopPropagation(), !o || 27 === e.which || 32 === e.which) return 27 === e.which && i[\"default\"](n.querySelector(oe)).trigger(\"focus\"), void i[\"default\"](this).trigger(\"click\");\n          var r = [].slice.call(n.querySelectorAll(\".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\")).filter(function (t) {\n            return i[\"default\"](t).is(\":visible\");\n          });\n\n          if (0 !== r.length) {\n            var a = r.indexOf(e.target);\n            38 === e.which && a > 0 && a--, 40 === e.which && a < r.length - 1 && a++, a < 0 && (a = 0), r[a].focus();\n          }\n        }\n      }\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return ae;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return se;\n      }\n    }]), t;\n  }();\n\n  i[\"default\"](document).on(ie, oe, le._dataApiKeydownHandler).on(ie, re, le._dataApiKeydownHandler).on(ne + \" keyup.bs.dropdown.data-api\", le._clearMenus).on(ne, oe, function (t) {\n    t.preventDefault(), t.stopPropagation(), le._jQueryInterface.call(i[\"default\"](this), \"toggle\");\n  }).on(ne, \".dropdown form\", function (t) {\n    t.stopPropagation();\n  }), i[\"default\"].fn[zt] = le._jQueryInterface, i[\"default\"].fn[zt].Constructor = le, i[\"default\"].fn[zt].noConflict = function () {\n    return i[\"default\"].fn[zt] = Xt, le._jQueryInterface;\n  };\n\n  var ue = \"bs.modal\",\n      fe = i[\"default\"].fn.modal,\n      de = \"modal-open\",\n      ce = \"fade\",\n      he = \"show\",\n      pe = \"modal-static\",\n      me = \"hidden.bs.modal\",\n      ge = \"show.bs.modal\",\n      _e = \"focusin.bs.modal\",\n      ve = \"resize.bs.modal\",\n      be = \"click.dismiss.bs.modal\",\n      ye = \"keydown.dismiss.bs.modal\",\n      Ee = \"mousedown.dismiss.bs.modal\",\n      we = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\",\n      Te = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0,\n    show: !0\n  },\n      Ce = {\n    backdrop: \"(boolean|string)\",\n    keyboard: \"boolean\",\n    focus: \"boolean\",\n    show: \"boolean\"\n  },\n      Se = function () {\n    function t(t, e) {\n      this._config = this._getConfig(e), this._element = t, this._dialog = t.querySelector(\".modal-dialog\"), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0;\n    }\n\n    var e = t.prototype;\n    return e.toggle = function (t) {\n      return this._isShown ? this.hide() : this.show(t);\n    }, e.show = function (t) {\n      var e = this;\n\n      if (!this._isShown && !this._isTransitioning) {\n        var n = i[\"default\"].Event(ge, {\n          relatedTarget: t\n        });\n        i[\"default\"](this._element).trigger(n), n.isDefaultPrevented() || (this._isShown = !0, i[\"default\"](this._element).hasClass(ce) && (this._isTransitioning = !0), this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), i[\"default\"](this._element).on(be, '[data-dismiss=\"modal\"]', function (t) {\n          return e.hide(t);\n        }), i[\"default\"](this._dialog).on(Ee, function () {\n          i[\"default\"](e._element).one(\"mouseup.dismiss.bs.modal\", function (t) {\n            i[\"default\"](t.target).is(e._element) && (e._ignoreBackdropClick = !0);\n          });\n        }), this._showBackdrop(function () {\n          return e._showElement(t);\n        }));\n      }\n    }, e.hide = function (t) {\n      var e = this;\n\n      if (t && t.preventDefault(), this._isShown && !this._isTransitioning) {\n        var n = i[\"default\"].Event(\"hide.bs.modal\");\n\n        if (i[\"default\"](this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {\n          this._isShown = !1;\n          var o = i[\"default\"](this._element).hasClass(ce);\n\n          if (o && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), i[\"default\"](document).off(_e), i[\"default\"](this._element).removeClass(he), i[\"default\"](this._element).off(be), i[\"default\"](this._dialog).off(Ee), o) {\n            var r = u.getTransitionDurationFromElement(this._element);\n            i[\"default\"](this._element).one(u.TRANSITION_END, function (t) {\n              return e._hideModal(t);\n            }).emulateTransitionEnd(r);\n          } else this._hideModal();\n        }\n      }\n    }, e.dispose = function () {\n      [window, this._element, this._dialog].forEach(function (t) {\n        return i[\"default\"](t).off(\".bs.modal\");\n      }), i[\"default\"](document).off(_e), i[\"default\"].removeData(this._element, ue), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;\n    }, e.handleUpdate = function () {\n      this._adjustDialog();\n    }, e._getConfig = function (t) {\n      return t = a({}, Te, t), u.typeCheckConfig(\"modal\", t, Ce), t;\n    }, e._triggerBackdropTransition = function () {\n      var t = this,\n          e = i[\"default\"].Event(\"hidePrevented.bs.modal\");\n\n      if (i[\"default\"](this._element).trigger(e), !e.isDefaultPrevented()) {\n        var n = this._element.scrollHeight > document.documentElement.clientHeight;\n        n || (this._element.style.overflowY = \"hidden\"), this._element.classList.add(pe);\n        var o = u.getTransitionDurationFromElement(this._dialog);\n        i[\"default\"](this._element).off(u.TRANSITION_END), i[\"default\"](this._element).one(u.TRANSITION_END, function () {\n          t._element.classList.remove(pe), n || i[\"default\"](t._element).one(u.TRANSITION_END, function () {\n            t._element.style.overflowY = \"\";\n          }).emulateTransitionEnd(t._element, o);\n        }).emulateTransitionEnd(o), this._element.focus();\n      }\n    }, e._showElement = function (t) {\n      var e = this,\n          n = i[\"default\"](this._element).hasClass(ce),\n          o = this._dialog ? this._dialog.querySelector(\".modal-body\") : null;\n      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), i[\"default\"](this._dialog).hasClass(\"modal-dialog-scrollable\") && o ? o.scrollTop = 0 : this._element.scrollTop = 0, n && u.reflow(this._element), i[\"default\"](this._element).addClass(he), this._config.focus && this._enforceFocus();\n\n      var r = i[\"default\"].Event(\"shown.bs.modal\", {\n        relatedTarget: t\n      }),\n          a = function a() {\n        e._config.focus && e._element.focus(), e._isTransitioning = !1, i[\"default\"](e._element).trigger(r);\n      };\n\n      if (n) {\n        var s = u.getTransitionDurationFromElement(this._dialog);\n        i[\"default\"](this._dialog).one(u.TRANSITION_END, a).emulateTransitionEnd(s);\n      } else a();\n    }, e._enforceFocus = function () {\n      var t = this;\n      i[\"default\"](document).off(_e).on(_e, function (e) {\n        document !== e.target && t._element !== e.target && 0 === i[\"default\"](t._element).has(e.target).length && t._element.focus();\n      });\n    }, e._setEscapeEvent = function () {\n      var t = this;\n      this._isShown ? i[\"default\"](this._element).on(ye, function (e) {\n        t._config.keyboard && 27 === e.which ? (e.preventDefault(), t.hide()) : t._config.keyboard || 27 !== e.which || t._triggerBackdropTransition();\n      }) : this._isShown || i[\"default\"](this._element).off(ye);\n    }, e._setResizeEvent = function () {\n      var t = this;\n      this._isShown ? i[\"default\"](window).on(ve, function (e) {\n        return t.handleUpdate(e);\n      }) : i[\"default\"](window).off(ve);\n    }, e._hideModal = function () {\n      var t = this;\n      this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._showBackdrop(function () {\n        i[\"default\"](document.body).removeClass(de), t._resetAdjustments(), t._resetScrollbar(), i[\"default\"](t._element).trigger(me);\n      });\n    }, e._removeBackdrop = function () {\n      this._backdrop && (i[\"default\"](this._backdrop).remove(), this._backdrop = null);\n    }, e._showBackdrop = function (t) {\n      var e = this,\n          n = i[\"default\"](this._element).hasClass(ce) ? ce : \"\";\n\n      if (this._isShown && this._config.backdrop) {\n        if (this._backdrop = document.createElement(\"div\"), this._backdrop.className = \"modal-backdrop\", n && this._backdrop.classList.add(n), i[\"default\"](this._backdrop).appendTo(document.body), i[\"default\"](this._element).on(be, function (t) {\n          e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && (\"static\" === e._config.backdrop ? e._triggerBackdropTransition() : e.hide());\n        }), n && u.reflow(this._backdrop), i[\"default\"](this._backdrop).addClass(he), !t) return;\n        if (!n) return void t();\n        var o = u.getTransitionDurationFromElement(this._backdrop);\n        i[\"default\"](this._backdrop).one(u.TRANSITION_END, t).emulateTransitionEnd(o);\n      } else if (!this._isShown && this._backdrop) {\n        i[\"default\"](this._backdrop).removeClass(he);\n\n        var r = function r() {\n          e._removeBackdrop(), t && t();\n        };\n\n        if (i[\"default\"](this._element).hasClass(ce)) {\n          var a = u.getTransitionDurationFromElement(this._backdrop);\n          i[\"default\"](this._backdrop).one(u.TRANSITION_END, r).emulateTransitionEnd(a);\n        } else r();\n      } else t && t();\n    }, e._adjustDialog = function () {\n      var t = this._element.scrollHeight > document.documentElement.clientHeight;\n      !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + \"px\"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + \"px\");\n    }, e._resetAdjustments = function () {\n      this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n    }, e._checkScrollbar = function () {\n      var t = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = Math.round(t.left + t.right) < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();\n    }, e._setScrollbar = function () {\n      var t = this;\n\n      if (this._isBodyOverflowing) {\n        var e = [].slice.call(document.querySelectorAll(we)),\n            n = [].slice.call(document.querySelectorAll(\".sticky-top\"));\n        i[\"default\"](e).each(function (e, n) {\n          var o = n.style.paddingRight,\n              r = i[\"default\"](n).css(\"padding-right\");\n          i[\"default\"](n).data(\"padding-right\", o).css(\"padding-right\", parseFloat(r) + t._scrollbarWidth + \"px\");\n        }), i[\"default\"](n).each(function (e, n) {\n          var o = n.style.marginRight,\n              r = i[\"default\"](n).css(\"margin-right\");\n          i[\"default\"](n).data(\"margin-right\", o).css(\"margin-right\", parseFloat(r) - t._scrollbarWidth + \"px\");\n        });\n        var o = document.body.style.paddingRight,\n            r = i[\"default\"](document.body).css(\"padding-right\");\n        i[\"default\"](document.body).data(\"padding-right\", o).css(\"padding-right\", parseFloat(r) + this._scrollbarWidth + \"px\");\n      }\n\n      i[\"default\"](document.body).addClass(de);\n    }, e._resetScrollbar = function () {\n      var t = [].slice.call(document.querySelectorAll(we));\n      i[\"default\"](t).each(function (t, e) {\n        var n = i[\"default\"](e).data(\"padding-right\");\n        i[\"default\"](e).removeData(\"padding-right\"), e.style.paddingRight = n || \"\";\n      });\n      var e = [].slice.call(document.querySelectorAll(\".sticky-top\"));\n      i[\"default\"](e).each(function (t, e) {\n        var n = i[\"default\"](e).data(\"margin-right\");\n        \"undefined\" != typeof n && i[\"default\"](e).css(\"margin-right\", n).removeData(\"margin-right\");\n      });\n      var n = i[\"default\"](document.body).data(\"padding-right\");\n      i[\"default\"](document.body).removeData(\"padding-right\"), document.body.style.paddingRight = n || \"\";\n    }, e._getScrollbarWidth = function () {\n      var t = document.createElement(\"div\");\n      t.className = \"modal-scrollbar-measure\", document.body.appendChild(t);\n      var e = t.getBoundingClientRect().width - t.clientWidth;\n      return document.body.removeChild(t), e;\n    }, t._jQueryInterface = function (e, n) {\n      return this.each(function () {\n        var o = i[\"default\"](this).data(ue),\n            r = a({}, Te, i[\"default\"](this).data(), \"object\" == _typeof(e) && e ? e : {});\n\n        if (o || (o = new t(this, r), i[\"default\"](this).data(ue, o)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof o[e]) throw new TypeError('No method named \"' + e + '\"');\n          o[e](n);\n        } else r.show && o.show(n);\n      });\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Te;\n      }\n    }]), t;\n  }();\n\n  i[\"default\"](document).on(\"click.bs.modal.data-api\", '[data-toggle=\"modal\"]', function (t) {\n    var e,\n        n = this,\n        o = u.getSelectorFromElement(this);\n    o && (e = document.querySelector(o));\n    var r = i[\"default\"](e).data(ue) ? \"toggle\" : a({}, i[\"default\"](e).data(), i[\"default\"](this).data());\n    \"A\" !== this.tagName && \"AREA\" !== this.tagName || t.preventDefault();\n    var s = i[\"default\"](e).one(ge, function (t) {\n      t.isDefaultPrevented() || s.one(me, function () {\n        i[\"default\"](n).is(\":visible\") && n.focus();\n      });\n    });\n\n    Se._jQueryInterface.call(i[\"default\"](e), r, this);\n  }), i[\"default\"].fn.modal = Se._jQueryInterface, i[\"default\"].fn.modal.Constructor = Se, i[\"default\"].fn.modal.noConflict = function () {\n    return i[\"default\"].fn.modal = fe, Se._jQueryInterface;\n  };\n  var Ne = [\"background\", \"cite\", \"href\", \"itemtype\", \"longdesc\", \"poster\", \"src\", \"xlink:href\"],\n      De = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,\n      Ae = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  function ke(t, e, n) {\n    if (0 === t.length) return t;\n    if (n && \"function\" == typeof n) return n(t);\n\n    for (var i = new window.DOMParser().parseFromString(t, \"text/html\"), o = Object.keys(e), r = [].slice.call(i.body.querySelectorAll(\"*\")), a = function a(t, n) {\n      var i = r[t],\n          a = i.nodeName.toLowerCase();\n      if (-1 === o.indexOf(i.nodeName.toLowerCase())) return i.parentNode.removeChild(i), \"continue\";\n      var s = [].slice.call(i.attributes),\n          l = [].concat(e[\"*\"] || [], e[a] || []);\n      s.forEach(function (t) {\n        (function (t, e) {\n          var n = t.nodeName.toLowerCase();\n          if (-1 !== e.indexOf(n)) return -1 === Ne.indexOf(n) || Boolean(De.test(t.nodeValue) || Ae.test(t.nodeValue));\n\n          for (var i = e.filter(function (t) {\n            return t instanceof RegExp;\n          }), o = 0, r = i.length; o < r; o++) {\n            if (i[o].test(n)) return !0;\n          }\n\n          return !1;\n        })(t, l) || i.removeAttribute(t.nodeName);\n      });\n    }, s = 0, l = r.length; s < l; s++) {\n      a(s);\n    }\n\n    return i.body.innerHTML;\n  }\n\n  var Ie = \"tooltip\",\n      Oe = \"bs.tooltip\",\n      xe = i[\"default\"].fn.tooltip,\n      je = new RegExp(\"(^|\\\\s)bs-tooltip\\\\S+\", \"g\"),\n      Le = [\"sanitize\", \"whiteList\", \"sanitizeFn\"],\n      Pe = \"fade\",\n      Fe = \"show\",\n      Re = \"show\",\n      He = \"out\",\n      Me = \"hover\",\n      qe = \"focus\",\n      Be = {\n    AUTO: \"auto\",\n    TOP: \"top\",\n    RIGHT: \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: \"left\"\n  },\n      Qe = {\n    animation: !0,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: \"top\",\n    offset: 0,\n    container: !1,\n    fallbackPlacement: \"flip\",\n    boundary: \"scrollParent\",\n    customClass: \"\",\n    sanitize: !0,\n    sanitizeFn: null,\n    whiteList: {\n      \"*\": [\"class\", \"dir\", \"id\", \"lang\", \"role\", /^aria-[\\w-]*$/i],\n      a: [\"target\", \"href\", \"title\", \"rel\"],\n      area: [],\n      b: [],\n      br: [],\n      col: [],\n      code: [],\n      div: [],\n      em: [],\n      hr: [],\n      h1: [],\n      h2: [],\n      h3: [],\n      h4: [],\n      h5: [],\n      h6: [],\n      i: [],\n      img: [\"src\", \"srcset\", \"alt\", \"title\", \"width\", \"height\"],\n      li: [],\n      ol: [],\n      p: [],\n      pre: [],\n      s: [],\n      small: [],\n      span: [],\n      sub: [],\n      sup: [],\n      strong: [],\n      u: [],\n      ul: []\n    },\n    popperConfig: null\n  },\n      We = {\n    animation: \"boolean\",\n    template: \"string\",\n    title: \"(string|element|function)\",\n    trigger: \"string\",\n    delay: \"(number|object)\",\n    html: \"boolean\",\n    selector: \"(string|boolean)\",\n    placement: \"(string|function)\",\n    offset: \"(number|string|function)\",\n    container: \"(string|element|boolean)\",\n    fallbackPlacement: \"(string|array)\",\n    boundary: \"(string|element)\",\n    customClass: \"(string|function)\",\n    sanitize: \"boolean\",\n    sanitizeFn: \"(null|function)\",\n    whiteList: \"object\",\n    popperConfig: \"(null|object)\"\n  },\n      Ue = {\n    HIDE: \"hide.bs.tooltip\",\n    HIDDEN: \"hidden.bs.tooltip\",\n    SHOW: \"show.bs.tooltip\",\n    SHOWN: \"shown.bs.tooltip\",\n    INSERTED: \"inserted.bs.tooltip\",\n    CLICK: \"click.bs.tooltip\",\n    FOCUSIN: \"focusin.bs.tooltip\",\n    FOCUSOUT: \"focusout.bs.tooltip\",\n    MOUSEENTER: \"mouseenter.bs.tooltip\",\n    MOUSELEAVE: \"mouseleave.bs.tooltip\"\n  },\n      Ve = function () {\n    function t(t, e) {\n      if (\"undefined\" == typeof Yt) throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n      this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();\n    }\n\n    var e = t.prototype;\n    return e.enable = function () {\n      this._isEnabled = !0;\n    }, e.disable = function () {\n      this._isEnabled = !1;\n    }, e.toggleEnabled = function () {\n      this._isEnabled = !this._isEnabled;\n    }, e.toggle = function (t) {\n      if (this._isEnabled) if (t) {\n        var e = this.constructor.DATA_KEY,\n            n = i[\"default\"](t.currentTarget).data(e);\n        n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), i[\"default\"](t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);\n      } else {\n        if (i[\"default\"](this.getTipElement()).hasClass(Fe)) return void this._leave(null, this);\n\n        this._enter(null, this);\n      }\n    }, e.dispose = function () {\n      clearTimeout(this._timeout), i[\"default\"].removeData(this.element, this.constructor.DATA_KEY), i[\"default\"](this.element).off(this.constructor.EVENT_KEY), i[\"default\"](this.element).closest(\".modal\").off(\"hide.bs.modal\", this._hideModalHandler), this.tip && i[\"default\"](this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;\n    }, e.show = function () {\n      var t = this;\n      if (\"none\" === i[\"default\"](this.element).css(\"display\")) throw new Error(\"Please use show on visible elements\");\n      var e = i[\"default\"].Event(this.constructor.Event.SHOW);\n\n      if (this.isWithContent() && this._isEnabled) {\n        i[\"default\"](this.element).trigger(e);\n        var n = u.findShadowRoot(this.element),\n            o = i[\"default\"].contains(null !== n ? n : this.element.ownerDocument.documentElement, this.element);\n        if (e.isDefaultPrevented() || !o) return;\n        var r = this.getTipElement(),\n            a = u.getUID(this.constructor.NAME);\n        r.setAttribute(\"id\", a), this.element.setAttribute(\"aria-describedby\", a), this.setContent(), this.config.animation && i[\"default\"](r).addClass(Pe);\n\n        var s = \"function\" == typeof this.config.placement ? this.config.placement.call(this, r, this.element) : this.config.placement,\n            l = this._getAttachment(s);\n\n        this.addAttachmentClass(l);\n\n        var f = this._getContainer();\n\n        i[\"default\"](r).data(this.constructor.DATA_KEY, this), i[\"default\"].contains(this.element.ownerDocument.documentElement, this.tip) || i[\"default\"](r).appendTo(f), i[\"default\"](this.element).trigger(this.constructor.Event.INSERTED), this._popper = new Yt(this.element, r, this._getPopperConfig(l)), i[\"default\"](r).addClass(Fe), i[\"default\"](r).addClass(this.config.customClass), \"ontouchstart\" in document.documentElement && i[\"default\"](document.body).children().on(\"mouseover\", null, i[\"default\"].noop);\n\n        var d = function d() {\n          t.config.animation && t._fixTransition();\n          var e = t._hoverState;\n          t._hoverState = null, i[\"default\"](t.element).trigger(t.constructor.Event.SHOWN), e === He && t._leave(null, t);\n        };\n\n        if (i[\"default\"](this.tip).hasClass(Pe)) {\n          var c = u.getTransitionDurationFromElement(this.tip);\n          i[\"default\"](this.tip).one(u.TRANSITION_END, d).emulateTransitionEnd(c);\n        } else d();\n      }\n    }, e.hide = function (t) {\n      var e = this,\n          n = this.getTipElement(),\n          o = i[\"default\"].Event(this.constructor.Event.HIDE),\n          r = function r() {\n        e._hoverState !== Re && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute(\"aria-describedby\"), i[\"default\"](e.element).trigger(e.constructor.Event.HIDDEN), null !== e._popper && e._popper.destroy(), t && t();\n      };\n\n      if (i[\"default\"](this.element).trigger(o), !o.isDefaultPrevented()) {\n        if (i[\"default\"](n).removeClass(Fe), \"ontouchstart\" in document.documentElement && i[\"default\"](document.body).children().off(\"mouseover\", null, i[\"default\"].noop), this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1, i[\"default\"](this.tip).hasClass(Pe)) {\n          var a = u.getTransitionDurationFromElement(n);\n          i[\"default\"](n).one(u.TRANSITION_END, r).emulateTransitionEnd(a);\n        } else r();\n\n        this._hoverState = \"\";\n      }\n    }, e.update = function () {\n      null !== this._popper && this._popper.scheduleUpdate();\n    }, e.isWithContent = function () {\n      return Boolean(this.getTitle());\n    }, e.addAttachmentClass = function (t) {\n      i[\"default\"](this.getTipElement()).addClass(\"bs-tooltip-\" + t);\n    }, e.getTipElement = function () {\n      return this.tip = this.tip || i[\"default\"](this.config.template)[0], this.tip;\n    }, e.setContent = function () {\n      var t = this.getTipElement();\n      this.setElementContent(i[\"default\"](t.querySelectorAll(\".tooltip-inner\")), this.getTitle()), i[\"default\"](t).removeClass(\"fade show\");\n    }, e.setElementContent = function (t, e) {\n      \"object\" != _typeof(e) || !e.nodeType && !e.jquery ? this.config.html ? (this.config.sanitize && (e = ke(e, this.config.whiteList, this.config.sanitizeFn)), t.html(e)) : t.text(e) : this.config.html ? i[\"default\"](e).parent().is(t) || t.empty().append(e) : t.text(i[\"default\"](e).text());\n    }, e.getTitle = function () {\n      var t = this.element.getAttribute(\"data-original-title\");\n      return t || (t = \"function\" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;\n    }, e._getPopperConfig = function (t) {\n      var e = this;\n      return a({}, {\n        placement: t,\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            behavior: this.config.fallbackPlacement\n          },\n          arrow: {\n            element: \".arrow\"\n          },\n          preventOverflow: {\n            boundariesElement: this.config.boundary\n          }\n        },\n        onCreate: function onCreate(t) {\n          t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);\n        },\n        onUpdate: function onUpdate(t) {\n          return e._handlePopperPlacementChange(t);\n        }\n      }, this.config.popperConfig);\n    }, e._getOffset = function () {\n      var t = this,\n          e = {};\n      return \"function\" == typeof this.config.offset ? e.fn = function (e) {\n        return e.offsets = a({}, e.offsets, t.config.offset(e.offsets, t.element)), e;\n      } : e.offset = this.config.offset, e;\n    }, e._getContainer = function () {\n      return !1 === this.config.container ? document.body : u.isElement(this.config.container) ? i[\"default\"](this.config.container) : i[\"default\"](document).find(this.config.container);\n    }, e._getAttachment = function (t) {\n      return Be[t.toUpperCase()];\n    }, e._setListeners = function () {\n      var t = this;\n      this.config.trigger.split(\" \").forEach(function (e) {\n        if (\"click\" === e) i[\"default\"](t.element).on(t.constructor.Event.CLICK, t.config.selector, function (e) {\n          return t.toggle(e);\n        });else if (\"manual\" !== e) {\n          var n = e === Me ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,\n              o = e === Me ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;\n          i[\"default\"](t.element).on(n, t.config.selector, function (e) {\n            return t._enter(e);\n          }).on(o, t.config.selector, function (e) {\n            return t._leave(e);\n          });\n        }\n      }), this._hideModalHandler = function () {\n        t.element && t.hide();\n      }, i[\"default\"](this.element).closest(\".modal\").on(\"hide.bs.modal\", this._hideModalHandler), this.config.selector ? this.config = a({}, this.config, {\n        trigger: \"manual\",\n        selector: \"\"\n      }) : this._fixTitle();\n    }, e._fixTitle = function () {\n      var t = _typeof(this.element.getAttribute(\"data-original-title\"));\n\n      (this.element.getAttribute(\"title\") || \"string\" !== t) && (this.element.setAttribute(\"data-original-title\", this.element.getAttribute(\"title\") || \"\"), this.element.setAttribute(\"title\", \"\"));\n    }, e._enter = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      (e = e || i[\"default\"](t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), i[\"default\"](t.currentTarget).data(n, e)), t && (e._activeTrigger[\"focusin\" === t.type ? qe : Me] = !0), i[\"default\"](e.getTipElement()).hasClass(Fe) || e._hoverState === Re ? e._hoverState = Re : (clearTimeout(e._timeout), e._hoverState = Re, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {\n        e._hoverState === Re && e.show();\n      }, e.config.delay.show) : e.show());\n    }, e._leave = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      (e = e || i[\"default\"](t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), i[\"default\"](t.currentTarget).data(n, e)), t && (e._activeTrigger[\"focusout\" === t.type ? qe : Me] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = He, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {\n        e._hoverState === He && e.hide();\n      }, e.config.delay.hide) : e.hide());\n    }, e._isWithActiveTrigger = function () {\n      for (var t in this._activeTrigger) {\n        if (this._activeTrigger[t]) return !0;\n      }\n\n      return !1;\n    }, e._getConfig = function (t) {\n      var e = i[\"default\"](this.element).data();\n      return Object.keys(e).forEach(function (t) {\n        -1 !== Le.indexOf(t) && delete e[t];\n      }), \"number\" == typeof (t = a({}, this.constructor.Default, e, \"object\" == _typeof(t) && t ? t : {})).delay && (t.delay = {\n        show: t.delay,\n        hide: t.delay\n      }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), u.typeCheckConfig(Ie, t, this.constructor.DefaultType), t.sanitize && (t.template = ke(t.template, t.whiteList, t.sanitizeFn)), t;\n    }, e._getDelegateConfig = function () {\n      var t = {};\n      if (this.config) for (var e in this.config) {\n        this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);\n      }\n      return t;\n    }, e._cleanTipClass = function () {\n      var t = i[\"default\"](this.getTipElement()),\n          e = t.attr(\"class\").match(je);\n      null !== e && e.length && t.removeClass(e.join(\"\"));\n    }, e._handlePopperPlacementChange = function (t) {\n      this.tip = t.instance.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));\n    }, e._fixTransition = function () {\n      var t = this.getTipElement(),\n          e = this.config.animation;\n      null === t.getAttribute(\"x-placement\") && (i[\"default\"](t).removeClass(Pe), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);\n    }, t._jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = i[\"default\"](this),\n            o = n.data(Oe),\n            r = \"object\" == _typeof(e) && e;\n\n        if ((o || !/dispose|hide/.test(e)) && (o || (o = new t(this, r), n.data(Oe, o)), \"string\" == typeof e)) {\n          if (\"undefined\" == typeof o[e]) throw new TypeError('No method named \"' + e + '\"');\n          o[e]();\n        }\n      });\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Qe;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return Ie;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return Oe;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Ue;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return \".bs.tooltip\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return We;\n      }\n    }]), t;\n  }();\n\n  i[\"default\"].fn.tooltip = Ve._jQueryInterface, i[\"default\"].fn.tooltip.Constructor = Ve, i[\"default\"].fn.tooltip.noConflict = function () {\n    return i[\"default\"].fn.tooltip = xe, Ve._jQueryInterface;\n  };\n\n  var Ye = \"bs.popover\",\n      ze = i[\"default\"].fn.popover,\n      Ke = new RegExp(\"(^|\\\\s)bs-popover\\\\S+\", \"g\"),\n      Xe = a({}, Ve.Default, {\n    placement: \"right\",\n    trigger: \"click\",\n    content: \"\",\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n  }),\n      Ge = a({}, Ve.DefaultType, {\n    content: \"(string|element|function)\"\n  }),\n      $e = {\n    HIDE: \"hide.bs.popover\",\n    HIDDEN: \"hidden.bs.popover\",\n    SHOW: \"show.bs.popover\",\n    SHOWN: \"shown.bs.popover\",\n    INSERTED: \"inserted.bs.popover\",\n    CLICK: \"click.bs.popover\",\n    FOCUSIN: \"focusin.bs.popover\",\n    FOCUSOUT: \"focusout.bs.popover\",\n    MOUSEENTER: \"mouseenter.bs.popover\",\n    MOUSELEAVE: \"mouseleave.bs.popover\"\n  },\n      Je = function (t) {\n    var e, n;\n\n    function o() {\n      return t.apply(this, arguments) || this;\n    }\n\n    n = t, (e = o).prototype = Object.create(n.prototype), e.prototype.constructor = e, s(e, n);\n    var a = o.prototype;\n    return a.isWithContent = function () {\n      return this.getTitle() || this._getContent();\n    }, a.addAttachmentClass = function (t) {\n      i[\"default\"](this.getTipElement()).addClass(\"bs-popover-\" + t);\n    }, a.getTipElement = function () {\n      return this.tip = this.tip || i[\"default\"](this.config.template)[0], this.tip;\n    }, a.setContent = function () {\n      var t = i[\"default\"](this.getTipElement());\n      this.setElementContent(t.find(\".popover-header\"), this.getTitle());\n\n      var e = this._getContent();\n\n      \"function\" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(\".popover-body\"), e), t.removeClass(\"fade show\");\n    }, a._getContent = function () {\n      return this.element.getAttribute(\"data-content\") || this.config.content;\n    }, a._cleanTipClass = function () {\n      var t = i[\"default\"](this.getTipElement()),\n          e = t.attr(\"class\").match(Ke);\n      null !== e && e.length > 0 && t.removeClass(e.join(\"\"));\n    }, o._jQueryInterface = function (t) {\n      return this.each(function () {\n        var e = i[\"default\"](this).data(Ye),\n            n = \"object\" == _typeof(t) ? t : null;\n\n        if ((e || !/dispose|hide/.test(t)) && (e || (e = new o(this, n), i[\"default\"](this).data(Ye, e)), \"string\" == typeof t)) {\n          if (\"undefined\" == typeof e[t]) throw new TypeError('No method named \"' + t + '\"');\n          e[t]();\n        }\n      });\n    }, r(o, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Xe;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return \"popover\";\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return Ye;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return $e;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return \".bs.popover\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return Ge;\n      }\n    }]), o;\n  }(Ve);\n\n  i[\"default\"].fn.popover = Je._jQueryInterface, i[\"default\"].fn.popover.Constructor = Je, i[\"default\"].fn.popover.noConflict = function () {\n    return i[\"default\"].fn.popover = ze, Je._jQueryInterface;\n  };\n\n  var Ze = \"scrollspy\",\n      tn = \"bs.scrollspy\",\n      en = i[\"default\"].fn[Ze],\n      nn = \"active\",\n      on = \"position\",\n      rn = \".nav, .list-group\",\n      an = {\n    offset: 10,\n    method: \"auto\",\n    target: \"\"\n  },\n      sn = {\n    offset: \"number\",\n    method: \"string\",\n    target: \"(string|element)\"\n  },\n      ln = function () {\n    function t(t, e) {\n      var n = this;\n      this._element = t, this._scrollElement = \"BODY\" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + \" .nav-link,\" + this._config.target + \" .list-group-item,\" + this._config.target + \" .dropdown-item\", this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, i[\"default\"](this._scrollElement).on(\"scroll.bs.scrollspy\", function (t) {\n        return n._process(t);\n      }), this.refresh(), this._process();\n    }\n\n    var e = t.prototype;\n    return e.refresh = function () {\n      var t = this,\n          e = this._scrollElement === this._scrollElement.window ? \"offset\" : on,\n          n = \"auto\" === this._config.method ? e : this._config.method,\n          o = n === on ? this._getScrollTop() : 0;\n      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map(function (t) {\n        var e,\n            r = u.getSelectorFromElement(t);\n\n        if (r && (e = document.querySelector(r)), e) {\n          var a = e.getBoundingClientRect();\n          if (a.width || a.height) return [i[\"default\"](e)[n]().top + o, r];\n        }\n\n        return null;\n      }).filter(function (t) {\n        return t;\n      }).sort(function (t, e) {\n        return t[0] - e[0];\n      }).forEach(function (e) {\n        t._offsets.push(e[0]), t._targets.push(e[1]);\n      });\n    }, e.dispose = function () {\n      i[\"default\"].removeData(this._element, tn), i[\"default\"](this._scrollElement).off(\".bs.scrollspy\"), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;\n    }, e._getConfig = function (t) {\n      if (\"string\" != typeof (t = a({}, an, \"object\" == _typeof(t) && t ? t : {})).target && u.isElement(t.target)) {\n        var e = i[\"default\"](t.target).attr(\"id\");\n        e || (e = u.getUID(Ze), i[\"default\"](t.target).attr(\"id\", e)), t.target = \"#\" + e;\n      }\n\n      return u.typeCheckConfig(Ze, t, sn), t;\n    }, e._getScrollTop = function () {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }, e._getScrollHeight = function () {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }, e._getOffsetHeight = function () {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }, e._process = function () {\n      var t = this._getScrollTop() + this._config.offset,\n          e = this._getScrollHeight(),\n          n = this._config.offset + e - this._getOffsetHeight();\n\n      if (this._scrollHeight !== e && this.refresh(), t >= n) {\n        var i = this._targets[this._targets.length - 1];\n        this._activeTarget !== i && this._activate(i);\n      } else {\n        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();\n\n        for (var o = this._offsets.length; o--;) {\n          this._activeTarget !== this._targets[o] && t >= this._offsets[o] && (\"undefined\" == typeof this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);\n        }\n      }\n    }, e._activate = function (t) {\n      this._activeTarget = t, this._clear();\n\n      var e = this._selector.split(\",\").map(function (e) {\n        return e + '[data-target=\"' + t + '\"],' + e + '[href=\"' + t + '\"]';\n      }),\n          n = i[\"default\"]([].slice.call(document.querySelectorAll(e.join(\",\"))));\n\n      n.hasClass(\"dropdown-item\") ? (n.closest(\".dropdown\").find(\".dropdown-toggle\").addClass(nn), n.addClass(nn)) : (n.addClass(nn), n.parents(rn).prev(\".nav-link, .list-group-item\").addClass(nn), n.parents(rn).prev(\".nav-item\").children(\".nav-link\").addClass(nn)), i[\"default\"](this._scrollElement).trigger(\"activate.bs.scrollspy\", {\n        relatedTarget: t\n      });\n    }, e._clear = function () {\n      [].slice.call(document.querySelectorAll(this._selector)).filter(function (t) {\n        return t.classList.contains(nn);\n      }).forEach(function (t) {\n        return t.classList.remove(nn);\n      });\n    }, t._jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = i[\"default\"](this).data(tn);\n\n        if (n || (n = new t(this, \"object\" == _typeof(e) && e), i[\"default\"](this).data(tn, n)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof n[e]) throw new TypeError('No method named \"' + e + '\"');\n          n[e]();\n        }\n      });\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return an;\n      }\n    }]), t;\n  }();\n\n  i[\"default\"](window).on(\"load.bs.scrollspy.data-api\", function () {\n    for (var t = [].slice.call(document.querySelectorAll('[data-spy=\"scroll\"]')), e = t.length; e--;) {\n      var n = i[\"default\"](t[e]);\n\n      ln._jQueryInterface.call(n, n.data());\n    }\n  }), i[\"default\"].fn[Ze] = ln._jQueryInterface, i[\"default\"].fn[Ze].Constructor = ln, i[\"default\"].fn[Ze].noConflict = function () {\n    return i[\"default\"].fn[Ze] = en, ln._jQueryInterface;\n  };\n\n  var un = \"bs.tab\",\n      fn = i[\"default\"].fn.tab,\n      dn = \"active\",\n      cn = \"fade\",\n      hn = \"show\",\n      pn = \".active\",\n      mn = \"> li > .active\",\n      gn = function () {\n    function t(t) {\n      this._element = t;\n    }\n\n    var e = t.prototype;\n    return e.show = function () {\n      var t = this;\n\n      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && i[\"default\"](this._element).hasClass(dn) || i[\"default\"](this._element).hasClass(\"disabled\"))) {\n        var e,\n            n,\n            o = i[\"default\"](this._element).closest(\".nav, .list-group\")[0],\n            r = u.getSelectorFromElement(this._element);\n\n        if (o) {\n          var a = \"UL\" === o.nodeName || \"OL\" === o.nodeName ? mn : pn;\n          n = (n = i[\"default\"].makeArray(i[\"default\"](o).find(a)))[n.length - 1];\n        }\n\n        var s = i[\"default\"].Event(\"hide.bs.tab\", {\n          relatedTarget: this._element\n        }),\n            l = i[\"default\"].Event(\"show.bs.tab\", {\n          relatedTarget: n\n        });\n\n        if (n && i[\"default\"](n).trigger(s), i[\"default\"](this._element).trigger(l), !l.isDefaultPrevented() && !s.isDefaultPrevented()) {\n          r && (e = document.querySelector(r)), this._activate(this._element, o);\n\n          var f = function f() {\n            var e = i[\"default\"].Event(\"hidden.bs.tab\", {\n              relatedTarget: t._element\n            }),\n                o = i[\"default\"].Event(\"shown.bs.tab\", {\n              relatedTarget: n\n            });\n            i[\"default\"](n).trigger(e), i[\"default\"](t._element).trigger(o);\n          };\n\n          e ? this._activate(e, e.parentNode, f) : f();\n        }\n      }\n    }, e.dispose = function () {\n      i[\"default\"].removeData(this._element, un), this._element = null;\n    }, e._activate = function (t, e, n) {\n      var o = this,\n          r = (!e || \"UL\" !== e.nodeName && \"OL\" !== e.nodeName ? i[\"default\"](e).children(pn) : i[\"default\"](e).find(mn))[0],\n          a = n && r && i[\"default\"](r).hasClass(cn),\n          s = function s() {\n        return o._transitionComplete(t, r, n);\n      };\n\n      if (r && a) {\n        var l = u.getTransitionDurationFromElement(r);\n        i[\"default\"](r).removeClass(hn).one(u.TRANSITION_END, s).emulateTransitionEnd(l);\n      } else s();\n    }, e._transitionComplete = function (t, e, n) {\n      if (e) {\n        i[\"default\"](e).removeClass(dn);\n        var o = i[\"default\"](e.parentNode).find(\"> .dropdown-menu .active\")[0];\n        o && i[\"default\"](o).removeClass(dn), \"tab\" === e.getAttribute(\"role\") && e.setAttribute(\"aria-selected\", !1);\n      }\n\n      i[\"default\"](t).addClass(dn), \"tab\" === t.getAttribute(\"role\") && t.setAttribute(\"aria-selected\", !0), u.reflow(t), t.classList.contains(cn) && t.classList.add(hn);\n      var r = t.parentNode;\n\n      if (r && \"LI\" === r.nodeName && (r = r.parentNode), r && i[\"default\"](r).hasClass(\"dropdown-menu\")) {\n        var a = i[\"default\"](t).closest(\".dropdown\")[0];\n\n        if (a) {\n          var s = [].slice.call(a.querySelectorAll(\".dropdown-toggle\"));\n          i[\"default\"](s).addClass(dn);\n        }\n\n        t.setAttribute(\"aria-expanded\", !0);\n      }\n\n      n && n();\n    }, t._jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = i[\"default\"](this),\n            o = n.data(un);\n\n        if (o || (o = new t(this), n.data(un, o)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof o[e]) throw new TypeError('No method named \"' + e + '\"');\n          o[e]();\n        }\n      });\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }]), t;\n  }();\n\n  i[\"default\"](document).on(\"click.bs.tab.data-api\", '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]', function (t) {\n    t.preventDefault(), gn._jQueryInterface.call(i[\"default\"](this), \"show\");\n  }), i[\"default\"].fn.tab = gn._jQueryInterface, i[\"default\"].fn.tab.Constructor = gn, i[\"default\"].fn.tab.noConflict = function () {\n    return i[\"default\"].fn.tab = fn, gn._jQueryInterface;\n  };\n\n  var _n = \"bs.toast\",\n      vn = i[\"default\"].fn.toast,\n      bn = \"hide\",\n      yn = \"show\",\n      En = \"showing\",\n      wn = \"click.dismiss.bs.toast\",\n      Tn = {\n    animation: !0,\n    autohide: !0,\n    delay: 500\n  },\n      Cn = {\n    animation: \"boolean\",\n    autohide: \"boolean\",\n    delay: \"number\"\n  },\n      Sn = function () {\n    function t(t, e) {\n      this._element = t, this._config = this._getConfig(e), this._timeout = null, this._setListeners();\n    }\n\n    var e = t.prototype;\n    return e.show = function () {\n      var t = this,\n          e = i[\"default\"].Event(\"show.bs.toast\");\n\n      if (i[\"default\"](this._element).trigger(e), !e.isDefaultPrevented()) {\n        this._clearTimeout(), this._config.animation && this._element.classList.add(\"fade\");\n\n        var n = function n() {\n          t._element.classList.remove(En), t._element.classList.add(yn), i[\"default\"](t._element).trigger(\"shown.bs.toast\"), t._config.autohide && (t._timeout = setTimeout(function () {\n            t.hide();\n          }, t._config.delay));\n        };\n\n        if (this._element.classList.remove(bn), u.reflow(this._element), this._element.classList.add(En), this._config.animation) {\n          var o = u.getTransitionDurationFromElement(this._element);\n          i[\"default\"](this._element).one(u.TRANSITION_END, n).emulateTransitionEnd(o);\n        } else n();\n      }\n    }, e.hide = function () {\n      if (this._element.classList.contains(yn)) {\n        var t = i[\"default\"].Event(\"hide.bs.toast\");\n        i[\"default\"](this._element).trigger(t), t.isDefaultPrevented() || this._close();\n      }\n    }, e.dispose = function () {\n      this._clearTimeout(), this._element.classList.contains(yn) && this._element.classList.remove(yn), i[\"default\"](this._element).off(wn), i[\"default\"].removeData(this._element, _n), this._element = null, this._config = null;\n    }, e._getConfig = function (t) {\n      return t = a({}, Tn, i[\"default\"](this._element).data(), \"object\" == _typeof(t) && t ? t : {}), u.typeCheckConfig(\"toast\", t, this.constructor.DefaultType), t;\n    }, e._setListeners = function () {\n      var t = this;\n      i[\"default\"](this._element).on(wn, '[data-dismiss=\"toast\"]', function () {\n        return t.hide();\n      });\n    }, e._close = function () {\n      var t = this,\n          e = function e() {\n        t._element.classList.add(bn), i[\"default\"](t._element).trigger(\"hidden.bs.toast\");\n      };\n\n      if (this._element.classList.remove(yn), this._config.animation) {\n        var n = u.getTransitionDurationFromElement(this._element);\n        i[\"default\"](this._element).one(u.TRANSITION_END, e).emulateTransitionEnd(n);\n      } else e();\n    }, e._clearTimeout = function () {\n      clearTimeout(this._timeout), this._timeout = null;\n    }, t._jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = i[\"default\"](this),\n            o = n.data(_n);\n\n        if (o || (o = new t(this, \"object\" == _typeof(e) && e), n.data(_n, o)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof o[e]) throw new TypeError('No method named \"' + e + '\"');\n          o[e](this);\n        }\n      });\n    }, r(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.6.1\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return Cn;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Tn;\n      }\n    }]), t;\n  }();\n\n  i[\"default\"].fn.toast = Sn._jQueryInterface, i[\"default\"].fn.toast.Constructor = Sn, i[\"default\"].fn.toast.noConflict = function () {\n    return i[\"default\"].fn.toast = vn, Sn._jQueryInterface;\n  }, t.Alert = c, t.Button = b, t.Carousel = O, t.Collapse = W, t.Dropdown = le, t.Modal = Se, t.Popover = Je, t.Scrollspy = ln, t.Tab = gn, t.Toast = Sn, t.Tooltip = Ve, t.Util = u, Object.defineProperty(t, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/plugins/bootstrap/js/bootstrap.bundle.min.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2022-08-26T17:52Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.6.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.6\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2021-02-16\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem && elem.namespaceURI,\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// Support: Chrome 86+\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\n\t\t\t\t\t\treturn result && result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\t// trim whitespace for custom property (issue gh-4926)\n\t\tif ( isCustomProp ) {\n\n\t\t\t// rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" );\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./public/plugins/bootstrap/js/bootstrap.bundle.min.js");
/******/ 	__webpack_require__("./public/dist/js/adminlte.min.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./public/js/jquery-ui.js");
/******/ 	
/******/ })()
;